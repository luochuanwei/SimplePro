<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Couchbase.NetClient</name>
    </assembly>
    <members>
        <member name="M:Couchbase.Analytics.AnalyticsClient.Query``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Queries the specified request.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsClient.QueryAsync``1(Couchbase.Analytics.IAnalyticsRequest,System.Threading.CancellationToken)">
            <summary>
            Queries the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryRequest">The query request.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsRequest.OriginalStatement">
            <summary>
            Gets the original analytics statement.
            </summary>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsRequest.CurrentContextId">
            <summary>
            Gets the context identifier for the analytics request. Useful for debugging.
            </summary>
            <returns>The unique request ID.</returns>.
            <remarks>
            This value changes for every request.
            </remarks>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsRequest.GetFormValues">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2" /> of the name/value pairs to be POSTed to the analytics service.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IDictionary`2" /> of the name/value pairs to be POSTed to the analytics service.
            </returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsRequest.GetFormValuesAsJson">
            <summary>
            Gets the JSON representation of this analytics request's parameters.
            </summary>
            <returns>
            The form values as a JSON object.
            </returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsRequest.TimedOut">
            <summary>
            True if the request exceeded it's <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.AnalyticsRequestTimeout" />.
            </summary>
            <returns>
            <c>true</c> if the request times out; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsRequest.Statement(System.String)">
            <summary>
            Sets a analytics statement to be executed.
            </summary>
            <param name="statement">Any valid SQL++ statement for.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest" /> for method chaining.
            </returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsRequest.Credentials(System.String,System.String,System.Boolean)">
            <summary>
            Adds a set of credentials to the list of credentials, in the form of username/password.
            </summary>
            <param name="username">The bucket or username.</param>
            <param name="password">The password of the bucket.</param>
            <param name="isAdmin">True if connecting as an admin.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest" /> for method chaining.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">username - cannot be null, empty or whitespace.</exception>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsRequest.ClientContextId(System.String)">
            <summary>
            A user supplied piece of data supplied with the request to the sevice. Any result will also contain the same data.
            </summary>
            <param name="contextId"></param>
            <returns>
            A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsRequest.Pretty(System.Boolean)">
            <summary>
            Sets whether the analytics query and result JSON formatting will be intended.
            NOTE: Setting <see cref="M:Couchbase.Analytics.AnalyticsRequest.Pretty(System.Boolean)" /> to true can have a negative performance impact due to larger payloads.
            </summary>
            <param name="pretty">if set to <c>true</c> [pretty].</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsRequest.IncludeMetrics(System.Boolean)">
            <summary>
            Specifies that metrics should be returned with query results.
            </summary>
            <param name="includeMetrics">True to return query metrics.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.HttpStatusCode">
            <summary>
            Gets or sets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.RequestId">
            <summary>
            Gets A unique identifier for the response.
            </summary>
            <value>
            The unique identifier for the response.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.ClientContextId">
            <summary>
            Gets the clientContextID of the request, if one was supplied. Used for debugging.
            </summary>
            <value>
            The client context identifier.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.Rows">
            <summary>
            Gets a list of all the objects returned by the query. An object can be any JSON value.
            </summary>
            <value>
            A a list of all the objects returned by the query.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.Status">
            <summary>
            Gets the status of the request; possible values are: success, running, errors, completed, stopped, timeout, fatal.
            </summary>
            <value>
            The status of the request.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.Signature">
            <summary>
            Gets the schema of the results. Present only when the query completes successfully.
            </summary>
            <value>
            The signature of the schema of the request.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.Success">
            <summary>
            Returns true if the operation was succesful.
            </summary>
            <remarks>
            If Success is false, use the Message property to help determine the reason.
            </remarks>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.Message">
            <summary>
            If the operation wasn't succesful, a message indicating why it was not succesful.
            </summary>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsResult`1.ShouldRetry">
            <summary>
            If the response indicates the request is retryable, returns true.
            </summary>
            <returns></returns>
            <remarks>
            Intended for internal use only.
            </remarks>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsResult`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the analytics rows from the result array.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the analytics rows.
            </returns>
        </member>
        <member name="M:Couchbase.Analytics.AnalyticsResult`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the analytics rows from the result array.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the analytics rows.
            </returns>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.Errors">
            <summary>
            Gets a list of 0 or more error objects; if an error occurred during processing of the request, it will be represented by an error object in this list.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.Warnings">
            <summary>
            Gets a list of 0 or more warning objects; if a warning occurred during processing of the request, it will be represented by a warning object in this list.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.AnalyticsResult`1.Metrics">
            <summary>
            Gets an object containing metrics about the request.
            </summary>
            <value>
            The metrics.
            </value>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsClient.Query``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Executes an Analytics request against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="request">The <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsClient.QueryAsync``1(Couchbase.Analytics.IAnalyticsRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an analytics request against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="request">The <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> to execute.</param>
            <param name="token">A cancellation token that can be used to cancel the request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsRequest.OriginalStatement">
            <summary>
            Gets the original analytics statement.
            </summary>
            <returns>The original statement as a <see cref="T:System.String"/></returns>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsRequest.CurrentContextId">
            <summary>
            Gets the context identifier for the analytics request. Useful for debugging.
            </summary>
            <returns>The unique request ID.</returns>.
            <remarks>
            This value changes for every request.
            </remarks>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.GetFormValues">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2"/> of the name/value pairs to be POSTed to the analytics service.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IDictionary`2"/> of the name/value pairs to be POSTed to the analytics service.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.GetFormValuesAsJson">
            <summary>
            Gets the JSON representation of this analytics request's parameters.
            </summary>
            <returns>The form values as a JSON object.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.TimedOut">
            <summary>
            True if the request exceeded it's <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.AnalyticsRequestTimeout"/>.
            </summary>
            <returns><c>true</c> if the request times out; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.Statement(System.String)">
            <summary>
            Sets a analytics statement to be executed.
            </summary>
            <param name="statement">Any valid SQL++ statement for.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.Credentials(System.String,System.String,System.Boolean)">
            <summary>
            Adds a set of credentials to the list of credentials, in the form of username/password.
            </summary>
            <param name="username">The bucket or username.</param>
            <param name="password">The password of the bucket.</param>
            <param name="isAdmin">True if connecting as an admin.</param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
            <remarks>Optional.</remarks>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.ClientContextId(System.String)">
            <summary>
            A user supplied piece of data supplied with the request to the sevice. Any result will also contain the same data.
            </summary>
            <param name="contextId"></param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
            <remarks>Optional.</remarks>
            <remarks>Maximum allowed size is 64 characters. A clientContextID longer than 64 characters is cut off at 64 characters.</remarks>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.Pretty(System.Boolean)">
            <summary>
            Sets whether the analytics query and result JSON formatting will be intended.
            NOTE: Setting <see cref="M:Couchbase.Analytics.IAnalyticsRequest.Pretty(System.Boolean)"/> to true can have a negative performance impact due to larger payloads.
            </summary>
            <param name="pretty">if set to <c>true</c> [pretty].</param>
            <returns>A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> for method chaining.</returns>
            <remarks>Optional.</remarks>
        </member>
        <member name="M:Couchbase.Analytics.IAnalyticsRequest.IncludeMetrics(System.Boolean)">
            <summary>
            Specifies that metrics should be returned with query results.
            </summary>
            <param name="includeMetrics">True to return query metrics.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.Analytics.IAnalyticsRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.HttpStatusCode">
            <summary>
            Gets or sets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.Rows">
            <summary>
            Gets a list of all the objects returned by the query. An object can be any JSON value.
            </summary>
            <value>
            A a list of all the objects returned by the query.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.RequestId">
            <summary>
            Gets A unique identifier for the response.
            </summary>
            <value>
            The unique identifier for the response.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.ClientContextId">
            <summary>
            Gets the clientContextID of the request, if one was supplied. Used for debugging.
            </summary>
            <value>
            The client context identifier.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.Status">
            <summary>
            Gets the status of the request; possible values are: success, running, errors, completed, stopped, timeout, fatal.
            </summary>
            <value>
            The status of the request.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.Signature">
            <summary>
            Gets the schema of the results. Present only when the query completes successfully.
            </summary>
            <value>
            The signature of the schema of the request.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.Errors">
            <summary>
            Gets a list of 0 or more error objects; if an error occurred during processing of the request, it will be represented by an error object in this list.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.Warnings">
            <summary>
            Gets a list of 0 or more warning objects; if a warning occurred during processing of the request, it will be represented by a warning object in this list.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:Couchbase.Analytics.IAnalyticsResult`1.Metrics">
            <summary>
            Gets an object containing metrics about the request.
            </summary>
            <value>
            The metrics.
            </value>
        </member>
        <member name="T:Couchbase.Authentication.AuthType">
            <summary>
            The type of authentication to use with a given bucket.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.AuthType.None">
            <summary>
            Use no authentication.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.AuthType.Sasl">
            <summary>
            Use Simple Authentication and Security Layer (SASL) authentication.
            </summary>
        </member>
        <member name="T:Couchbase.Authentication.SASL.CramMd5Mechanism">
            <summary>
            Provides support for SASL CRAM-MD5 for password encryption between the client and server.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Couchbase.Authentication.SASL.CramMd5Mechanism.#ctor(Couchbase.IO.IIOService,Couchbase.Core.Transcoders.ITypeTranscoder)" -->
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.#ctor(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Couchbase.Authentication.SASL.CramMd5Mechanism"/> object using a given username (which is a Couchbase Bucket) and password.
            </summary>
            <param name="username">The name of the Bucket you are connecting to.</param>
            <param name="password">The password for the Bucket.</param>
        </member>
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.#ctor(Couchbase.IO.IIOService,System.String,System.String,Couchbase.Core.Transcoders.ITypeTranscoder)">
            <param name="username">The name of the Bucket you are connecting to.</param>
            <param name="password">The password for the Bucket.</param>
            <param name="transcoder"></param>
        </member>
        <member name="P:Couchbase.Authentication.SASL.CramMd5Mechanism.Username">
            <summary>
            The username or Bucket name.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.CramMd5Mechanism.Password">
            <summary>
            The password to authenticate against.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.CramMd5Mechanism.MechanismType">
            <summary>
            The type of SASL mechanism to use: will always be CRAM-MD5.
            </summary>
        </member>
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.Authenticate(Couchbase.IO.IConnection,System.String,System.String)">
            <summary>
            Authenticates a username and password using a specific <see cref="T:Couchbase.IO.IConnection"/> instance. The password will
            be encrypted before being sent to the server.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <param name="username">The username or bucket name to authentic against.</param>
            <param name="password">The password to authenticate against.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.ComputeResponse(System.String)">
            <summary>
            Computes the reply or response to send back to the server that is hashed with the server's challenge.
            </summary>
            <param name="challenge">The key to hash the password against.</param>
            <returns>A reply to send back to the server.</returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.Authenticate(Couchbase.IO.IConnection)">
            <summary>
            Authenticates a username and password.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="P:Couchbase.Authentication.SASL.CramMd5Mechanism.IOService">
            <summary>
            The <see cref="P:Couchbase.Authentication.SASL.CramMd5Mechanism.IOService"/> to use for I/O connectivity with the Couchbase cluster or server.
            </summary>
        </member>
        <member name="T:Couchbase.Authentication.SASL.ISaslMechanism">
            <summary>
            Provides and interface for implementating a SASL authentication mechanism (CRAM MD5 or PLAIN).
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ISaslMechanism.Username">
            <summary>
            The username or Bucket name.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ISaslMechanism.Password">
            <summary>
            The password to authenticate against.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ISaslMechanism.MechanismType">
            <summary>
            The type of SASL mechanism to use: PLAIN or CRAM MD5.
            </summary>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ISaslMechanism.Authenticate(Couchbase.IO.IConnection,System.String,System.String)">
            <summary>
            Authenticates a username and password using a specific <see cref="T:Couchbase.IO.IConnection"/> instance.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <param name="username">The username or bucket name to authentic against.</param>
            <param name="password">The password to authenticate against.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ISaslMechanism.Authenticate(Couchbase.IO.IConnection)">
            <summary>
            Authenticates a username and password.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ISaslMechanism.IOService">
            <summary>
            The I/O service to use <see cref="P:Couchbase.Authentication.SASL.ISaslMechanism.IOService"/>
            </summary>
        </member>
        <member name="T:Couchbase.Authentication.SASL.MechanismType">
            <summary>
            Supported SASL authentication types supported by Couchbase Server.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.SASL.MechanismType.ScramSha512">
            <summary>
            The username and password will be sent encrypted using salted Sha512 and will not be human-readable on the wire.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.SASL.MechanismType.ScramSha256">
            <summary>
            The username and password will be sent encrypted using salted Sha256 and will not be human-readable on the wire.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.SASL.MechanismType.ScramSha1">
            <summary>
            The username and password will be sent encrypted using salted Sha1 and will not be human-readable on the wire.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.SASL.MechanismType.CramMd5">
            <summary>
            The username and password will be sent encrypted using CramMD5 and will not be human-readable on the wire.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.SASL.MechanismType.Plain">
            <summary>
            The username and password will be sent using human-readable plain text.
            </summary>
        </member>
        <member name="T:Couchbase.Authentication.SASL.PlainTextMechanism">
            <summary>
            A PLAIN text implementation of <see cref="T:Couchbase.Authentication.SASL.ISaslMechanism"/> for authenticating connections to Couchbase Buckets. 
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.PlainTextMechanism.IOService">
            <summary>
            The I/O service to use <see cref="P:Couchbase.Authentication.SASL.PlainTextMechanism.IOService"/>
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.PlainTextMechanism.Username">
            <summary>
            The username or Bucket name.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.PlainTextMechanism.Password">
            <summary>
            The password to authenticate against.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.PlainTextMechanism.MechanismType">
            <summary>
            The type of SASL mechanism to use: will always be PLAIN.
            </summary>
        </member>
        <member name="M:Couchbase.Authentication.SASL.PlainTextMechanism.Authenticate(Couchbase.IO.IConnection)">
            <summary>
            Authenticates a username and password.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.PlainTextMechanism.Authenticate(Couchbase.IO.IConnection,System.String,System.String)">
            <summary>
            Authenticates a username and password using a specific <see cref="T:Couchbase.IO.IConnection"/> instance.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <param name="username">The username or bucket name to authentic against.</param>
            <param name="password">The password to authenticate against.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="T:Couchbase.Authentication.SASL.SaslFactory">
            <summary>
            Creates an ISaslMechanism to use for authenticating Couchbase Clients.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.SASL.SaslFactory.DefaultTimeout">
            <summary>
            The default timeout for SASL-related operations.
            </summary>
        </member>
        <member name="T:Couchbase.Authentication.SASL.ScramShaMechanism">
            <summary>
            Provides a SCRAM-SHA1 authentication implementation for Couchbase Server 4.5 and greater.
            </summary>
            <seealso cref="T:Couchbase.Authentication.SASL.ISaslMechanism" />
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.#ctor(Couchbase.IO.IIOService,Couchbase.Core.Transcoders.ITypeTranscoder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Authentication.SASL.ScramShaMechanism"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="transcoder">The transcoder.</param>
            <param name="mechanismType">Type of the mechanism.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.#ctor(Couchbase.IO.IIOService,Couchbase.Core.Transcoders.ITypeTranscoder,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Authentication.SASL.ScramShaMechanism"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="transcoder">The transcoder.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="mechanismType">Type of the mechanism.</param>
            <exception cref="T:System.ArgumentNullException">
            username
            or
            mechanismType
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ScramShaMechanism.Username">
            <summary>
            The username or Bucket name.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ScramShaMechanism.Password">
            <summary>
            The password to authenticate against.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ScramShaMechanism.MechanismType">
            <summary>
            The type of SASL mechanism to use: SCRAM-SHA1.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ScramShaMechanism.IOService">
            <summary>
            The I/O service to use <see cref="P:Couchbase.Authentication.SASL.ScramShaMechanism.IOService" />
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ScramShaMechanism.ClientNonce">
            <summary>
            Gets or sets the client nonce.
            </summary>
            <value>
            The client nonce.
            </value>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.GetSaltedPassword(System.String)">
            <summary>
            Gets the salted password using <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes"/> - SHA1 only!
            </summary>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.DecodeResponse(System.String)">
            <summary>
            Splits the server response into a <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.ComputeHash(System.Byte[],System.String)">
            <summary>
            Generate the HMAC with the given SHA algorithm
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.ComputeDigest(System.Byte[])">
            <summary>
            Computes the digest using SHA1.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.GetClientProof">
            <summary>
            Gets the client proof so that the client and server can "prove" they have the same auth variable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.GetAuthMessage">
            <summary>
            Gets the authentication message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.Authenticate(Couchbase.IO.IConnection)">
            <summary>
            Authenticates a username and password.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection" /> which represents a TCP connection to a Couchbase Server.</param>
            <returns>
            True if succesful.
            </returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.XOR(System.Byte[],System.Byte[])">
            <summary>
            XOR's the specified result.
            </summary>
            <param name="result">The result.</param>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ScramShaMechanism.GenerateClientNonce">
            <summary>
            Generates a random client nonce.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.CasMismatchException">
            <summary>
            Thrown when a CAS operation fails because the document has been modified and that CAS value has changed.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Couchbase.ClusterHelper">
            <summary>
            A helper object for working with a <see cref="T:Couchbase.Cluster"/> instance.
            </summary>
            <remarks>Creates a singleton instance of a <see cref="T:Couchbase.Cluster"/> object.</remarks>
            <remarks>Call <see cref="M:Couchbase.ClusterHelper.Initialize"/> before calling <see cref="M:Couchbase.ClusterHelper.Get"/> to get the instance.</remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.#ctor">
            <summary>
            Ctor for creating Cluster instance.
            </summary>
            <remarks>
            This is the default configuration and will attempt to bootstrap off of localhost.
            </remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.#ctor(Couchbase.Configuration.Client.ClientConfiguration)">
            <summary>
            Ctor for creating Cluster instance.
            </summary>
            <param name="configuration">The ClientCOnfiguration to use for initialization.</param>
        </member>
        <member name="M:Couchbase.ClusterHelper.#ctor(Couchbase.Configuration.Client.ClientConfiguration,Couchbase.Core.IClusterController)">
            <summary>
            Ctor for creating Cluster instance.
            </summary>
            <param name="configuration">The ClientCOnfiguration to use for initialization.</param>
            <param name="clusterManager">The ClusterManager instance use.</param>
            <remarks>
            This overload is primarly added for testing.
            </remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.Get">
            <summary>
            Returns a Singleton instance of the Cluster class.
            </summary>
            <remarks>
            Call one of the Initialize() overloads to create or recreate the Singleton instance.
            However, Initialize() should only be called when the process starts up.
            </remarks>
            <returns>A Singleton instance of the Cluster class.</returns>
            <exception cref="T:Couchbase.Core.InitializationException">Thrown if Initialize is not called before accessing this method.</exception>
        </member>
        <member name="M:Couchbase.ClusterHelper.GetBucket(System.String)">
            <summary>
            Opens or gets an <see cref="T:Couchbase.Core.IBucket"/> instance from the <see cref="T:Couchbase.Core.ICluster"/> that this <see cref="T:Couchbase.ClusterHelper"/> is wrapping.
            The <see cref="T:Couchbase.Core.IBucket"/> will be cached and subsequent requests for a <see cref="T:Couchbase.Core.IBucket"/> of the same name will return the
            cached instance.
            </summary>
            <param name="bucketName">The name of the <see cref="T:Couchbase.Core.IBucket"/> to open or get.</param>
            <returns>An <see cref="T:Couchbase.Core.IBucket"/>instance</returns>
            <remarks>Before calling you must call <see cref="M:Couchbase.ClusterHelper.Initialize"/>.</remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.GetBucket(System.String,System.String)">
            <summary>
            Opens or gets an <see cref="T:Couchbase.Core.IBucket"/> instance from the <see cref="T:Couchbase.Core.ICluster"/> that this <see cref="T:Couchbase.ClusterHelper"/> is wrapping.
            The <see cref="T:Couchbase.Core.IBucket"/> will be cached and subsequent requests for a <see cref="T:Couchbase.Core.IBucket"/> of the same name will return the
            cached instance.
            </summary>
            <param name="bucketName">The name of the <see cref="T:Couchbase.Core.IBucket"/> to open or get.</param>
            <param name="password">Bucket password, or null for unsecured buckets.</param>
            <returns>An <see cref="T:Couchbase.Core.IBucket"/>instance</returns>
            <remarks>Before calling you must call <see cref="M:Couchbase.ClusterHelper.Initialize"/>.</remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.Initialize(System.Func{Couchbase.Cluster})">
            <summary>
            Initializes the Cluster instance using a given factory Func.
            </summary>
            <remarks>
            Call this on the Cluster object before calling Get() to return an instance. Note that
            this method should only be called during application or process startup or in certain
            scenarios where you explicitly want to reinitialize the current cluster instance.
            </remarks>
            <param name="factory">The factory Func that creates the instance.</param>
        </member>
        <member name="M:Couchbase.ClusterHelper.Initialize(Couchbase.Configuration.Client.ClientConfiguration,Couchbase.Core.IClusterController)">
            <summary>
            Initializes a new Cluster instance with a given ClientConfiguration and ClusterManager.
            This overload is primarily provided for testing given that it allows you to set the
            major dependencies of the Cluster class and it's scope is internal.
            </summary>
            <param name="configuration"></param>
            <param name="clusterManager"></param>
        </member>
        <member name="M:Couchbase.ClusterHelper.Initialize(Couchbase.Configuration.Client.ClientConfiguration)">
            <summary>
            Creates a Cluster instance.
            </summary>
            <param name="configuration">
            The ClientConfiguration to use when initialize the internal ClusterManager
            </param>
            <remarks>
            This is an heavy-weight object intended to be long-lived. Create one per process or App.Domain.
            </remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.Initialize">
            <summary>
            Creates a Cluster instance using the default configuration. This is overload is suitable
            for development only as it will use localhost (127.0.0.1) and the default Couchbase REST
            and Memcached ports.
            <see cref="!:http://docs.couchbase.com/couchbase-manual-2.5/cb-install/#network-ports" />
            </summary>
        </member>
        <member name="M:Couchbase.ClusterHelper.Initialize(Couchbase.Configuration.Client.ICouchbaseClientDefinition)">
            <summary>
            Ctor for creating Cluster instance.
            </summary>
            <param name="definition">The configuration definition loaded from a configuration file.</param>
        </member>
        <member name="M:Couchbase.ClusterHelper.Count">
            <summary>
            Returns the number of <see cref="T:Couchbase.Core.IBucket"/> instances internally cached by the <see cref="T:Couchbase.ClusterHelper"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.ClusterHelper.Close">
            <summary>
            Disposes the current <see cref="T:Couchbase.Cluster"/> instance and cleans up resources.
            </summary>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseCollectionBase`1.#ctor(Couchbase.Core.IBucket,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Collections.CouchbaseList`1"/> class.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">bucket</exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseCollectionBase`1.CreateBackingStore">
            <summary>
            Creates the backing store.
            </summary>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseCollectionBase`1.Key">
            <summary>
            Gets the key for this list.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseCollectionBase`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException">array is not large enough.</exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseCollectionBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseCollectionBase`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseCollectionBase`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseCollectionBase`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
        </member>
        <member name="T:Couchbase.Collections.CouchbaseDictionary`2">
            <summary>
            Represents a collection of keys and values stored in Couchbase Server.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:System.Collections.Generic.IDictionary`2" />
        </member>
        <member name="F:Couchbase.Collections.CouchbaseDictionary`2.Bucket">
            <summary>
            The bucket that contains the collection document.
            </summary>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.#ctor(Couchbase.Core.IBucket,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2"/> class.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.CreateBackingStore">
            <summary>
            Creates the backing store.
            </summary>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.GetDictionary">
            <summary>
            Gets the dictionary document.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseDictionary`2.Key">
            <summary>
            Gets the key for this list.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2y" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2y" />.</param>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2y" />.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.
            </returns>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.
            </summary>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" /> is read-only.
            </summary>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" /> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.</param>
            <returns>
            true if the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
            <exception cref="T:System.ArgumentException">Key exists.</exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TValue"/> with the specified key.
            </summary>
            <value>
            The <see cref="!:TValue"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" /> containing the keys of the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.
            </summary>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseDictionary`2.Values">
            <summary>
            Gets an <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" /> containing the values in the <see cref="T:Couchbase.Collections.CouchbaseDictionary`2" />.
            </summary>
        </member>
        <member name="T:Couchbase.Collections.CouchbaseList`1">
            <summary>
            Represents a collection of objects, stored in Couchbase server, that can be individually accessed by index.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.IList`1" />
        </member>
        <member name="M:Couchbase.Collections.CouchbaseList`1.#ctor(Couchbase.Core.IBucket,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Collections.CouchbaseList`1"/> class.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">bucket</exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:Couchbase.Collections.CouchbaseList`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:Couchbase.Collections.CouchbaseList`1" />.</param>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseList`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
            <value>
            The <see cref="!:T"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseList`1.Get(System.Int32)">
            <summary>
            Gets the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Collections.CouchbaseQueue`1">
            <summary>
            Provides a persistent Couchbase data structure with FIFO behavior.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Couchbase.Collections.CouchbaseCollectionBase`1" />
        </member>
        <member name="M:Couchbase.Collections.CouchbaseQueue`1.#ctor(Couchbase.Core.IBucket,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Collections.CouchbaseList`1"/> class.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">bucket</exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the <see cref="!:CouchbaseQueue&lt;T&gt;."/>
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:Couchbase.Collections.CouchbaseQueue`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Couchbase.Collections.CouchbaseQueue`1"/> is empty.</exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:Couchbase.Collections.CouchbaseQueue`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Couchbase.Collections.CouchbaseQueue`1"/>.
            </param>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:Couchbase.Collections.CouchbaseList`1"/> without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Collections.CouchbaseSet`1">
            <summary>
            Provides a Couchbase persisted set.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:System.Collections.Generic.ISet`1" />
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.#ctor(Couchbase.Core.IBucket,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Collections.CouchbaseList`1"/> class.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">bucket</exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.CreateBackingStore">
            <summary>
            Creates the backing store.
            </summary>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.GetSet">
            <summary>
            Gets the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.Upsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Upserts the specified the set.
            </summary>
            <param name="theSet">The set.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseSet`1.Key">
            <summary>
            Gets the key for this list.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains all elements that are present in the current set, in the specified collection, or in both.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all elements in the specified collection from the current set.
            </summary>
            <param name="other">The collection of items to remove from the set.</param>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a set is a subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set is a subset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set is a superset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set is a proper superset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set is a proper (strict) subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set is a proper subset of <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set overlaps with the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set and the specified collection contain the same elements.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
            true if the current set is equal to <paramref name="other" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.System#Collections#Generic#ISet{TValue}#Add(`0)">
            <summary>
            Adds an element to the current set and returns a value to indicate if the element was successfully added.
            </summary>
            <param name="item">The element to add to the set.</param>
            <returns>
            true if the element is added to the set; false if the element is already in the set.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array</exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Couchbase.Collections.CouchbaseSet`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Couchbase.Collections.CouchbaseSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.BucketDefinition">
            <summary>
            POCO configuration definition which defines the settings for a bucket and can be
            used to deserialize a configuration file using JSON, XML, or other configuration formats.
            It is used to construct a <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/> as part of a <see cref="T:Couchbase.Configuration.Client.CouchbaseClientDefinition"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketDefinition.UseEnhancedDurability">
            <summary>
            A value indicating whether to use enhanced durability if the
            Couchbase server version supports it; if it's not supported the client will use
            Observe for Endure operations.
            </summary>
            <value>
            <c>true</c> to use enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketDefinition.UseSsl">
            <summary>
            If true, use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>If the parent <see cref="T:Couchbase.Configuration.Client.ICouchbaseClientDefinition"/>'s UseSSL is false, setting this to true will override that configuration and enable the Bucket to use SSL.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketDefinition.Name">
            <summary>
            The name of the Bucket.
            </summary>
            <remarks>The name can be set within the Couchbase Management Console.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketDefinition.Password">
            <summary>
            The password used to connect to the bucket.
            </summary>
            <remarks>The password can be set within the Couchbase Management Console.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketDefinition.ConnectionPool">
            <summary>
            The connection pool settings, which override the settings in <see cref="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.ConnectionPool"/>.
            </summary>
            <remarks>The default settings are: MinSize=1, MaxSize=2, WaitTimout=2500ms, ShutdownTimeout=10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketDefinition.ObserveInterval">
            <summary>
            The max time an observe operation will take before timing out.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketDefinition.ObserveTimeout">
            <summary>
            The interval between each observe attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketDefinition.OperationLifespan">
            <summary>
            The operation lifespan, maximum time in milliseconds allowed for an operation to run.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.ConnectionPoolDefinition">
            <summary>
            POCO configuration definition which defines the settings for a connection pool and can be
            used to deserialize a configuration file using JSON, XML, or other configuration formats.
            It is used to construct a <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/> as part of a <see cref="T:Couchbase.Configuration.Client.CouchbaseClientDefinition"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.Type">
            <summary>
            The fully qualified type name of the type of the custom <see cref="T:Couchbase.IO.IConnectionPool"/>.  If null, then
            the default connection pool type is used.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.MaxSize">
            <summary>
            The maximum number of TCP connections that the client will allocate for a given Bucket.
            </summary>
            <remarks>The default is two TCP connections per bucket.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.MinSize">
            <summary>
            The minimum number of TCP connections that the client will allocate for a given bucket.
            </summary>
            <remarks>The default is one TCP connection per bucket.</remarks>
            <remarks>The connection pool will add TCP connections until <see cref="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.MaxSize"/> is reached.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.WaitTimeout">
            <summary>
            The amount of time a thread will wait for a <see cref="T:Couchbase.IO.IConnection"/> once the MaxSize of the pool has been reached and no TCP connections are available.
            </summary>
            <remarks>The default is 2500ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.ShutdownTimeout">
            <summary>
            Wait up to the <see cref="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.ShutdownTimeout"/> to send or recieve data before closing the <see cref="T:Couchbase.IO.IConnection"/>.
            </summary>
            <remarks>The default value is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.SendTimeout">
            <summary>
            Cancels a pending operation if it does not complete in the time given and marks the connection as dead.
            </summary>
            <remarks>The default value is 15000ms</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.UseSsl">
            <summary>
            If true, use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>If the parent <see cref="T:Couchbase.Configuration.Client.ICouchbaseClientDefinition"/>'s UseSSL is false, setting this to true will override that configuration and enable the Bucket to use SSL./></remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.BufferSize">
            <summary>
            The size of each buffer to allocate per TCP connection for sending and recieving Memcached operations
            </summary>
            <remarks>The default is 16K</remarks>
            <remarks>The total buffer size is BufferSize * PoolConfiguration.MaxSize</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.ConnectTimeout">
            <summary>
            The amount time allotted for the client to establish a TCP connection with a server before failing
            </summary>
            <remarks>The default value is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.EnableTcpKeepAlives">
            <summary>
            If true, indicates to enable TCP keep alives.
            </summary>
            <value>
            <c>true</c> to enable TCP keep alives; otherwise, <c>false</c>.
            </value>
            <remarks>The default is true; TCP Keep Alives are enabled.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.TcpKeepAliveTime">
            <summary>
            Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.
            </summary>
            <value>
            The TCP keep alive time in milliseconds.
            </value>
            <remarks>The default is 2hrs.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.TcpKeepAliveInterval">
            <summary>
            Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            </summary>
            <value>
            The TCP keep alive interval in milliseconds..
            </value>
            <remarks>The default is 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.MaxCloseAttempts">
            <summary>
            The maximum number of times the client will try to close a <see cref="T:Couchbase.IO.IConnection"/>
            if it's in use and <see cref="T:Couchbase.IO.IConnectionPool"/> has been disposed.
            </summary>
            <value>
            The maximum close attempts.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ConnectionPoolDefinition.CloseAttemptInterval">
            <summary>
            The interval between close attempts on a <see cref="T:Couchbase.IO.IConnection"/>
            if it's in use and <see cref="T:Couchbase.IO.IConnectionPool"/> has been disposed.
            </summary>
            <value>
            The close attempt interval.
            </value>
        </member>
        <member name="T:Couchbase.Configuration.Client.CouchbaseClientDefinition">
            <summary>
            POCO configuration definition which can be used to deserialize a configuration file using JSON, XML, or
            other configuration formats.  This can then be provided as a parameter to construct a <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>
            object.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.UseSsl">
            <summary>
            If true, use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>Set to true to require all buckets to use SSL.</remarks>
            <remarks>Set to false and then set UseSSL at the individual Bucket level to use SSL on specific buckets.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.Servers">
            <summary>
            The Couchbase Server's list of bootstrap URI's. The client will use the list to connect to initially connect to the cluster.
            If null, then localhost will be used.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.Buckets">
            <summary>
            Allows specific configurations of Bucket's to be defined, overriding the parent's settings.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.SslPort">
            <summary>
            Overrides the default and sets the SSL port to use for Key/Value operations using the Binary Memcached protocol.
            </summary>
            <remarks>The default and suggested port for SSL is 11207.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.ApiPort">
            <summary>
            Overrides the default and sets the Views REST API to use a custom port.
            </summary>
            <remarks>The default and suggested port for the Views REST API is 8092.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Views REST API port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.MgmtPort">
            <summary>
            Overrides the default and sets the Couchbase Management REST API to use a custom port.
            </summary>
            <remarks>The default and suggested port for the Views REST API is 8091.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Management REST API port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.DirectPort">
            <summary>
            Overrides the default and sets the direct port to use for Key/Value operations using the Binary Memcached protocol.
            </summary>
            <remarks>The default and suggested direct port is 11210.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom direct port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.HttpsMgmtPort">
            <summary>
            Overrides the default and sets the Couchbase Management REST API to use a custom SSL port.
            </summary>
            <remarks>The default and suggested port for SSL is 18091.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Couchbase Management REST API SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.HttpsApiPort">
            <summary>
            Overrides the default and sets the Couchbase Views REST API to use a custom SSL port.
            </summary>
            <remarks>The default and suggested port for SSL is 18092.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Couchbase Views REST API SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.ObserveInterval">
            <summary>
            The max time an observe operation will take before timing out.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.ObserveTimeout">
            <summary>
            The interval between each observe attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.MaxViewRetries">
            <summary>
            The maximum number of times the client will retry a View operation if it has failed for a retriable reason.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.ViewHardTimeout">
            <summary>
            The maximum number of times the client will retry a View operation if it has failed for a retriable reason.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.HeartbeatConfigInterval">
            <summary>
            The interval for configuration "heartbeat" checks, which check for changes in the configuration that are otherwise undetected by the client.
            </summary>
            <remarks>The default is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.EnableConfigHeartBeat">
            <summary>
            Enables configuration "heartbeat" checks.
            </summary>
            <remarks>The default is "enabled" or true.</remarks>
            <remarks>The interval of the configuration hearbeat check is controlled by the <see cref="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.HeartbeatConfigInterval"/> property.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.ViewRequestTimeout">
            <summary>
            The timeout for each HTTP View request.
            </summary>
            <remarks>The default is 75000ms.</remarks>
            <remarks>The value must be greater than Zero.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.QueryRequestTimeout">
            <summary>
            The timeout for each HTTP N1QL query request.
            </summary>
            <remarks>The default is 75000ms.</remarks>
            <remarks>The value must be greater than Zero.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.EnableQueryTiming">
            <summary>
            If true, writes the elasped client time, elasped cluster time and query strement for a N1QL query request to the log appender. Disabled by default.
            </summary>
            <remarks>When enabled will cause severe performance degradation.</remarks>
            <remarks>Requires a <see cref="!:LogLevel"/> of INFO to be enabled as well.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.SearchRequestTimeout">
            <summary>
            The timeout for each FTS request.
            </summary>
            <remarks>The default is 75000ms.</remarks>
            <remarks>The value must be greater than Zero.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.Expect100Continue">
            <summary>
            A Boolean value that determines whether 100-Continue behavior is used.
            </summary>
            <remarks>The default is false.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.DefaultConnectionLimit">
            <summary>
            The maximum number of concurrent connections allowed by a ServicePoint object used for making View and N1QL requests.
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.defaultconnectionlimit.aspx</remarks>
            <remarks>The default is set to 5 connections.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.MaxServicePointIdleTime">
            <summary>
            The maximum idle time of a ServicePoint object used for making View and N1QL requests.
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.maxservicepointidletime.aspx</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.EnableOperationTiming">
            <summary>
            If true, writes the elasped time for an operation to the log appender. Disabled by default.
            </summary>
            <remarks>When enabled will cause severe performance degradation.</remarks>
            <remarks>Requires a <see cref="!:LogLevel"/> of DEBUG to be enabled as well.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.OperationLifespan">
            <summary>
            An uint value that determines the maximum lifespan of an operation before it is abandonned.
            </summary>
            <remarks>The default is 2500 (2.5 seconds).</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.EnableTcpKeepAlives">
            <summary>
            If true, indicates to enable TCP keep alives.
            </summary>
            <value>
            <c>true</c> to enable TCP keep alives; otherwise, <c>false</c>.
            </value>
            <remarks>The default is true; TCP Keep Alives are enabled.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.TcpKeepAliveTime">
            <summary>
            Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.
            </summary>
            <value>
            The TCP keep alive time in milliseconds.
            </value>
            <remarks>The default is 2hrs.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.TcpKeepAliveInterval">
            <summary>
            Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            </summary>
            <value>
            The TCP keep alive interval in milliseconds..
            </value>
            <remarks>The default is 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.Transcoder">
            <summary>
            The fully qualified type name of the transcoder.  If null the default transcoder is used.
            </summary>
            <value>
            The transcoder.
            </value>
            <remarks>The transcoder must implement <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/>.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.Converter">
            <summary>
            The fully qualified type name of the converter.  If null the default convert is used.
            </summary>
            <value>
            The converter.
            </value>
            <remarks>The converter must implement <see cref="T:Couchbase.IO.Converters.IByteConverter"/>.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.Serializer">
            <summary>
            The fully qualified type name of the serializer.  If null the default serializer is used.
            </summary>
            <value>
            The serializer.
            </value>
            <remarks>The serializer must implement <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/> or <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/>.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.IOService">
            <summary>
            The fully qualified type name of the transporter for IO.  If null the default IO service is used.
            </summary>
            <value>
            The transporter.
            </value>
            <remarks>The IO service must implement <see cref="T:Couchbase.IO.IIOService"/></remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.NodeAvailableCheckInterval">
            <summary>
            If the client detects that a node has gone offline it will check for connectivity at this interval.
            </summary>
            <remarks>The default is 1000ms.</remarks>
            <value>
            The node available check interval.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.ConnectionPool">
            <summary>
            The default connection pool settings.  If null then defaults are used.
            </summary>
            <value>
            The default connection pool settings.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.IOErrorThreshold">
            <summary>
            The count of IO errors within a specific interval defined by the value of <see cref="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.IOErrorCheckInterval" />.
            If the threshold is reached within the interval for a particular node, all keys mapped to that node the SDK will fail
            with a <see cref="T:Couchbase.Core.NodeUnavailableException" /> in the <see cref="!:IOperationResult.Exception"/> field. The node will be flagged as "dead"
            and will try to reconnect, if connectivity is reached, the node will continue to process requests.
            </summary>
            <value>
            The io error count threshold.
            </value>
            <remarks>
            The purpose of this is to distinguish between a remote host being unreachable or temporay network glitch.
            </remarks>
            <remarks>The default is 10 errors.</remarks>
            <remarks>The lower limit is 0; the default will apply if this is exceeded.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.IOErrorCheckInterval">
            <summary>
            The interval that the <see cref="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.IOErrorThreshold"/> will be checked. If the threshold is reached within the interval for a
            particular node, all keys mapped to that node the SDK will fail with a <see cref="T:Couchbase.Core.NodeUnavailableException" /> in the
            <see cref="!:IOperationResult.Exception"/> field. The node will be flagged as "dead" and will try to reconnect, if connectivity
            is reached, the node will continue to process requests.
            </summary>
            <value>
            The io error check interval.
            </value>
            <remarks>The purpose of this is to distinguish between a remote host being unreachable or temporay network glitch.</remarks>
            <remarks>The default is 500ms; use milliseconds to override this: 1000 = 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.QueryFailedThreshold">
            <summary>
            The query failed threshold for a <see cref="T:System.Uri"/> before it is flagged as "un-responsive".
            Once flagged as "un-responsive", no requests will be sent to that node until a server re-config has occurred
            and the <see cref="T:System.Uri"/> is added back into the pool. This is so the client will not send requests to
            a server node which is unresponsive.
            </summary>
            <remarks>The default is 2.</remarks>
            <value>
            The query failed threshold.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.IgnoreRemoteCertificateNameMismatch">
            <summary>
            If TLS/SSL is enabled via <see cref="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.UseSsl"/> setting  this to <c>true</c> will disable hostname validation when authenticating
            connections to Couchbase Server. This is typically done in test or development enviroments where a domain name (FQDN) has not been
            specified for the bootstrap uri's <see cref="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.Servers"/> and the IP address is used to validate the certificate, which will fail with
            a RemoteCertificateNameMismatch error.
            </summary>
            <value>
            <c>true</c> to ignore hostname validation of the certificate if you are using IP's and not a FQDN to bootstrap; otherwise, <c>false</c>.
            </value>
            <remarks>Note: this is a global setting - it applies to all <see cref="T:Couchbase.Core.ICluster"/> and <see cref="T:Couchbase.Core.IBucket"/> references within a process.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.UseInterNetworkV6Addresses">
            <summary>
            Gets or sets a value indicating whether use IP version 6 addresses.
            </summary>
            <value>
            <c>true</c> if <c>true</c> IP version 6 addresses will be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.VBucketRetrySleepTime">
            <summary>
            Gets or sets the VBucket retry sleep time: the default is 100ms.
            </summary>
            <value>
            The VBucket retry sleep time.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.ServerResolverType">
            <summary>
            Gets or sets the server resolver type used to try and find server URIs.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.UseConnectionPooling">
            <summary>
            Indicates if the client should use connection pooling instead of a multiplexing connection. Defaults to false.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.EnableDeadServiceUriPing">
            <summary>
            Indicates if the client should monitor down services using ping requests and reactivate when they
            are back online.  Pings every <see cref="P:Couchbase.Configuration.Client.CouchbaseClientDefinition.NodeAvailableCheckInterval"/>ms.  Defaults to true.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.IBucketDefinition">
            <summary>
            Abstracts a configuration definition which can be used to construct a <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/> as
            part of a <see cref="T:Couchbase.Configuration.Client.ICouchbaseClientDefinition"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.IBucketDefinition.UseEnhancedDurability">
            <summary>
            A value indicating whether to use enhanced durability if the
            Couchbase server version supports it; if it's not supported the client will use
            Observe for Endure operations.
            </summary>
            <value>
            <c>true</c> to use enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.IBucketDefinition.UseSsl">
            <summary>
            If true, use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>If the parent <see cref="T:Couchbase.Configuration.Client.ICouchbaseClientDefinition"/>'s UseSSL is false, setting this to true will override that configuration and enable the Bucket to use SSL.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IBucketDefinition.Name">
            <summary>
            The name of the Bucket.
            </summary>
            <remarks>The name can be set within the Couchbase Management Console.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IBucketDefinition.Password">
            <summary>
            The password used to connect to the bucket.
            </summary>
            <remarks>The password can be set within the Couchbase Management Console.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IBucketDefinition.ConnectionPool">
            <summary>
            The connection pool settings, which override the settings in <see cref="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.ConnectionPool"/>.
            </summary>
            <remarks>The default settings are: MinSize=1, MaxSize=2, WaitTimout=2500ms, ShutdownTimeout=10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IBucketDefinition.ObserveInterval">
            <summary>
            The max time an observe operation will take before timing out.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.IBucketDefinition.ObserveTimeout">
            <summary>
            The interval between each observe attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.IBucketDefinition.OperationLifespan">
            <summary>
            The operation lifespan, maximum time in milliseconds allowed for an operation to run.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.IConnectionPoolDefinition">
            <summary>
            Abstracts a configuration definition which can be used to construct a <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/> as
            part of a <see cref="T:Couchbase.Configuration.Client.ICouchbaseClientDefinition"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.Type">
            <summary>
            The fully qualified type name of the type of the custom <see cref="T:Couchbase.IO.IConnectionPool"/>.  If null, then
            the default connection pool type is used.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.MaxSize">
            <summary>
            The maximum number of TCP connections that the client will allocate for a given Bucket.
            </summary>
            <remarks>The default is two TCP connections per bucket.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.MinSize">
            <summary>
            The minimum number of TCP connections that the client will allocate for a given bucket.
            </summary>
            <remarks>The default is one TCP connection per bucket.</remarks>
            <remarks>The connection pool will add TCP connections until <see cref="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.MaxSize"/> is reached.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.WaitTimeout">
            <summary>
            The amount of time a thread will wait for a <see cref="T:Couchbase.IO.IConnection"/> once the MaxSize of the pool has been reached and no TCP connections are available.
            </summary>
            <remarks>The default is 2500ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.ShutdownTimeout">
            <summary>
            Wait up to the <see cref="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.ShutdownTimeout"/> to send or recieve data before closing the <see cref="T:Couchbase.IO.IConnection"/>.
            </summary>
            <remarks>The default value is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.SendTimeout">
            <summary>
            Cancels a pending operation if it does not complete in the time given and marks the connection as dead.
            </summary>
            <remarks>The default value is 15000ms</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.UseSsl">
            <summary>
            If true, use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>If the parent <see cref="T:Couchbase.Configuration.Client.ICouchbaseClientDefinition"/>'s UseSSL is false, setting this to true will override that configuration and enable the Bucket to use SSL./></remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.BufferSize">
            <summary>
            The size of each buffer to allocate per TCP connection for sending and recieving Memcached operations
            </summary>
            <remarks>The default is 16K</remarks>
            <remarks>The total buffer size is BufferSize * PoolConfiguration.MaxSize</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.ConnectTimeout">
            <summary>
            The amount time allotted for the client to establish a TCP connection with a server before failing
            </summary>
            <remarks>The default value is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.EnableTcpKeepAlives">
            <summary>
            If true, indicates to enable TCP keep alives.
            </summary>
            <value>
            <c>true</c> to enable TCP keep alives; otherwise, <c>false</c>.
            </value>
            <remarks>The default is true; TCP Keep Alives are enabled.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.TcpKeepAliveTime">
            <summary>
            Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.
            </summary>
            <value>
            The TCP keep alive time in milliseconds.
            </value>
            <remarks>The default is 2hrs.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.TcpKeepAliveInterval">
            <summary>
            Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            </summary>
            <value>
            The TCP keep alive interval in milliseconds..
            </value>
            <remarks>The default is 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.MaxCloseAttempts">
            <summary>
            The maximum number of times the client will try to close a <see cref="T:Couchbase.IO.IConnection"/>
            if it's in use and <see cref="T:Couchbase.IO.IConnectionPool"/> has been disposed.
            </summary>
            <value>
            The maximum close attempts.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.IConnectionPoolDefinition.CloseAttemptInterval">
            <summary>
            The interval between close attempts on a <see cref="T:Couchbase.IO.IConnection"/>
            if it's in use and <see cref="T:Couchbase.IO.IConnectionPool"/> has been disposed.
            </summary>
            <value>
            The close attempt interval.
            </value>
        </member>
        <member name="T:Couchbase.Configuration.Client.ICouchbaseClientDefinition">
            <summary>
            Abstracts a configuration definition which can be used to construct a <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.UseSsl">
            <summary>
            If true, use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>Set to true to require all buckets to use SSL.</remarks>
            <remarks>Set to false and then set UseSSL at the individual Bucket level to use SSL on specific buckets.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.Servers">
            <summary>
            The Couchbase Server's list of bootstrap URI's. The client will use the list to connect to initially connect to the cluster.
            If null, then localhost will be used.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.Buckets">
            <summary>
            Allows specific configurations of Bucket's to be defined, overriding the parent's settings.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.SslPort">
            <summary>
            Overrides the default and sets the SSL port to use for Key/Value operations using the Binary Memcached protocol.
            </summary>
            <remarks>The default and suggested port for SSL is 11207.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.ApiPort">
            <summary>
            Overrides the default and sets the Views REST API to use a custom port.
            </summary>
            <remarks>The default and suggested port for the Views REST API is 8092.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Views REST API port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.MgmtPort">
            <summary>
            Overrides the default and sets the Couchbase Management REST API to use a custom port.
            </summary>
            <remarks>The default and suggested port for the Views REST API is 8091.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Management REST API port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.DirectPort">
            <summary>
            Overrides the default and sets the direct port to use for Key/Value operations using the Binary Memcached protocol.
            </summary>
            <remarks>The default and suggested direct port is 11210.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom direct port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.HttpsMgmtPort">
            <summary>
            Overrides the default and sets the Couchbase Management REST API to use a custom SSL port.
            </summary>
            <remarks>The default and suggested port for SSL is 18091.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Couchbase Management REST API SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.HttpsApiPort">
            <summary>
            Overrides the default and sets the Couchbase Views REST API to use a custom SSL port.
            </summary>
            <remarks>The default and suggested port for SSL is 18092.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Couchbase Views REST API SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.ObserveInterval">
            <summary>
            The max time an observe operation will take before timing out.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.ObserveTimeout">
            <summary>
            The interval between each observe attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.MaxViewRetries">
            <summary>
            The maximum number of times the client will retry a View operation if it has failed for a retriable reason.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.ViewHardTimeout">
            <summary>
            The maximum number of times the client will retry a View operation if it has failed for a retriable reason.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.HeartbeatConfigInterval">
            <summary>
            The interval for configuration "heartbeat" checks, which check for changes in the configuration that are otherwise undetected by the client.
            </summary>
            <remarks>The default is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.EnableConfigHeartBeat">
            <summary>
            Enables configuration "heartbeat" checks.
            </summary>
            <remarks>The default is "enabled" or true.</remarks>
            <remarks>The interval of the configuration hearbeat check is controlled by the <see cref="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.HeartbeatConfigInterval"/> property.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.ViewRequestTimeout">
            <summary>
            The timeout for each HTTP View request.
            </summary>
            <remarks>The default is 75000ms.</remarks>
            <remarks>The value must be greater than Zero.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.QueryRequestTimeout">
            <summary>
            The timeout for each HTTP N1QL query request.
            </summary>
            <remarks>The default is 75000ms.</remarks>
            <remarks>The value must be greater than Zero.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.EnableQueryTiming">
            <summary>
            If true, writes the elasped client time, elasped cluster time and query strement for a N1QL query request to the log appender. Disabled by default.
            </summary>
            <remarks>When enabled will cause severe performance degradation.</remarks>
            <remarks>Requires a <see cref="T:Couchbase.Logging.LogLevel"/> of INFO to be enabled as well.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.SearchRequestTimeout">
            <summary>
            The timeout for each FTS request.
            </summary>
            <remarks>The default is 75000ms.</remarks>
            <remarks>The value must be greater than Zero.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.Expect100Continue">
            <summary>
            A Boolean value that determines whether 100-Continue behavior is used.
            </summary>
            <remarks>The default is false.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.DefaultConnectionLimit">
            <summary>
            The maximum number of concurrent connections allowed by a ServicePoint object used for making View and N1QL requests.
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.defaultconnectionlimit.aspx</remarks>
            <remarks>The default is set to 5 connections.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.MaxServicePointIdleTime">
            <summary>
            The maximum idle time of a ServicePoint object used for making View and N1QL requests.
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.maxservicepointidletime.aspx</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.EnableOperationTiming">
            <summary>
            If true, writes the elasped time for an operation to the log appender. Disabled by default.
            </summary>
            <remarks>When enabled will cause severe performance degradation.</remarks>
            <remarks>Requires a <see cref="T:Couchbase.Logging.LogLevel"/> of DEBUG to be enabled as well.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.OperationLifespan">
            <summary>
            An uint value that determines the maximum lifespan of an operation before it is abandonned.
            </summary>
            <remarks>The default is 2500 (2.5 seconds).</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.EnableTcpKeepAlives">
            <summary>
            If true, indicates to enable TCP keep alives.
            </summary>
            <value>
            <c>true</c> to enable TCP keep alives; otherwise, <c>false</c>.
            </value>
            <remarks>The default is true; TCP Keep Alives are enabled.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.TcpKeepAliveTime">
            <summary>
            Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.
            </summary>
            <value>
            The TCP keep alive time in milliseconds.
            </value>
            <remarks>The default is 2hrs.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.TcpKeepAliveInterval">
            <summary>
            Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            </summary>
            <value>
            The TCP keep alive interval in milliseconds..
            </value>
            <remarks>The default is 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.Transcoder">
            <summary>
            The fully qualified type name of the transcoder.  If null the default transcoder is used.
            </summary>
            <value>
            The transcoder.
            </value>
            <remarks>The transcoder must implement <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/>.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.Converter">
            <summary>
            The fully qualified type name of the converter.  If null the default convert is used.
            </summary>
            <value>
            The converter.
            </value>
            <remarks>The converter must implement <see cref="T:Couchbase.IO.Converters.IByteConverter"/>.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.Serializer">
            <summary>
            The fully qualified type name of the serializer.  If null the default serializer is used.
            </summary>
            <value>
            The serializer.
            </value>
            <remarks>The serializer must implement <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/> or <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/>.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.IOService">
            <summary>
            The fully qualified type name of the transporter for IO.  If null the default IO service is used.
            </summary>
            <value>
            The transporter.
            </value>
            <remarks>The IO service must implement <see cref="T:Couchbase.IO.IIOService"/></remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.NodeAvailableCheckInterval">
            <summary>
            If the client detects that a node has gone offline it will check for connectivity at this interval.
            </summary>
            <remarks>The default is 1000ms.</remarks>
            <value>
            The node available check interval.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.ConnectionPool">
            <summary>
            The default connection pool settings.  If null then defaults are used.
            </summary>
            <value>
            The default connection pool settings.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.IOErrorThreshold">
            <summary>
            The count of IO errors within a specific interval defined by the value of <see cref="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.IOErrorCheckInterval" />.
            If the threshold is reached within the interval for a particular node, all keys mapped to that node the SDK will fail
            with a <see cref="T:Couchbase.Core.NodeUnavailableException" /> in the <see cref="!:IOperationResult.Exception"/> field. The node will be flagged as "dead"
            and will try to reconnect, if connectivity is reached, the node will continue to process requests.
            </summary>
            <value>
            The io error count threshold.
            </value>
            <remarks>
            The purpose of this is to distinguish between a remote host being unreachable or temporay network glitch.
            </remarks>
            <remarks>The default is 10 errors.</remarks>
            <remarks>The lower limit is 0; the default will apply if this is exceeded.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.IOErrorCheckInterval">
            <summary>
            The interval that the <see cref="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.IOErrorThreshold"/> will be checked. If the threshold is reached within the interval for a
            particular node, all keys mapped to that node the SDK will fail with a <see cref="T:Couchbase.Core.NodeUnavailableException" /> in the
            <see cref="!:IOperationResult.Exception"/> field. The node will be flagged as "dead" and will try to reconnect, if connectivity
            is reached, the node will continue to process requests.
            </summary>
            <value>
            The io error check interval.
            </value>
            <remarks>The purpose of this is to distinguish between a remote host being unreachable or temporay network glitch.</remarks>
            <remarks>The default is 500ms; use milliseconds to override this: 1000 = 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.QueryFailedThreshold">
            <summary>
            The query failed threshold for a <see cref="T:System.Uri"/> before it is flagged as "un-responsive".
            Once flagged as "un-responsive", no requests will be sent to that node until a server re-config has occurred
            and the <see cref="T:System.Uri"/> is added back into the pool. This is so the client will not send requests to
            a server node which is unresponsive.
            </summary>
            <remarks>The default is 2.</remarks>
            <value>
            The query failed threshold.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.IgnoreRemoteCertificateNameMismatch">
            <summary>
            If TLS/SSL is enabled via <see cref="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.UseSsl"/> setting  this to <c>true</c> will disable hostname validation when authenticating
            connections to Couchbase Server. This is typically done in test or development enviroments where a domain name (FQDN) has not been
            specified for the bootstrap uri's <see cref="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.Servers"/> and the IP address is used to validate the certificate, which will fail with
            a RemoteCertificateNameMismatch error.
            </summary>
            <value>
            <c>true</c> to ignore hostname validation of the certificate if you are using IP's and not a FQDN to bootstrap; otherwise, <c>false</c>.
            </value>
            <remarks>Note: this is a global setting - it applies to all <see cref="T:Couchbase.Core.ICluster"/> and <see cref="T:Couchbase.Core.IBucket"/> references within a process.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.UseInterNetworkV6Addresses">
            <summary>
             Gets or sets a value indicating whether use IP version 6 addresses.
             </summary>
             <value>
             <c>true</c> if <c>true</c> IP version 6 addresses will be used; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.VBucketRetrySleepTime">
            <summary>
            Gets or sets the VBucket retry sleep time: the default is 100ms.
            </summary>
            <value>
            The VBucket retry sleep time.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.ServerResolverType">
            <summary>
            Gets or sets the service resolver type used to try and find server URIs.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.UseConnectionPooling">
            <summary>
            Indicates if the client should use connection pooling instead of a multiplexing connection. Defaults to false.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.EnableDeadServiceUriPing">
            <summary>
            Indicates if the client should monitor down services using ping requests and reactivate when they
            are back online.  Pings every <see cref="P:Couchbase.Configuration.Client.ICouchbaseClientDefinition.NodeAvailableCheckInterval"/>ms.  Defaults to true.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.BucketConfiguration">
            <summary>
            The configuration setttings for a Bucket.
            </summary>
            <remarks>The default setting use 127.0.0.1 and port 11210.</remarks>
        </member>
        <member name="M:Couchbase.Configuration.Client.BucketConfiguration.#ctor">
            <summary>
            Default CTOR for localhost.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.UseEnhancedDurability">
            <summary>
            Gets or sets a value indicating whether to use enhanced durability if the
            Couchbase server version supports it; if it's not supported the client will use
            Observe for Endure operations.
            </summary>
            <value>
            <c>true</c> to use enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.UseSsl">
            <summary>
            Set to true to enable Secure Socket Layer (SSL) encryption of all traffic between the client and the server.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.Servers">
            <summary>
            A list of IP's to bootstrap off of.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.Port">
            <summary>
            The Memcached port to use.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.BucketName">
            <summary>
            The name of the Bucket to connect to.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.Password">
            <summary>
            The password to use if it's a SASL authenticated Bucket.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.Username">
            <summary>
            The username for connecting to a Bucket.
            </summary>
            <remarks>The <see cref="P:Couchbase.Configuration.Client.BucketConfiguration.BucketName"/> is used for as the username for connecting to Buckets.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.PoolConfiguration">
            <summary>
            The <see cref="P:Couchbase.Configuration.Client.BucketConfiguration.PoolConfiguration"/> used to create the <see cref="T:Couchbase.IO.IConnectionPool"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.ObserveTimeout">
            <summary>
            Gets or Sets the max time an observe operation will take before timing out.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.ObserveInterval">
            <summary>
            Gets or Sets the interval between each observe attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.DefaultOperationLifespan">
            <summary>
            The maximum time allowed for an operation to live, in milliseconds, for this specific bucket.
            <remarks>Default value is 2500 (2.5 seconds)</remarks>
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Client.BucketConfiguration.UpdateOperationLifespanDefault(System.UInt32)">
            <summary>
            Conditionally change the DefaultOperationLifespan property value, if and only if it wasn't already changed
            from its default value.
            <remarks>Calling this method doesn't count as a changed from default value. That is, calling it twice will return true both times.</remarks>
            </summary>
            <param name="newDefault">The new value to be affected to DefaultOperationLifespan if it hasn't been changed since construction.</param>
            <returns>true if the value was applied, false otherwise (denoting that a custom value had already been applied)</returns>
        </member>
        <member name="M:Couchbase.Configuration.Client.BucketConfiguration.GetEndPoint">
            <summary>
            Gets a random <see cref="T:System.Net.IPEndPoint"/> from the Servers list.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Configuration.Client.ClientConfiguration">
            <summary>
            Represents the configuration of a <see cref="T:Couchbase.Cluster"/> object. The <see cref="T:Couchbase.Cluster"/> object
            will use this class to construct it's internals.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Client.ClientConfiguration.#ctor(Couchbase.Configuration.Client.ICouchbaseClientDefinition)">
            <summary>
            For synchronization with App.config or Web.configs.
            </summary>
            <param name="definition"></param>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.UseConnectionPooling">
            <summary>
            Indicates if the client should use connection pooling instead of a multiplexing connection. Defaults to false.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.EnableDeadServiceUriPing">
            <summary>
            Indicates if the client should monitor down services using ping requests and reactivate when they
            are back online.  Pings every <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.NodeAvailableCheckInterval"/>ms.  Defaults to true.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.VBucketRetrySleepTime">
            <summary>
            Gets or sets the VBucket retry sleep time: the default is 100ms.
            </summary>
            <value>
            The VBucket retry sleep time.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.QueryFailedThreshold">
            <summary>
            Gets or sets the query failed threshold for a <see cref="T:System.Uri"/> before it is flagged as "un-responsive".
            Once flagged as "un-responsive", no requests will be sent to that node until a server re-config has occurred
            and the <see cref="T:System.Uri"/> is added back into the pool. This is so the client will not send requests to
            a server node which is unresponsive.
            </summary>
            <remarks>The default is 2.</remarks>
            <value>
            The query failed threshold.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.QueryRequestTimeout">
            <summary>
            Gets or sets the timeout for a N1QL query request; this correlates to the client-side timeout.
            Server-side timeouts are configured per request using the <see cref="!:QueryRequest.Timeout"/> method.
            </summary>
            <value>
            The query request timeout.
            </value>
            <remarks>The value must be positive.</remarks>
            <remarks>The default client-side value is 75 seconds.</remarks>
            <remarks>The default server-side timeout is zero; this is an infinite timeout.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.EnableQueryTiming">
            <summary>
            Gets or sets whether the elasped client time, elasped cluster time and query statement for a N1QL query requst are written to the log appender. Disabled by default.
            </summary>
            <remarks>When enabled will cause severe performance degradation.</remarks>
            <remarks>Requires a <see cref="T:Couchbase.Logging.LogLevel"/>of INFO to be enabled as well.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.SearchRequestTimeout">
            <summary>
            Gets or sets the search request timeout.
            </summary>
            <value>
            The search request timeout.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.NodeAvailableCheckInterval">
            <summary>
            If the client detects that a node has gone offline it will check for connectivity at this interval.
            </summary>
            <remarks>The default is 1000ms.</remarks>
            <value>
            The node available check interval.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.EnableTcpKeepAlives">
            <summary>
            Gets or sets a value indicating whether enable TCP keep alives.
            </summary>
            <value>
            <c>true</c> to enable TCP keep alives; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.TcpKeepAliveTime">
            <summary>
            Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.
            </summary>
            <value>
            The TCP keep alive time in milliseconds.
            </value>
            <remarks>The default is 2hrs.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.TcpKeepAliveInterval">
            <summary>
            Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            </summary>
            <value>
            The TCP keep alive interval in milliseconds..
            </value>
            <remarks>The default is 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.IgnoreRemoteCertificateNameMismatch">
            <summary>
            If TLS/SSL is enabled via <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.UseSsl"/> setting  this to <c>true</c> will disable hostname validation when authenticating
            connections to Couchbase Server. This is typically done in test or development enviroments where a domain name (FQDN) has not been
            specified for the bootstrap uri's <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.Servers"/> and the IP address is used to validate the certificate, which will fail with
            a RemoteCertificateNameMismatch error.
            </summary>
            <value>
            <c>true</c> to ignore hostname validation of the certificate if you are using IP's and not a FQDN to bootstrap; otherwise, <c>false</c>.
            </value>
            <remarks>Note: this is a global setting - it applies to all <see cref="!:ICluster"/> and <see cref="!:IBucket"/> references within a process.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.UseInterNetworkV6Addresses">
            <summary>
            Gets or sets a value indicating whether use IP version 6 addresses.
            </summary>
            <value>
            <c>true</c> if <c>true</c> IP version 6 addresses will be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorThreshold">
            <summary>
            Gets or sets the count of IO errors within a specific interval defined by the value of <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorCheckInterval" />.
            If the threshold is reached within the interval for a particular node, all keys mapped to that node the SDK will fail
            with a <see cref="!:NodeUnavailableException" /> in the <see cref="!:IOperationResult.Exception"/> field.. The node will be flagged as "dead"
            and will try to reconnect, if connectivity is reached, the node will continue to process requests.
            </summary>
            <value>
            The io error count threshold.
            </value>
            <remarks>
            The purpose of this is to distinguish between a remote host being unreachable or temporay network glitch.
            </remarks>
            <remarks>The default is 10 errors.</remarks>
            <remarks>The lower limit is 0; the default will apply if this is exceeded.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorCheckInterval">
            <summary>
            Gets or sets the interval that the <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorThreshold"/> will be checked. If the threshold is reached
            within the interval for a particular node, all keys mapped to that node the SDK will fail with a <see cref="!:NodeUnavailableException" />
            in the <see cref="!:IOperationResult.Exception"/> field. The node will be flagged as "dead" and will try to reconnect,
            if connectivity is reached, the node will continue to process requests.
            </summary>
            <value>
            The io error check interval.
            </value>
            <remarks>The purpose of this is to distinguish between a remote host being unreachable or temporay network glitch.</remarks>
            <remarks>The default is 500ms; use milliseconds to override this: 1000 = 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Transcoder">
            <summary>
            Gets or sets the transcoder factory.
            </summary>
            <value>
            The transcoder factory.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>
            The converter.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Serializer">
            <summary>
            Gets or sets the serializer.
            </summary>
            <value>
            The serializer.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Transporter">
            <summary>
            Gets or sets the transporter for IO.
            </summary>
            <value>
            The transporter.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Timer">
            <summary>
            A factory for creating <see cref="T:Couchbase.Core.Diagnostics.IOperationTimer"/>'s.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.IOServiceCreator">
            <summary>
            A factory for creating the <see cref="T:Couchbase.IO.IIOService"/> for this instance.
            </summary>
            <value>
            The io service.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ConnectionPoolCreator">
            <summary>
            Gets or sets the connection pool creator.
            </summary>
            <value>
            The connection pool creator.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.CreateSaslMechanism">
            <summary>
            Gets or sets the create sasl mechanism.
            </summary>
            <value>
            The create sasl mechanism.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.UseSsl">
            <summary>
            Set to true to use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>Set to true to require all buckets to use SSL.</remarks>
            <remarks>Set to false and then set UseSSL at the individual Bucket level to use SSL on specific buckets.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.SslPort">
            <summary>
            Overrides the default and sets the SSL port to use for Key/Value operations using the Binary Memcached protocol.
            </summary>
            <remarks>The default and suggested port for SSL is 11207.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ApiPort">
            <summary>
            Overrides the default and sets the Views REST API to use a custom port.
            </summary>
            <remarks>The default and suggested port for the Views REST API is 8092.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Views REST API port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.MgmtPort">
            <summary>
            Overrides the default and sets the Couchbase Management REST API to use a custom port.
            </summary>
            <remarks>The default and suggested port for the Views REST API is 8091.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Management REST API port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.DirectPort">
            <summary>
            Overrides the default and sets the direct port to use for Key/Value operations using the Binary Memcached protocol.
            </summary>
            <remarks>The default and suggested direct port is 11210.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom direct port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.HttpsMgmtPort">
            <summary>
            Overrides the default and sets the Couchbase Management REST API to use a custom SSL port.
            </summary>
            <remarks>The default and suggested port for SSL is 18091.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Couchbase Management REST API SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.HttpsApiPort">
            <summary>
            Overrides the default and sets the Couchbase Views REST API to use a custom SSL port.
            </summary>
            <remarks>The default and suggested port for SSL is 18092.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Couchbase Views REST API SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ObserveTimeout">
            <summary>
            Gets or Sets the max time an observe operation will take before timing out.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ObserveInterval">
            <summary>
            Gets or Sets the interval between each observe attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.MaxViewRetries">
            <summary>
            The upper limit for the number of times a View request that has failed will be retried.
            </summary>
            <remarks>Note that not all failures are re-tried</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ViewHardTimeout">
            <summary>
            The maximum amount of time that a View will request take before timing out. Note this includes time for retries, etc.
            </summary>
            <remarks>Default is 30000ms</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Servers">
            <summary>
            A list of hosts used to bootstrap from.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.SerializationSettings">
            <summary>
            The incoming serializer settings for the JSON serializer.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.DeserializationSettings">
            <summary>
            The outgoing serializer settings for the JSON serializer.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.BucketConfigs">
            <summary>
            A map of <see cref="T:Couchbase.Configuration.Client.BucketConfiguration"/>s and their names.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.PoolConfiguration">
            <summary>
            The configuration used for creating the <see cref="T:Couchbase.IO.IConnectionPool"/> for each <see cref="!:IBucket"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.HeartbeatConfigInterval">
            <summary>
            Sets the interval for configuration "heartbeat" checks, which check for changes in the configuration that are otherwise undetected by the client.
            </summary>
            <remarks>The default is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ViewRequestTimeout">
            <summary>
            Sets the timeout for each HTTP View request.
            </summary>
            <remarks>The default is 75000ms.</remarks>
            <remarks>The value must be greater than Zero.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.DefaultConnectionLimit">
            <remarks>On Linux this setting is only supported for libcurl v7.30.0 and greater. See https://issues.couchbase.com/browse/NCBC-1295 for details.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.MaxServicePointIdleTime">
            <summary>
            Gets or sets the maximum idle time of a ServicePoint object used for making View and N1QL requests.
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.maxservicepointidletime.aspx</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Expect100Continue">
            <summary>
            Gets or sets a Boolean value that determines whether 100-Continue behavior is used.
            </summary>
            <remarks>The default is false, which overrides the <see cref="!:ServicePointManager"/>'s default of true.</remarks>
            <remarks>http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.expect100continue%28v=vs.110%29.aspx</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.EnableConfigHeartBeat">
            <summary>
            Enables configuration "heartbeat" checks.
            </summary>
            <remarks>The default is "enabled" or true.</remarks>
            <remarks>The interval of the configuration hearbeat check is controlled by the <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.HeartbeatConfigInterval"/> property.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.EnableOperationTiming">
            <summary>
            Writes the elasped time for an operation to the log appender Disabled by default.
            </summary>
            <remarks>When enabled will cause severe performance degradation.</remarks>
            <remarks>Requires a <see cref="T:Couchbase.Logging.LogLevel"/>of DEBUG to be enabled as well.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.BufferSize">
            <summary>
            The size of each buffer to allocate per TCP connection for sending and recieving Memcached operations
            </summary>
            <remarks>The default is 16K</remarks>
            <remarks>The total buffer size is BufferSize * PoolConfiguration.MaxSize</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.DefaultOperationLifespan">
            <summary>
            The maximum time allowed for an operation to live, in milliseconds. This servers as the default
            for buckets where the lifespan is not explicitely specified.
            </summary>
            <remarks>The default is 2500 (2.5 seconds)</remarks>
            <remarks>When getting the value, prefer looking in <see cref="P:Couchbase.Configuration.Client.BucketConfiguration.DefaultOperationLifespan"/>
            since it will inherit and possibly overwrite this value.</remarks>
        </member>
        <member name="M:Couchbase.Configuration.Client.ClientConfiguration.UpdateBootstrapList(Couchbase.Configuration.Server.Serialization.IBucketConfig)">
            <summary>
            Updates the internal bootstrap url with the new list from a server configuration.
            </summary>
            <param name="bucketConfig">A new server configuration</param>
        </member>
        <member name="M:Couchbase.Configuration.Client.ClientConfiguration.HasServersChanged">
            <summary>
            Checks for mutations of the Server collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.AnalyticsRequestTimeout">
            <summary>
            Gets the analytics request timeout. Default is 75 seconds.
            </summary>
            <value>
            The analytics request timeout.
            </value>
            <remarks>Hardcoded for now - will implement config at a later time</remarks>
        </member>
        <member name="T:Couchbase.Configuration.Client.PoolConfiguration">
            <summary>
            Represents a object used to construct the internal <see cref="T:Couchbase.IO.IConnectionPool"/> object for a <see cref="T:Couchbase.Core.IBucket"/> instance.
            </summary>
            <remarks>Default configuration:
            MaxSize = 2;
            MinSize = 1;
            WaitTimeout = 2500;
            ReceiveTimeout = 2500;
            ShutdownTimeout = 10000;
            OperationTimeout = 2500;
            MaxConnectionAcquireCount = 5;
            SendTimeout = 15000;
            ConnectTimeout = 10000;
            </remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.UseEnhancedDurability">
            <summary>
            Gets or sets a value indicating whether to use enhanced durability if the
            Couchbase server version supports it; if it's not supported the client will use
            Observe for Endure operations.
            </summary>
            <value>
            <c>true</c> to use enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.EnableTcpKeepAlives">
            <summary>
            Gets or sets a value indicating whether enable TCP keep alives.
            </summary>
            <value>
            <c>true</c> to enable TCP keep alives; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.TcpKeepAliveTime">
            <summary>
            Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.
            </summary>
            <value>
            The TCP keep alive time in milliseconds.
            </value>
            <remarks>The default is 2hrs.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.TcpKeepAliveInterval">
            <summary>
            Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            </summary>
            <value>
            The TCP keep alive interval in milliseconds..
            </value>
            <remarks>The default is 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.MaxSize">
            <summary>
            The maximum number of connections to create.
            </summary>
            <remarks>The default is 2.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.MinSize">
            <summary>
            The minimum number of connection to create.
            </summary>
            <remarks>The default is 1.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.WaitTimeout">
            <summary>
            The amount of time a thread will wait for a <see cref="T:Couchbase.IO.IConnection"/> once the MaxSize of the pool has been reached.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.MaxAcquireIterationCount">
            <summary>
            The maximum number of iterations that a thread will wait for an available connection before throwing a <see cref="T:Couchbase.IO.ConnectionUnavailableException"/>.
            </summary>
            <remarks>The default is 5 iterations.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.ShutdownTimeout">
            <summary>
            Wait up to the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.ShutdownTimeout"/> to send or recieve data before closing the <see cref="T:Couchbase.IO.IConnection"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.OperationTimeout">
            <summary>
            The amount of time to wait for a pending operation to complete before timing out.
            </summary>
            <remarks>Default is 2500ms</remarks>
            <remarks>Operations exceeding this timeout will return the following message: "Timed out"</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.UseSsl">
            <summary>
            Set to true to enable Secure Socket Layer (SSL) encryption of all traffic between the client and the server.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.SendTimeout">
            <summary>
            Cancels a pending operation if it does not complete in the time given and marks the connection as dead.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.ConnectTimeout">
            <summary>
            The amount time allotted for the client to establish a TCP connection with a server before failing
            </summary>
            <remarks>The default is 10000ms</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.MaxCloseAttempts">
            <summary>
            Gets or sets the maximum number of times the client will try to close a <see cref="T:Couchbase.IO.IConnection"/>
            if it's in use and <see cref="T:Couchbase.IO.IConnectionPool"/> has been disposed.
            </summary>
            <value>
            The maximum close attempts.
            </value>
            <remarks>The default is 5 attempts.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.CloseAttemptInterval">
            <summary>
            Gets or sets the interval between close attempts on a <see cref="T:Couchbase.IO.IConnection"/>
            if it's in use and <see cref="T:Couchbase.IO.IConnectionPool"/> has been disposed.
            </summary>
            <value>
            The close attempt interval.
            </value>
            <remarks>The default is 100ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.ClientConfiguration">
            <summary>
            References the top level <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.ClientConfiguration"/> object.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.EnableOperationTiming">
            <summary>
            Writes the elasped time for an operation to the log appender Disabled by default.
            </summary>
            <remarks>When enabled will cause severe performance degradation.</remarks>
            <remarks>Requires a <see cref="!:LogLevel"/>of DEBUG to be enabled as well.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.BufferSize">
            <summary>
            The size of each buffer to allocate per TCP connection for sending and recieving Memcached operations
            </summary>
            <remarks>The default is 16K</remarks>
            <remarks>The total buffer size is BufferSize * PoolConfiguration.MaxSize</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.Uri">
            <summary>
            The Uri for the specific node instance. Will only be non-null if <see cref="M:Couchbase.Configuration.Client.PoolConfiguration.Clone(System.Uri)"/> is called and a Uri is passed in.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Client.PoolConfiguration.Clone(System.Uri)">
            <summary>
            Clones the current <see cref="T:Couchbase.Configuration.Client.PoolConfiguration"/> for a specific node. The <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.Uri"/> should match the node.
            </summary>
            <param name="uri">The specific node that this <see cref="T:Couchbase.Configuration.Client.PoolConfiguration"/> is targeting.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Configuration.Client.DefaultServerResolver">
             <summary>
             This class represents a default server resolver that returns a seed server of localhost
             and port 8091.  In a production environment where configurations are managed outside
             of the client's configuration file (app.conf), a real implementation of this class
             will need to be created and a reference to that class placed in the client configuration.
            
             For example, if you wanted to load your server configuration from SRV records, you might
             create records that look like this in your DNS:
            
             <pre>
             _cbmcd._tcp.example.com.  0  IN  SRV  20  0  11210 node2.example.com.
             _cbmcd._tcp.example.com.  0  IN  SRV  10  0  11210 node1.example.com.
             _cbmcd._tcp.example.com.  0  IN  SRV  30  0  11210 node3.example.com.
            
             _cbhttp._tcp.example.com.  0  IN  SRV  20  0  8091 node2.example.com.
             _cbhttp._tcp.example.com.  0  IN  SRV  10  0  8091 node1.example.com.
             _cbhttp._tcp.example.com.  0  IN  SRV  30  0  8091 node3.example.com.
             </pre>
            
             In your application configuration file, you would specify the ServerResolver element with
             type property set to your custom class. The real implementation class would be able to query
             and produce a list of URIs for the Couchbase client to use.
             </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.IServerResolver">
            <summary>
            Abstracts the implementation of retriveing a list of URIs used during the client
            bootstrap process by <see cref="T:Couchbase.Configuration.Client.ServerResolverUtil"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.ServerResolverUtil">
            <summary>
            This utility class will try to retrive a list of Server URIs to bootstrap the client with
            using an implementation of <see cref="T:Couchbase.Configuration.Client.IServerResolver"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.CouchbaseBootstrapException">
            <summary>
            Thrown when the client cannot complete the bootstrapping phase of initialization.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.DefaultPorts">
            <summary>
            Represents the "default" ports that come pre-configured with Couchbase Server.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.MgmtApi">
            <summary>
            The Managment REST API port.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.CApi">
            <summary>
            The Views REST API port.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.Direct">
            <summary>
            The port used for Binary Memcached TCP operations.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.Proxy">
            <summary>
            Not used by the .NET client - reserved for Moxi.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.SslDirect">
            <summary>
            The SSL port used for Binary Memcached TCP operations.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.HttpsCApi">
            <summary>
            The SSL port used by View REST API.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.HttpsMgmt">
            <summary>
            The SSL port used by the Managment REST API's.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.ConfigProviderBase.GetOrCreateConfiguration(System.String)">
            <summary>
            Gets an <see cref="T:Couchbase.Configuration.Client.BucketConfiguration"/> from the <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>. If one doesn't exist
            for a given bucket, a new one will be created and added to the configuration.
            </summary>
            <param name="bucketName">The <see cref="P:Couchbase.Core.IBucket.Name"/> to use for the lookup.</param>
            <returns>An <see cref="T:Couchbase.Configuration.Client.BucketConfiguration"/> instance.</returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.ConfigProviderBase.GetCached(System.String)">
            <summary>
            Gets the currently cached (and used) configuration.
            </summary>
            <param name="bucketName">The name of the Couchbase Bucket used to lookup the <see cref="T:Couchbase.Configuration.IConfigInfo"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.ConfigProviderBase.GetConfig(System.String)">
            <summary>
            Starts the HTTP streaming connection to the Couchbase Server and gets the latest configuration for a non-SASL authenticated Bucket.
            </summary>
            <param name="bucketName">The name of the Couchbase Bucket.</param>
            <returns>A <see cref="T:Couchbase.Configuration.IConfigInfo"/> object representing the latest configuration.</returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.ConfigProviderBase.ObserverExists(Couchbase.Configuration.Server.Providers.IConfigObserver)">
            <summary>
            Checks to see if an observer has been registered.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.IConfigObserver">
            <summary>
            An interface for implementing classes which observe changes from configuration providers.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Server.Providers.IConfigObserver.Name">
            <summary>
            The name of the observer - the Bucket's name.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.IConfigObserver.NotifyConfigChanged(Couchbase.Configuration.IConfigInfo)">
            <summary>
            Notifies the observer that a configuration change has occured and it's internal state must be updated.
            </summary>
            <param name="configInfo"></param>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.IConfigProvider">
            <summary>
            A provider for <see cref="T:Couchbase.Configuration.IConfigInfo"/> objects which represent Couchbase Server configurations: mappings of VBuckets and keys to cluster nodes.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.Streaming.ConfigThreadState">
            <summary>
            Represents a long-lived comet style connection to an HTTP service.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.ConfigThreadState.GetSurrogateHost(System.Uri)">
            <summary>
                This is to support $HOST variable in the URI in _some_ cases
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.ConfigThreadState.ListenForConfigChanges">
            <summary>
            Starts the streaming connection to couchbase server that will
            listen for configuration changes and then update the client as needed.
            </summary>
            <remarks>
            Should not be used when a <see cref="T:System.Threading.SynchronizationContext" /> is present on the thread, as this
            could cause deadlocks.  This method is currently only used from within a dedicated thread,
            created by <see cref="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.RegisterObserver(Couchbase.Configuration.Server.Providers.IConfigObserver)"/>, so it is safe because there will not
            be a SynchronizationContext present on the thread.
            </remarks>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.Streaming.HttpServerConfig">
            <summary>
            A configuration info class for supporting HTTP streaming provider.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider">
            <summary>
            A comet style streaming HTTP connection provider for Couchbase configurations.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.GetConfig(System.String,System.String)">
            <summary>
            Starts the HTTP streaming connection to the Couchbase Server and gets the latest configuration for a SASL authenticated Bucket.
            </summary>
            <param name="bucketName">The name of the Couchbase Bucket.</param>
            <param name="password">The SASL password used to connect to the Bucket.</param>
            <returns>A <see cref="T:Couchbase.Configuration.IConfigInfo"/> object representing the latest configuration.</returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.RegisterObserver(Couchbase.Configuration.Server.Providers.IConfigObserver)">
            <summary>
            Registers an <see cref="T:Couchbase.Configuration.Server.Providers.IConfigObserver"/> object, which is notified when a configuration changes.
            </summary>
            <param name="observer">The <see cref="T:Couchbase.Configuration.Server.Providers.IConfigObserver"/> that will be notified when a configuration
            update occurs. These are Memcached and Couchbase Buckets.</param>
            <returns>True if the observer was registered without failure.</returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.ConfigChangedHandler(Couchbase.Configuration.Server.Serialization.IBucketConfig)">
            <summary>
            Raised when a configuration update has occurred. All observers will be notified of the changes.
            </summary>
            <param name="bucketConfig">The new configuration.</param>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.CreateConfigInfo(Couchbase.Configuration.Server.Serialization.IBucketConfig)">
            <summary>
            Creates a Bucket specific <see cref="T:Couchbase.Configuration.IConfigInfo"/> instance.
            </summary>
            <param name="bucketConfig">The <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/> to use for client configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.StartProvider(System.String,System.String)">
            <summary>
            Starts the HTTP streaming connection.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.UnRegisterObserver(Couchbase.Configuration.Server.Providers.IConfigObserver)">
            <summary>
            Un-registers an observer, which is either a Couchbase or Memcached Bucket, from the provider.
            </summary>
            <param name="observer"></param>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.IConfigPublisher">
            <summary>
            Represents an interface for publishing configuration changes in a push manner.
            <remarks>Used for CCCP based configuration updates.</remarks>
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Server.Serialization.NodeExt">
            <summary>
            Represents the nodesExt element of a server configuration; the
            extended set of services that a node is configured to have (data, query, index, etc)
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Server.Serialization.NodeExt.Services">
            <summary>
            Gets or sets the services that this node has available.
            </summary>
            <value>
            The services.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Server.Serialization.NodeExt.Hostname">
            <summary>
            Gets or sets the hostname or IP address of this node.
            </summary>
            <value>
            The hostname.
            </value>
        </member>
        <member name="T:Couchbase.Configuration.CouchbaseConfigContext">
            <summary>
            Represents a configuration context for a Couchbase Bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.CouchbaseConfigContext.LoadConfig(Couchbase.Configuration.Server.Serialization.IBucketConfig,System.Boolean)">
            <summary>
            Loads the most updated configuration creating any resources as needed.
            </summary>
            <param name="bucketConfig">The latest <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            that will drive the recreation if the configuration context.</param>
            <param name="force">True to force the reconfiguration.</param>
        </member>
        <member name="M:Couchbase.Configuration.CouchbaseConfigContext.LoadConfig(Couchbase.IO.IIOService)">
            <exception cref="T:Couchbase.Configuration.CouchbaseBootstrapException">Condition.</exception>
        </member>
        <member name="M:Couchbase.Configuration.CouchbaseConfigContext.LoadConfig">
            <exception cref="T:Couchbase.Configuration.CouchbaseBootstrapException">Condition.</exception>
        </member>
        <member name="M:Couchbase.Configuration.CouchbaseConfigContext.UpdateServices(System.Collections.Generic.Dictionary{System.Net.IPAddress,Couchbase.Core.IServer})">
            <summary>
            Checks the server's list and identfies what services the node supports. Separate
            lists are created for each service type.
            </summary>
            <param name="servers">The servers.</param>
            <exception cref="T:Couchbase.Configuration.CouchbaseBootstrapException"></exception>
        </member>
        <member name="P:Couchbase.Configuration.CouchbaseConfigContext.QueryCache">
            <summary>
            Gets the query cache for the current instance. Each <see cref="T:Couchbase.Core.IBucket" /> implementation instance has it's own for caching query plans.
            </summary>
            <value>
            The query cache.
            </value>
        </member>
        <member name="T:Couchbase.Configuration.ConfigContextBase">
            <summary>
            Base class for configuration contexts. The configuration context is a class which maintains the internal
            state of the cluster and communicats with configuration providers to ensure that the state is up-to-date.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether the server supports enhanced durability.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.SupportsSubdocXAttributes">
            <summary>
            Gets a value indicating whether Subdocument XAttributes are supported.
            </summary>
            <value>
            <c>true</c> if the server supports Subdocument XAttributes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.CreationTime">
            <summary>
            The time at which this configuration context has been created.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.BucketConfig">
            <summary>
            The client configuration for a bucket.
            <remarks> See <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/> for details.</remarks>
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.BucketName">
            <summary>
            The name of the Bucket that this configuration represents.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.ClientConfig">
            <summary>
            The client configuration.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.BucketType">
            <summary>
            The <see cref="T:Couchbase.Core.Buckets.BucketTypeEnum"/> that this configuration context is for.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.NodeLocator">
            <summary>
            The <see cref="T:Couchbase.Core.Buckets.NodeLocatorEnum"/> that this configuration is using.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.LoadConfig(Couchbase.Configuration.Server.Serialization.IBucketConfig,System.Boolean)">
            <summary>
            Loads the most updated configuration creating any resources as needed.
            </summary>
            <param name="bucketConfig">The latest <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            that will drive the recreation if the configuration context.</param>
            <param name="force">True to force the reconfiguration.</param>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.LoadConfig">
            <summary>
            Loads the most updated configuration creating any resources as needed. The <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            used by this method is passed into the CTOR.
            </summary>
            <remarks>This method should be called immediately after creation.</remarks>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetKeyMapper">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IKeyMapper"/> instance associated with this <see cref="T:Couchbase.Configuration.IConfigInfo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetServer">
            <summary>
            Gets a random server instance from the underlying <see cref="T:Couchbase.Core.IServer"/> collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.Dispose">
            <summary>
            Reclaims all resources and suppresses finalization.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.Dispose(System.Boolean)">
            <summary>
            Reclams all resources and optionally suppresses finalization.
            </summary>
            <param name="disposing">True to suppress finalization.</param>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetDataNode">
            <summary>
            Gets a data node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetQueryNode">
            <summary>
            Gets a query node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetIndexNode">
            <summary>
            Gets a index node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetViewNode">
            <summary>
            Gets a view node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetSearchNode">
            <summary>
            Gets a search node from the servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetAnalyticsNode">
            <summary>
            Gets an analytics node from the server collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>
            An <see cref="T:System.Int32" /> representing the size of the cache before it was cleared.
            </returns>
        </member>
        <member name="T:Couchbase.Configuration.ConfigException">
            <summary>
            Generic exception thrown when a configuration cannot be bootstrapped or is the wrong type for the given bucket.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.ConfigObserverNotFoundException">
            <summary>
            Thrown when an observer for a given configuration cannot be found.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.ConfigNotFoundException">
            <summary>
            Thrown when a configuration does not exist within the provider.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.MemcachedConfigContext">
            <summary>
            Represents a configuration context for a Memcached Bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.MemcachedConfigContext.GetEndPoint(Couchbase.Configuration.Server.Serialization.Node,Couchbase.Configuration.Server.Serialization.IBucketConfig)">
            <summary>
            Gets an <see cref="T:System.Net.IPEndPoint"/> instance for a given Node and <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            </summary>
            <param name="node"></param>
            <param name="bucketConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.MemcachedConfigContext.LoadConfig(Couchbase.Configuration.Server.Serialization.IBucketConfig,System.Boolean)">
            <summary>
            Loads the current configuration setting the internal state of this configuration context.
            </summary>
            <param name="bucketConfig"></param>
            <param name="force">True to force a reconfiguration.</param>
            <exception cref="T:Couchbase.Configuration.CouchbaseBootstrapException">Condition.</exception>
        </member>
        <member name="M:Couchbase.Configuration.MemcachedConfigContext.LoadConfig">
            <exception cref="T:Couchbase.Configuration.CouchbaseBootstrapException">Condition.</exception>
        </member>
        <member name="T:Couchbase.Configuration.IConfigInfo">
            <summary>
            Provides an interface for implementing an object responsible for maintaining a
            list of nodes in cluster and the mapping between keys and nodes.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.CreationTime">
            <summary>
            The time at which this configuration context has been created.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.ClientConfig">
            <summary>
            The client configuration used for bootstrapping.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.BucketConfig">
            <summary>
            The client configuration for a bucket.
            <remarks> See <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/> for details.</remarks>
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.BucketName">
            <summary>
            The name of the Bucket that this configuration represents.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.BucketType">
            <summary>
            The <see cref="T:Couchbase.Core.Buckets.BucketTypeEnum"/> that this configuration context is for.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.NodeLocator">
            <summary>
            The <see cref="T:Couchbase.Core.Buckets.NodeLocatorEnum"/> that this configuration is using.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.LoadConfig">
            <summary>
            Loads the most updated configuration creating any resources as needed. The <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            used by this method is passed into the CTOR.
            </summary>
            <remarks>This method should be called immediately after creation.</remarks>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.LoadConfig(Couchbase.Configuration.Server.Serialization.IBucketConfig,System.Boolean)">
            <summary>
            Loads the most updated configuration creating any resources as needed based upon the passed in  <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.SslConfigured">
            <summary>
            Returns true if the bucket is configured to use SSL
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.IsQueryCapable">
            <summary>
            Gets or sets a value indicating whether this cluster is supports N1QL queries.
            </summary>
            <value>
            <c>true</c> if this instance is query capable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.IsViewCapable">
            <summary>
            Gets or sets a value indicating whether this cluster supports View requests.
            </summary>
            <value>
            <c>true</c> if this instance is view capable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.IsDataCapable">
            <summary>
            Gets or sets a value indicating whether this cluster supports K/V operations.
            </summary>
            <value>
            <c>true</c> if this instance is data capable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether the server supports enhanced durability.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.SupportsSubdocXAttributes">
            <summary>
            Gets a value indicating whether Subdocument XAttributes are supported.
            </summary>
            <value>
            <c>true</c> if the server supports Subdocument XAttributes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.IsIndexCapable">
            <summary>
            Gets or sets a value indicating whether this cluster is supports indexing
            </summary>
            <value>
            <c>true</c> if this cluster is index capable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.IsSearchCapable">
            <summary>
            Gets a value indicating whether this server is supports FTS.
            </summary>
            <value>
            <c>true</c> if this instance is search capable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.IsAnalyticsCapable">
            <summary>
            Gets a value indicating whether this server supports analytics.
            </summary>
            <value>
            <c>true</c> if this instance is analytics capable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.GetDataNode">
            <summary>
            Gets a data node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.GetQueryNode">
            <summary>
            Gets a query node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.GetIndexNode">
            <summary>
            Gets a index node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.GetViewNode">
            <summary>
            Gets a view node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.GetSearchNode">
            <summary>
            Gets a search node from the servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.GetAnalyticsNode">
            <summary>
            Gets an analytics node from the server collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.#ctor(System.String,System.Collections.Concurrent.ConcurrentDictionary{System.UInt32,Couchbase.IO.Operations.IOperation},Couchbase.Configuration.IConfigInfo,Couchbase.Core.IClusterController,System.Int32,System.UInt32)">
            <summary>
            Ctor for <see cref="T:Couchbase.Core.Buckets.KeyObserver"/>.
            </summary>
            <param name="pending">A queue for operations in-flight.</param>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> object which represents the current cluster and client configuration.</param>
            <param name="clusterController">The <see cref="T:Couchbase.Core.IClusterController"/> representing the cluster's state.</param>
            <param name="interval">The interval to poll.</param>
            <param name="timeout">The max time to wait for the durability requirements to be met.</param>
        </member>
        <member name="T:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams">
            <summary>
            Data structure for holding and passing arguments
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.IsDurabilityMet">
            <summary>
            Check to see if the durability constraint is met or exceeded
            </summary>
            <returns>True if the durability constraints specified by <see cref="P:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.ReplicateTo"/> and <see cref="P:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.PersistTo"/> have been met or exceeded.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.CheckPersisted(Couchbase.IOperationResult{Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse})">
            <summary>
            Determines whether the specified response has persisted and if it has,
            increases the <see cref="F:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams._persistedToCount"/> by one.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.CheckReplicated(Couchbase.IOperationResult{Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse})">
            <summary>
            Determines whether the specified response has replicated,
            increases the <see cref="F:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams._replicatedToCount"/> by one.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.CheckMutationLost(Couchbase.IOperationResult{Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse})">
            <summary>
            Checks to see if The observed document was lost during a hard failover, because the document did not reach the replica in time.
            </summary>
            <param name="response">The <see cref="T:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno"/>response.</param>
            <exception cref="T:Couchbase.Core.DocumentMutationLostException">Thrown if the observed document was lost during
            a hard failover because the document did not reach the replica in time.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.MaxReplicas">
             <summary>
            Gets the maximum number of replicas to check.
             </summary>
             <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.GetReplicas">
            <summary>
            Gets the replica vBucket indexes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.CheckConfiguredReplicas">
            <summary>
            Checks that the number of configured replicas matches the <see cref="P:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.ReplicateTo"/> value.
            </summary>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.Reset">
            <summary>
            Resets the internal persistence and replication counters to zero.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveAsync(Couchbase.Core.Buckets.MutationToken,Couchbase.ReplicateTo,Couchbase.PersistTo,System.Threading.CancellationTokenSource)">
            <summary>
             Performs an observe event on the durability requirements specified on a key asynchronously
            </summary>
            <param name="token">The <see cref="T:Couchbase.Core.Buckets.MutationToken"/> to compare against.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted to to satisfy the durability constraint.</param>
            <param name="cts"></param>
            <returns> A <see cref="T:System.Threading.Tasks.Task`1"/> representing the aynchronous operation.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveEveryAsync(System.Func{Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams,System.Threading.Tasks.Task{System.Boolean}},Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Observes a set of keys at a specified interval and timeout.
            </summary>
            <param name="observe">The func to call at the specific interval</param>
            <param name="observeParams">The parameters to pass in.</param>
            <param name="interval">The interval to check.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to use to terminate the observation at the specified timeout.</param>
            <returns>True if the durability requirements specified by <see cref="T:Couchbase.PersistTo"/> and <see cref="T:Couchbase.ReplicateTo"/> have been satisfied.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.Observe(Couchbase.Core.Buckets.MutationToken,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Observes the specified key using the Seqno.
            </summary>
            <param name="token">The token.</param>
            <param name="replicateTo">The replicate to.</param>
            <param name="persistTo">The persist to.</param>
            <returns>True if durability constraints were matched.</returns>
            <exception cref="T:Couchbase.Core.DocumentMutationLostException">Thrown if the observed document was lost during
            a hard failover because the document did not reach the replica in time.</exception>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.CheckReplicas(Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams,Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno)">
            <summary>
            Checks the replicas for durability constraints.
            </summary>
            <param name="observeParams">The observe parameters.</param>
            <param name="op">The op.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.CheckReplica(Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams,Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno,System.Int32)">
            <summary>
            Checks a replica for durability constraints.
            </summary>
            <param name="observeParams">The observe parameters.</param>
            <param name="op">The op.</param>
            <param name="replicaId">The replica identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.Buckets.MutationToken">
            <summary>
            An object for tracking changes if enhanced durability is enabled.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.CouchbaseRequestExecuter">
            <summary>
            An implementation of <see cref="T:Couchbase.Core.Buckets.IRequestExecuter"/> for executing Couchbase bucket operations (Memcached, Views, N1QL, etc)
            against a persistent, Couchbase Bucket on a Couchbase cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.CanRetryOperation(Couchbase.IOperationResult,Couchbase.IO.Operations.IOperation)">
            <summary>
            Checks the <see cref="T:Couchbase.IO.Operations.IOperation"/> to see if it supports retries and then checks the <see cref="T:Couchbase.IOperationResult"/>
             to see if the error or server response supports retries.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operationResult">The <see cref="T:Couchbase.IOperationResult"/> to check from the server.</param>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to check to see if it supports retries. Not all operations support retries.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.CheckForConfigUpdates(Couchbase.IO.Operations.IOperation)">
            <summary>
            Updates the configuration if the <see cref="T:Couchbase.IO.Operations.IOperation"/> returns a <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> with the <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/> to check for.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.GetServer(System.String,System.UInt32,Couchbase.Core.IVBucket@)">
            <summary>
            Gets the <see cref="T:Couchbase.Core.Server"/> or node that a key has been mapped to.
            </summary>
            <param name="key">The key to get or set.</param>
            <param name="revision">The rev # of the cluster map.</param>
            <param name="vBucket">The VBucket the key belongs to.</param>
            <returns>The <see cref="T:Couchbase.Core.IServer"/> that the key is mapped to.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.RetryViewEveryAsync``1(System.Func{Couchbase.Views.IViewQueryable,Couchbase.Configuration.IConfigInfo,System.Threading.Tasks.Task{Couchbase.Views.IViewResult{``0}}},Couchbase.Views.IViewQueryable,Couchbase.Configuration.IConfigInfo,System.Threading.CancellationToken)">
            <summary>
            Executes an <see cref="T:Couchbase.Views.IViewQuery"/> asynchronously. If it fails, the response is checked and
             if certain criteria are met the request is retried until it times out.
            </summary>
            <typeparam name="T">The Type of View result body.</typeparam>
            <param name="execute">A delegate with the send logic that is executed on each attempt. </param>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> to execute.</param>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> that represents the logical topology of the cluster.</param>
            <param name="cancellationToken">For canceling the async operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithDurability``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:Couchbase.IOperationResult`1"/> with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Data services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithDurability(Couchbase.IO.Operations.IOperation,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:Couchbase.IOperationResult"/> with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Data services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithDurabilityAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements using async/await
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Data services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetry``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request with retry.
            </summary>
            <typeparam name="T">The Type T of the <see cref="T:Couchbase.Views.ViewRow`1"/> value.</typeparam>
            <param name="viewQuery">The view query.</param>
            <returns>A <see cref="T:Couchbase.Views.IViewResult`1"/> with the results of the query.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support View services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetry(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation" /> to the Couchbase Server using the Memcached protocol.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation" /> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult" /> with the status of the request.
            </returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Data services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetry``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to the Couchbase Server using the Memcached protocol.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult" /> with the status of the request.
            </returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Data services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetryAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request to the server to be executed using async/await
            </summary>
            <typeparam name="T">The Type of the body of the Views return value or row.</typeparam>
            <param name="query">An <see cref="T:Couchbase.Views.IViewQuery" /> to be executed.</param>
            <returns>
            The result of the View request as an <see cref="T:System.Threading.Tasks.Task`1" /> to be awaited on where T is the Type of each row.
            </returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support View services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetryAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult{``0}},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to send.</param>
            <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetryAsync(Couchbase.IO.Operations.IOperation,System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation" /> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation" /> to send.</param>
            <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetry``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest" /> object.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest" /> object to send to the server.</param>
            <returns>
            An <see cref="T:Couchbase.N1QL.IQueryResult`1" /> object that is the result of the query.
            </returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Query services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetryAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest"/> object using async/await.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> object to send to the server.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> object to be awaited on that is the result of the query.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Query services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetry``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Sends an <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> to the server to be executed.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.TimeoutException">Could not acquire a server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetryAsync``1(Couchbase.Analytics.IAnalyticsRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends an <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> to the server to be executed.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="request">The <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> object to send to the server.</param>
            <param name="cancellationToken">Token which can cancel the analytics request.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> object to be awaited on that is the result of the analytics request.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support analytics services.</exception>
        </member>
        <member name="T:Couchbase.Core.Buckets.IRequestExecuter">
            <summary>
            An interface for executing various operations (Memcached, View, N1QL, etc) with retry logic
            and hueristics against the Couchbase cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetry(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetry``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetryAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult{``0}},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> with the status of the request to be awaited on.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetryAsync(Couchbase.IO.Operations.IOperation,System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation"/> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> with the status of the request to be awaited on.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetry``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request to the server to be executed.
            </summary>
            <typeparam name="T">The Type of the body of the Views return value or row.</typeparam>
            <param name="query">An <see cref="T:Couchbase.Views.IViewQuery"/> to be executed.</param>
            <returns>The result of the View request as an <see cref="T:Couchbase.Views.IViewResult`1"/> where T is the Type of each row.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetryAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request to the server to be executed using async/await
            </summary>
            <typeparam name="T">The Type of the body of the Views return value or row.</typeparam>
            <param name="query">An <see cref="T:Couchbase.Views.IViewQuery"/> to be executed.</param>
            <returns>The result of the View request as an <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on where T is the Type of each row.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetry``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> object to send to the server.</param>
            <returns>An <see cref="T:Couchbase.N1QL.IQueryResult`1"/> object that is the result of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetryAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest"/> object using async/await.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> object to send to the server.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> object to be awaited on that is the result of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetry``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Sends an <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> to the server to be executed.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="request">The request.</param>
            <returns></returns>
            <exception cref="T:System.TimeoutException">Could not acquire a server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetryAsync``1(Couchbase.Analytics.IAnalyticsRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends an <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> to the server to be executed.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="request">The <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> object to send to the server.</param>
            <param name="token">Token which can cancel the analytics request.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> object to be awaited on that is the result of the analytics request.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetry(Couchbase.Search.SearchQuery)">
            <summary>
            Sends a <see cref="T:Couchbase.Search.IFtsQuery"/> request to an FTS enabled node and returns the <see cref="T:Couchbase.Search.ISearchQueryResult"/>response.
            </summary>
            <param name="searchQuery">The <see cref="T:Couchbase.Search.SearchQuery"/> object representing the search request with an index, a query and parameters.</param>
            <returns>A <see cref="T:Couchbase.Search.ISearchQueryResult"/> representing the response from the FTS service.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetryAsync(Couchbase.Search.SearchQuery)">
            <summary>
            Sends a <see cref="T:Couchbase.Search.IFtsQuery"/> request to an FTS enabled node and returns the <see cref="T:Couchbase.Search.ISearchQueryResult"/>response.
            </summary>
            <param name="searchQuery">The <see cref="T:Couchbase.Search.SearchQuery"/> object representing the search request with an index, a query and parameters.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the response from the FTS service.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithDurability``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:Couchbase.IOperationResult`1"/> with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithDurability(Couchbase.IO.Operations.IOperation,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:Couchbase.IOperationResult"/> with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithDurabilityAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements using async/await
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithDurabilityAsync(Couchbase.IO.Operations.IOperation,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements using async/await
            </summary>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.RetryOperationEveryAsync``1(System.Func{Couchbase.IO.Operations.IOperation{``0},Couchbase.Configuration.IConfigInfo,System.Threading.Tasks.Task{Couchbase.IOperationResult{``0}}},Couchbase.IO.Operations.IOperation{``0},Couchbase.Configuration.IConfigInfo,System.Threading.CancellationToken)">
            <summary>
             Executes an operation until it either succeeds, reaches a non-retriable state, or times out.
             </summary>
             <typeparam name="T">The Type of the <see cref="T:Couchbase.IO.Operations.IOperation"/>'s value.</typeparam>
             <param name="execute">A delegate that contains the send logic.</param>
             <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
             <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> that represents the logical topology of the cluster.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for timing out the request.</param>
             An <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.RetryOperationEveryAsync(System.Func{Couchbase.IO.Operations.IOperation,Couchbase.Configuration.IConfigInfo,System.Threading.Tasks.Task{Couchbase.IOperationResult}},Couchbase.IO.Operations.IOperation,Couchbase.Configuration.IConfigInfo,System.Threading.CancellationToken)">
            <summary>
            Executes an operation until it either succeeds, reaches a non-retriable state, or times out.
            </summary>
            <param name="execute">A delegate that contains the send logic.</param>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> that represents the logical topology of the cluster.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for timing out the request.</param>
            An <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchrobous operation.
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.ReadFromReplica``1(Couchbase.IO.Operations.ReplicaRead{``0})">
            <summary>
            Checks the primary node for the key, if a NMV is encountered, will retry on each replica.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.ReadFromReplicaAsync``1(Couchbase.IO.Operations.ReplicaRead{``0})">
            <summary>
            Checks the primary node for the key, if a NMV is encountered, will retry on each replica, asynchronously.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing asynchcronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.UpdateConfig">
            <summary>
            Updates the configuration.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.KeyObserver">
            <summary>
            Performs and observe event on a key, terminating when the durability requirements are satisfied or the specified timeout has expired.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.UInt32,Couchbase.IO.Operations.IOperation},Couchbase.Configuration.IConfigInfo,Couchbase.Core.IClusterController,System.Int32,System.Int32)">
            <summary>
            Ctor for <see cref="T:Couchbase.Core.Buckets.KeyObserver"/>.
            </summary>
            <param name="pending">A queue for operations in-flight.</param>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> object which represents the current cluster and client configuration.</param>
            <param name="clusterController">The <see cref="T:Couchbase.Core.IClusterController"/> representing the cluster's state.</param>
            <param name="interval">The interval to poll.</param>
            <param name="timeout">The max time to wait for the durability requirements to be met.</param>
        </member>
        <member name="T:Couchbase.Core.Buckets.KeyObserver.DurabiltyCriteria">
            <summary>
            The durability requirements that must be met.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.KeyObserver.ObserveParams">
            <summary>
            Data structure for holding and passing arguments
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveParams.IsDurabilityMet">
            <summary>
            Check to see if the durability constraint is met or exceeded
            </summary>
            <returns>True if the durability constraints specified by <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.ReplicateTo"/> and <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.PersistTo"/> have been met or exceeded.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveParams.CheckConfiguredReplicas">
            <summary>
            Checks that the number of configured replicas matches the <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.ReplicateTo"/> value.
            </summary>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveParams.GetReplicas">
            <summary>
            Gets a list of replica indexes that is the larger of either the <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.PersistTo"/> or the <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.ReplicateTo"/> value.
            </summary>
            <returns>A list of replica indexes which is the larger of either the <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.PersistTo"/> or the <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.ReplicateTo"/> value</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveParams.Reset">
            <summary>
            Resets the internal persistence and replication counters to zero.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveAdd(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs an observe event on the durability requirements specified on a key stored by an Add operation.
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted to to satisfy the durability constraint.</param>
            <returns>True if the durability constraints have been satisfied.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveRemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.Threading.CancellationTokenSource)">
            <summary>
            Performs an observe event on the durability requirements specified on a key stored by an delete operation.
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated (deleted) to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted (deleted) to to satisfy the durability constraint.</param>
            <returns>True if the durability constraints have been satisfied.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveAddAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.Threading.CancellationTokenSource)">
            <summary>
            Performs an observe event on the durability requirements specified on a key stored by an Add operation.
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted to to satisfy the durability constraint.</param>
            <returns>True if the durability constraints have been satisfied.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveRemove(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs an observe event on the durability requirements specified on a key stored by an delete operation.
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated (deleted) to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted (deleted) to to satisfy the durability constraint.</param>
            <returns>True if the durability constraints have been satisfied.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
             Performs an observe event on the durability requirements specified on a key.
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="deletion">True if this is a delete operation.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted to to satisfy the durability constraint.</param>
            <returns>True if the durability constraints have been met.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.GetReplicas(Couchbase.Core.IVBucket,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Gets a list of replica indexes that is the larger of either the <see cref="T:Couchbase.PersistTo"/> or the <see cref="T:Couchbase.ReplicateTo"/> value.
            </summary>
            <param name="vBucket">The <see cref="T:Couchbase.Core.VBucket"/> containing the replica indexes.</param>
            <param name="replicateTo">The <see cref="T:Couchbase.ReplicateTo"/> value.</param>
            <param name="persistTo">The <see cref="T:Couchbase.PersistTo"/> value.</param>
            <returns>A list of replica indexes which is the larger of either the <see cref="T:Couchbase.PersistTo"/> or the <see cref="T:Couchbase.ReplicateTo"/> value</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.CheckReplicas(Couchbase.Core.Buckets.KeyObserver.ObserveParams,Couchbase.IO.Operations.Observe)">
            <summary>
            Checks the replicas to see if the key has met the durability constraints defined by the caller.
            </summary>
            <param name="observeParams">The observe parameters.</param>
            <param name="operation">The operation observe operation reference; will be cloned if reused.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.CheckReplica(Couchbase.Core.Buckets.KeyObserver.ObserveParams,Couchbase.IO.Operations.Observe,System.Int32)">
            <summary>
            Checks the replica at a given replicaIndex for the durability constraints.
            </summary>
            <param name="observeParams">The observe parameters - stateful - gather info with each request.</param>
            <param name="operation">The observe operation.</param>
            <param name="replicaIndex">Index of the replica.</param>
            <returns>True if the key has not mutated.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.CheckReplicaAsync(Couchbase.Core.Buckets.KeyObserver.ObserveParams,System.Int32)">
            <summary>
            Asynchronously checks the replications status of a key.
            </summary>
            <param name="observeParams">The <see cref="T:Couchbase.Core.Buckets.KeyObserver.ObserveParams"/> object.</param>
            <param name="replicaIndex">The replicaIndex of the replica within the <see cref="T:Couchbase.Core.IVBucket"/></param>
            <returns>True if the durability requirements specified by <see cref="T:Couchbase.PersistTo"/> and <see cref="T:Couchbase.ReplicateTo"/> have been satisfied.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveEveryAsync(System.Func{Couchbase.Core.Buckets.KeyObserver.ObserveParams,System.Threading.Tasks.Task{System.Boolean}},Couchbase.Core.Buckets.KeyObserver.ObserveParams,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Observes a set of keys at a specified interval and timeout.
            </summary>
            <param name="observe">The func to call at the specific interval</param>
            <param name="observeParams">The parameters to pass in.</param>
            <param name="op">The <see cref="M:Couchbase.Core.Buckets.KeyObserver.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)"/> operation.</param>
            <param name="interval">The interval to check.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to use to terminate the observation at the specified timeout.</param>
            <returns>True if the durability requirements specified by <see cref="T:Couchbase.PersistTo"/> and <see cref="T:Couchbase.ReplicateTo"/> have been satisfied.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.GetDurabilityCriteria(System.Boolean)">
            <summary>
            Gets the specified durability requirements for the key.
            </summary>
            <param name="remove">If true the durability requirements will be set as a deletion operation, otherwise as an Add operation.</param>
            <returns>The durability requirements that must be statisfied.</returns>
        </member>
        <member name="T:Couchbase.Core.Buckets.MemcachedRequestExecuter">
            <summary>
            An implementation of <see cref="T:Couchbase.Core.Buckets.IRequestExecuter"/> for executing memcached specific operations against an
            in-memory, Memcached Bucket in a Couchbase cluster.
            </summary>
            <remarks>Note that the only methods which Memcached buckets support are implemented.
            Methods that are not implemented may throw a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="M:Couchbase.Core.Buckets.MemcachedRequestExecuter.GetServer(System.String)">
            <summary>
            Maps a key to a <see cref="T:Couchbase.Core.IServer"/> object.
            </summary>
            <param name="key">The key to map.</param>
            <returns>The <see cref="T:Couchbase.Core.IServer"/> where the key lives.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.MemcachedRequestExecuter.SendWithRetry``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.MemcachedRequestExecuter.SendWithRetry(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.MemcachedRequestExecuter.SendWithRetryAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult{``0}},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to send.</param>
            <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.MemcachedRequestExecuter.SendWithRetryAsync(Couchbase.IO.Operations.IOperation,System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation" /> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation" /> to send.</param>
             /// <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Couchbase.Core.Buckets.RequestExecuterBase">
            <summary>
            Provides virtual methods and base implementations for <see cref="T:Couchbase.Core.Buckets.IRequestExecuter"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.RetryOperationEveryAsync``1(System.Func{Couchbase.IO.Operations.IOperation{``0},Couchbase.Configuration.IConfigInfo,System.Threading.Tasks.Task{Couchbase.IOperationResult{``0}}},Couchbase.IO.Operations.IOperation{``0},Couchbase.Configuration.IConfigInfo,System.Threading.CancellationToken)">
            <summary>
            Executes an operation until it either succeeds, reaches a non-retriable state, or times out.
            </summary>
            <typeparam name="T">The Type of the <see cref="T:Couchbase.IO.Operations.IOperation"/>'s value.</typeparam>
            <param name="execute">A delegate that contains the send logic.</param>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> that represents the logical topology of the cluster.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for timing out the request.</param>
            An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchrobous operation.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Couchbase.Core.Buckets.RequestExecuterBase.RetryOperationEveryAsync(System.Func{Couchbase.IO.Operations.IOperation,Couchbase.Configuration.IConfigInfo,System.Threading.Tasks.Task{Couchbase.IOperationResult}},Couchbase.IO.Operations.IOperation,Couchbase.Configuration.IConfigInfo,System.Threading.CancellationToken)" -->
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetry``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to the Couchbase Server using the Memcached protocol.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult" /> with the status of the request.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetryAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult{``0}},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to send.</param>
            <param name="tcs"></param>
            <param name="cts"></param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1" /> with the status of the request to be awaited on.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetry``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request to the server to be executed.
            </summary>
            <typeparam name="T">The Type of the body of the Views return value or row.</typeparam>
            <param name="query">An <see cref="T:Couchbase.Views.IViewQuery" /> to be executed.</param>
            <returns>
            The result of the View request as an <see cref="T:Couchbase.Views.IViewResult`1" /> where T is the Type of each row.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetryAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request to the server to be executed using async/await
            </summary>
            <typeparam name="T">The Type of the body of the Views return value or row.</typeparam>
            <param name="query">An <see cref="T:Couchbase.Views.IViewQuery" /> to be executed.</param>
            <returns>
            The result of the View request as an <see cref="T:System.Threading.Tasks.Task`1" /> to be awaited on where T is the Type of each row.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetry``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest" /> object.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest" /> object to send to the server.</param>
            <returns>
            An <see cref="T:Couchbase.N1QL.IQueryResult`1" /> object that is the result of the query.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetryAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest" /> object using async/await.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest" /> object to send to the server.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1" /> object to be awaited on that is the result of the query.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetry(Couchbase.Search.SearchQuery)">
            <summary>
            Sends a <see cref="T:Couchbase.Search.IFtsQuery" /> request to an FTS enabled node and returns the <see cref="T:Couchbase.Search.ISearchQueryResult" />response.
            </summary>
            <returns>
            A <see cref="T:Couchbase.Search.ISearchQueryResult" /> representing the response from the FTS service.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetryAsync(Couchbase.Search.SearchQuery)">
            <summary>
            Sends a <see cref="T:Couchbase.Search.IFtsQuery" /> request to an FTS enabled node and returns the <see cref="T:Couchbase.Search.ISearchQueryResult" />response.
            </summary>
            <param name="searchQuery"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> representing the response from the FTS service.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithDurability``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:Couchbase.IOperationResult`1" /> with it's <see cref="T:Couchbase.IO.Operations.Durability" /> status.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithDurabilityAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements using async/await
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> to be awaited on with it's <see cref="T:Couchbase.IO.Operations.Durability" /> status.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetry(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation" /> to the Couchbase Server using the Memcached protocol.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation" /> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult" /> with the status of the request.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetryAsync(Couchbase.IO.Operations.IOperation,System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation" /> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation" /> to send.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1" /> with the status of the request to be awaited on.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithDurability(Couchbase.IO.Operations.IOperation,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:Couchbase.IOperationResult" /> with it's <see cref="T:Couchbase.IO.Operations.Durability" /> status.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithDurabilityAsync(Couchbase.IO.Operations.IOperation,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements using async/await
            </summary>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> to be awaited on with it's <see cref="T:Couchbase.IO.Operations.Durability" /> status.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.ReadFromReplica``1(Couchbase.IO.Operations.ReplicaRead{``0})">
            <summary>
            Checks the primary node for the key, if a NMV is encountered, will retry on each replica.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation" /> to execiute.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.ReadFromReplicaAsync``1(Couchbase.IO.Operations.ReplicaRead{``0})">
            <summary>
            Checks the primary node for the key, if a NMV is encountered, will retry on each replica, asynchronously.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation" /> to execiute.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing asynchcronous operation.
            </returns>
        </member>
        <member name="T:Couchbase.Core.Buckets.BucketTypeEnum">
            <summary>
            Represents the Bucket types supported by Couchbase Server
            </summary>
        </member>
        <member name="F:Couchbase.Core.Buckets.BucketTypeEnum.Couchbase">
            <summary>
            A persistent Bucket supporting replication and rebalancing.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Buckets.BucketTypeEnum.Memcached">
            <summary>
            A Bucket supporting in-memory Key/Value operations.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.KetamaKeyMapper">
            <summary>
            Provides a means of consistent hashing for keys used by Memcached Buckets.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaKeyMapper.MapKey(System.String)">
            <summary>
            Maps a Key to a node in the cluster.
            </summary>
            <param name="key">The key to map.</param>
            <returns>An object representing the node that the key was mapped to, which implements <see cref="T:Couchbase.Core.IMappedNode"/></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaKeyMapper.MapKey(System.String,System.UInt32)">
            <summary>
            Not Supported: This overload is only supported by Couchbase buckets.
            </summary>
            <param name="key"></param>
            <param name="revision"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaKeyMapper.FindIndex(System.Int64)">
            <summary>
            Finds the index of a node for a given key.
            </summary>
            <param name="key">The Key that the index belongs to.</param>
            <returns>The index of key - which is the location of the node that the key maps to.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaKeyMapper.GetHash(System.String)">
            <summary>
            Creates a hash for a given Key.
            </summary>
            <param name="key">The Key to hash.</param>
            <returns>A hash of the Key.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaKeyMapper.Initialize">
            <summary>
            Initializes the mapping of hashes to nodes.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.KetamaNode">
            <summary>
            A cluster node mapped to a given Key.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaNode.LocatePrimary">
            <summary>
            Gets the primary node for a key.
            </summary>
            <returns>An object implementing the <see cref="T:Couchbase.Core.IServer"/> interface,
            which is the node that a key is mapped to within a cluster.</returns>
        </member>
        <member name="T:Couchbase.Core.Buckets.NodeLocatorEnum">
            <summary>
            Specifies the type of NodeLocator that a Couchbase Bucket uses.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Buckets.NodeLocatorEnum.VBucket">
            <summary>
            Used for persistent Couchbase Buckets.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Buckets.NodeLocatorEnum.Ketama">
            <summary>
            Used for in-memory Memcached Buckets.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.VBucketKeyMapper">
            <summary>
            Provides a means of mapping keys to nodes within a Couchbase Server and a Couchbase Bucket.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Buckets.VBucketKeyMapper.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IVBucket"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Couchbase.Core.IVBucket"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.VBucketKeyMapper.MapKey(System.String)">
            <summary>
            Maps a given Key to it's node in a Couchbase Cluster.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.VBucketKeyMapper.CreateVBucketMap">
            <summary>
            Creates a mapping of VBuckets to nodes.
            </summary>
            <returns>A mapping of indexes and Vbuckets.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.VBucketKeyMapper.CreateVBucketMapForwards">
            <summary>
            Creates a mapping of VBuckets to nodes.
            </summary>
            <returns>A mapping of indexes and Vbuckets.</returns>
        </member>
        <member name="T:Couchbase.Core.ExpressionVisitors.LambdaSimplifyingExpressionVisitor">
            <summary>
            Simplifies an expression tree by evaluating any branches of the tree that do not include
            lambda parameter references.  This will remove references to variables external to the lambda
            by converting them to constants, perform arithmetic, and execute method calls as needed.
            For example, a call to "str.ToUpper()" where string is an external variable would be simplified
            to a <see cref="T:System.Linq.Expressions.ConstantExpression"/> containing the uppercase version of str.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ExpressionVisitors.LambdaSimplifyingExpressionVisitor.Simplify(System.Linq.Expressions.Expression)">
            <summary>
            Simplifies an expression tree by evaluating any branches of the tree that do not include
            lambda parameter references.  This will remove references to variables external to the lambda
            by converting them to constants, perform arithmetic, and execute method calls as needed.
            For example, a call to "str.ToUpper()" where string is an external variable would be simplified
            to a <see cref="T:System.Linq.Expressions.ConstantExpression"/> containing the uppercase version of str.
            </summary>
            <param name="expression">Expression to simplify.</param>
            <returns>The simplified expression.</returns>
        </member>
        <member name="M:Couchbase.Core.ExpressionVisitors.LambdaSimplifyingExpressionVisitor.#ctor">
            <summary>
            Private constructor, only accessible via static method <see cref="M:Couchbase.Core.ExpressionVisitors.LambdaSimplifyingExpressionVisitor.Simplify(System.Linq.Expressions.Expression)"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ExpressionVisitors.LambdaSimplifyingExpressionVisitor.VisitChildren(System.Collections.Generic.IList{System.Linq.Expressions.Expression})">
            <summary>
            Visits a list of children to see if they are evaluatable or not.  If a branch of the tree
            can be evaluated but another cannot, simplifies the branches that can be evaluated to
            constants.  Modifies the provided collection with the new expressions.
            </summary>
            <param name="children">List of children to evaluate.  Null children are skipped.  This list is updated with the new children.</param>
        </member>
        <member name="T:Couchbase.Core.ExpressionVisitors.SubDocumentPathExpressionVisitor">
            <summary>
            Parses an expression tree which navigates a document to return the path to the sub document
            being referenced.
            </summary>
        </member>
        <member name="P:Couchbase.Core.ExpressionVisitors.SubDocumentPathExpressionVisitor.Path">
            <summary>
            After visiting an expression tree, contains the path to the sub document.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ExpressionVisitors.SubDocumentPathExpressionVisitor.#ctor(Couchbase.Core.Serialization.IExtendedTypeSerializer)">
            <summary>
            Creates a new SubDocumentPathExpressionVisitor.
            </summary>
            <param name="serializer"><see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> used for member name resolution.</param>
        </member>
        <member name="M:Couchbase.Core.ExpressionVisitors.SubDocumentPathExpressionVisitor.WriteEscapedString(System.String)">
            <summary>
            Escapes a string using the N1QL variant of JSON escaping rules, and writes it to the path.
            </summary>
            <param name="str">String to escape and write.</param>
        </member>
        <member name="M:Couchbase.Core.ExpressionVisitors.SubDocumentPathExpressionVisitor.GetEscapedString(System.String)">
            <summary>
            For unit testing of WriteEscapedString only.
            </summary>
        </member>
        <member name="T:Couchbase.Core.ILookupInBuilder`1">
            <summary>
            Exposes a "builder" API for constructing a chain of read commands on a document within Couchbase.
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
        </member>
        <member name="M:Couchbase.Core.ILookupInBuilder`1.Get(System.String)">
            <summary>
            Gets the value at a specified N1QL path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Couchbase.Core.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.ILookupInBuilder`1.Get(System.String,Couchbase.Core.SubdocLookupFlags)">
            <summary>
            Gets the value at a specified N1QL path.
            </summary>
            <param name="path">The path.</param>
            <param name="flags">The subdocument lookup flags.</param>
            <returns>A <see cref="T:Couchbase.Core.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.ILookupInBuilder`1.Exists(System.String)">
            <summary>
            Checks for the existence of a given N1QL path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Couchbase.Core.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.ILookupInBuilder`1.Exists(System.String,Couchbase.Core.SubdocLookupFlags)">
            <summary>
            Checks for the existence of a given N1QL path.
            </summary>
            <param name="path">The path.</param>
            <param name="flags">The subdocument lookup flags.</param>
            <returns>A <see cref="T:Couchbase.Core.ILookupInBuilder`1"/> implementation reference for chaining operations.</returns>
        </member>
        <member name="T:Couchbase.Core.IMutateInBuilder`1">
            <summary>
             Exposes the creation of a set of mutation operations to be performed.
            </summary>
            <typeparam name="TDocument">The strong typed document (POCO) reflecting the structure of the paths.</typeparam>
        </member>
        <member name="P:Couchbase.Core.IMutateInBuilder`1.Cas">
            <summary>
            A "check-and-set" value for ensuring that a document has not been modified by another thread.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IMutateInBuilder`1.Expiry">
            <summary>
            The "time-to-live" or "TTL" that specifies the document's lifetime.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IMutateInBuilder`1.PersistTo">
            <summary>
            A durability constraint ensuring that a document has been persisted to the n^th node.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IMutateInBuilder`1.ReplicateTo">
            <summary>
            A durability constraint for ensuring that the document has been replicated to the n^th node.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.Insert(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts an element into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.Insert(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Inserts an element into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="flags">The subdocument flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.Upsert(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts or updates an element within or into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.Upsert(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Inserts or updates an element within or into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="flags">The subdocument flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.Replace(System.String,System.Object)">
            <summary>
            Replaces an element or value within a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.Replace(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Replaces an element or value within a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="flags">The subdocument flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.Remove(System.String)">
            <summary>
            Removes an element or value from a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.Remove(System.String,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Removes an element or value from a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="flags">The subdocument flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayAppend(System.Object,System.Boolean)">
            <summary>
            Inserts an array value at the end of an array that is the root of a JSON document.
            </summary>
            <param name="value">An array value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayAppend(System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values at the end of an array that is the root of a JSON document.
            </summary>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayAppend(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts a value to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An aray value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayAppend(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Inserts a value to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An aray value.</param>
            <param name="flags">The subdocument flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayAppend(System.String,System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayAppend(System.String,Couchbase.Core.SubdocMutateFlags,System.Object[])">
            <summary>
            Inserts one or more values to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="flags">The subdocument flags.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayPrepend(System.Object,System.Boolean)">
            <summary>
            Inserts a value to the beginning of an array that is the root of a JSON document.
            </summary>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayPrepend(System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values to the beginning of an array that is the root of a JSON document.
            </summary>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayPrepend(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts a value to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayPrepend(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Inserts a value to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value.</param>
            <param name="flags">The subdocument flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayPrepend(System.String,System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayPrepend(System.String,Couchbase.Core.SubdocMutateFlags,System.Object[])">
            <summary>
            Inserts one or more values to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="flags">The subdocument flags.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayInsert(System.String,System.Object)">
            <summary>
            Inserts a value at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayInsert(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Inserts a value at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A value.</param>
            <param name="flags">The subdocument flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayInsert(System.String,System.Object[])">
            <summary>
            Inserts one or more values at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayInsert(System.String,Couchbase.Core.SubdocMutateFlags,System.Object[])">
            <summary>
            Inserts one or more values at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="flags">The subdocument flags.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayAddUnique(System.Object,System.Boolean)">
            <summary>
            Adds a value to an array if the value does not already exist in the array at the root of the JSON document.
            </summary>
            <param name="value">A unique value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayAddUnique(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a value to an array if the value does not already exist in the array.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A unique value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.ArrayAddUnique(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Adds a value to an array if the value does not already exist in the array.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A unique value.</param>
            <param name="flags">The subdocument flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.Counter(System.String,System.Int64,System.Boolean)">
            <summary>
            Performs an arithmetic increment or decrement operation on a numeric value in a document.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="delta">The value to increment or decrement the original value by.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.Counter(System.String,System.Int64,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Performs an arithmetic increment or decrement operation on a numeric value in a document.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="delta">The value to increment or decrement the original value by.</param>
            <param name="flags">The subdocument flags.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.WithExpiry(System.TimeSpan)">
            <summary>
            Applies an expiration to a document.
            </summary>
            <param name="expiry">The "time-to-live" or TTL of the document.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.WithCas(System.Int64)">
            <summary>
            A "check-and-set" value for ensuring that a document has not been modified by another thread.
            </summary>
            <param name="cas">The CAS value.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.WithCas(System.UInt64)">
            <summary>
            A "check-and-set" value for ensuring that a document has not been modified by another thread.
            </summary>
            <param name="cas">The CAS value.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.WithDurability(Couchbase.PersistTo)">
            <summary>
            A durability constraint ensuring that a document has been persisted to the n^th node.
            </summary>
            <param name="persistTo">The <see cref="P:Couchbase.Core.IMutateInBuilder`1.PersistTo"/> value.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.WithDurability(Couchbase.ReplicateTo)">
            <summary>
            A durability constraint ensuring that a document has been persisted to the n^th node.
            </summary>
            <param name="replicateTo">The <see cref="P:Couchbase.Core.IMutateInBuilder`1.ReplicateTo"/> value.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.IMutateInBuilder`1.WithDurability(Couchbase.PersistTo,Couchbase.ReplicateTo)">
            <summary>
            Sets the <see cref="P:Couchbase.Core.IMutateInBuilder`1.ReplicateTo"/> and <see cref="P:Couchbase.Core.IMutateInBuilder`1.PersistTo"/> values for a document.
            </summary>
            <param name="persistTo">The <see cref="P:Couchbase.Core.IMutateInBuilder`1.PersistTo"/> value.</param>
            <param name="replicateTo">The <see cref="P:Couchbase.Core.IMutateInBuilder`1.ReplicateTo"/> value.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.SubDocument.ISubdocInvoker">
            <summary>
            Works as a shim between <see cref="T:Couchbase.Core.IBucket"/> and <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> and <see cref="T:Couchbase.Core.ILookupInBuilder`1"/> invoking a request for the chained operations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IO.SubDocument.ISubdocInvoker.Invoke``1(Couchbase.Core.IMutateInBuilder{``0})">
            <summary>
            Invokes the chained operations on the <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> instance.
            </summary>
            <typeparam name="T">The document's <see cref="T:System.Type"/> for building paths.</typeparam>
            <param name="builder">The <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> that contains a list of chained mutate operations.</param>
            <returns>A <see cref="T:Couchbase.IDocumentFragment`1"/> with the results for each mutate operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.SubDocument.ISubdocInvoker.InvokeAsync``1(Couchbase.Core.IMutateInBuilder{``0})">
            <summary>
            Invokes the chained operations on the <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> instance.
            </summary>
            <typeparam name="T">The document's <see cref="T:System.Type"/> for building paths.</typeparam>
            <param name="builder">The <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> that contains a list of chained mutate operations.</param>
            <returns>A <see cref="T:Couchbase.IDocumentFragment`1"/> with the results for each mutate operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.SubDocument.ISubdocInvoker.Invoke``1(Couchbase.Core.ILookupInBuilder{``0})">
            <summary>
            Invokes the chained operations on the <see cref="T:Couchbase.Core.ILookupInBuilder`1"/> instance.
            </summary>
            <typeparam name="T">The document's <see cref="T:System.Type"/> for building paths.</typeparam>
            <param name="builder">The <see cref="T:Couchbase.Core.ILookupInBuilder`1"/> that contains a list of chained lookup operations.</param>
            <returns>A <see cref="T:Couchbase.IDocumentFragment`1"/> with the results for each lookup operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IO.SubDocument.ISubdocInvoker.InvokeAsync``1(Couchbase.Core.ILookupInBuilder{``0})">
            <summary>
            Invokes the chained operations on the <see cref="T:Couchbase.Core.ILookupInBuilder`1"/> instance.
            </summary>
            <typeparam name="T">The document's <see cref="T:System.Type"/> for building paths.</typeparam>
            <param name="builder">The <see cref="T:Couchbase.Core.ILookupInBuilder`1"/> that contains a list of chained lookup operations.</param>
            <returns>A <see cref="T:Couchbase.IDocumentFragment`1"/> with the results for each lookup operation.</returns>
        </member>
        <member name="T:Couchbase.Core.IO.SubDocument.OperationSpec">
            <summary>
            Represents a single operation within a mult-operation against a document using the SubDocument API.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IO.SubDocument.OperationSpec.Path">
            <summary>
            Gets or sets the N1QL path within the document.
            </summary>
            <value>
            The path.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.SubDocument.OperationSpec.OpCode">
            <summary>
            Gets or sets the <see cref="T:Couchbase.IO.Operations.OperationCode"/> for the SubDocument operation.
            </summary>
            <value>
            The op code.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.SubDocument.OperationSpec.Value">
            <summary>
            Gets or sets the value that will be written or recieved. This can be a JSON fragment or a scalar.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.SubDocument.OperationSpec.Bytes">
            <summary>
            Gets or sets the bytes.
            </summary>
            <value>
            The bytes.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.SubDocument.OperationSpec.Flags">
            <summary>
            Gets or sets the additional flags for the operation.
            </summary>
            <value>
            The flags.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.SubDocument.OperationSpec.Status">
            <summary>
            Gets or sets the <see cref="T:Couchbase.IO.ResponseStatus"/> returned by the server indicating the status of the operation - i.e. failed, succeeded, etc.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.SubDocument.OperationSpec.RemoveBrackets">
            <summary>
            Gets or sets a value indicating whether or not to remove array brackets.
            </summary>
            <value>
              <c>true</c> if array brackets will be removed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IO.SubDocument.OperationSpec.ValueIsJson">
            <summary>
            Gets or sets a value indicating whether the value is valid JSON and not just an element's value.
            </summary>
            <value>
              <c>true</c> if value is JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.Core.IO.SubDocument.OperationSpec.Clone">
            <summary>
            Creates a new object that is a copy of the current instance excluding the Byte and Status fields.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.IO.SubDocument.OperationSpec.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Couchbase.Core.IO.SubDocument.OperationSpec" />, is equal to this instance. Only compares Path and OpCode!
            </summary>
            <param name="obj">The <see cref="T:Couchbase.Core.IO.SubDocument.OperationSpec" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Couchbase.Core.IO.SubDocument.OperationSpec" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.SubDocument.OperationSpec.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Couchbase.Core.IO.SubDocument.OperationSpec" />, is equal to this instance. Only compares Path and OpCode!
            </summary>
            <param name="x">The <see cref="T:Couchbase.Core.IO.SubDocument.OperationSpec" /> to compare with this instance.</param>
            <param name="y">The y.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:Couchbase.Core.IO.SubDocument.OperationSpec" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.SubDocument.OperationSpec.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.SubDocument.OperationSpec.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Couchbase.Core.IO.SubDocument.OperationSpec.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Couchbase.Core.ISubDocBuilder`1.Execute">
            <summary>
            Executes the chained operations.
            </summary>
            <returns>
            A <see cref="T:Couchbase.IDocumentFragment`1" /> representing the results of the chained operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.ISubDocBuilder`1.ExecuteAsync">
            <summary>
            Executes the chained operations.
            </summary>
            <returns>
            A <see cref="T:Couchbase.IDocumentFragment`1" /> representing the results of the chained operations.
            </returns>
        </member>
        <member name="P:Couchbase.Core.ISubDocBuilder`1.Key">
            <summary>
            Gets or sets the unique identifier for the document.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Couchbase.Core.ISubDocBuilder`1.Count">
            <summary>
            Returns a count of the currently chained operations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.DocumentMutationException">
            <summary>
            Thrown when a mutation has been detected while observing a document.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Couchbase.Core.Monitoring.ClusterMonitor">
            <summary>
            Performs regular monitoring of down services so they can be reactivated
            when they become available.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Monitoring.QueryUriTester">
            <summary>
            Tests a query URI that previously failed to see if it's back online again.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Monitoring.SearchUriTester">
            <summary>
            Tests a search URI that previously failed to see if it's back online again.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Monitoring.UriTesterBase">
            <summary>
            Abstract base class for testing a <see cref="T:Couchbase.N1QL.FailureCountingUri"/> using a GET ping to a related URI.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Monitoring.UriTesterBase.NodeType">
            <summary>
            Node type used in log messages
            </summary>
        </member>
        <member name="M:Couchbase.Core.Monitoring.UriTesterBase.GetPingUri(Couchbase.N1QL.FailureCountingUri)">
            <summary>
            Returns the ping URI given the node's service URI.
            </summary>
            <param name="uri">Node's service URI.</param>
            <returns>URI to ping with a GET request.</returns>
        </member>
        <member name="M:Couchbase.Core.Monitoring.UriTesterBase.TestUri(Couchbase.N1QL.FailureCountingUri,System.Threading.CancellationToken)">
            <summary>
            Pings the server referenced by <paramref name="uri"/> to see if it's back online.
            If so, calls <see cref="M:Couchbase.N1QL.FailureCountingUri.ClearFailed"/> to mark it online again.
            </summary>
            <param name="uri">Uri to test.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to monitor for completion.</returns>
        </member>
        <member name="T:Couchbase.Core.Serialization.ITypeSerializerProvider">
            <summary>
            Provides access to an <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/> related to the object.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.ITypeSerializerProvider.Serializer">
            <summary>
            Gets the <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/> related to the object.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Serialization.DefaultSerializer">
            <summary>
            The default serializer for the Couchbase.NET SDK. Uses Newtonsoft.JSON as the the serializer.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.DefaultSerializer.SupportedDeserializationOptions">
            <summary>
            Informs consumers what deserialization options this <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> supports.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.DefaultSerializer.SerializerSettings">
            <summary>
            Gets the outgoing serializer settings; controls the format of the JSON you are storing in Couchbase.
            </summary>
            <value>
            The outgoing serializer settings; controls the format of the JSON you are storing in Couchbase.
            </value>
        </member>
        <member name="P:Couchbase.Core.Serialization.DefaultSerializer.DeserializationSettings">
            <summary>
            Gets the incoming de-serializer settings; controls the format of the incoming JSON for de-serialization into POCOs.
            </summary>
            <value>
            The incoming serializer settings.
            </value>
        </member>
        <member name="P:Couchbase.Core.Serialization.DefaultSerializer.DeserializationOptions">
            <summary>
            Provides custom deserialization options.  Options not listed in <see cref="P:Couchbase.Core.Serialization.IExtendedTypeSerializer.SupportedDeserializationOptions"/>
            will be ignored.  If null, then defaults will be used.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Serialization.DefaultSerializer.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deserializes the specified buffer into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="buffer">The buffer to deserialize from.</param>
            <param name="offset">The offset of the buffer to start reading from.</param>
            <param name="length">The length of the buffer to read from.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.DefaultSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object into a buffer.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>A <see cref="T:System.Byte"/> array that is the serialized value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.DefaultSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the specified stream into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.DefaultSerializer.GetMemberName(System.Reflection.MemberInfo)">
            <summary>
            Get the name which will be used for a given member during serialization/deserialization.
            </summary>
            <param name="member">Returns the name of this member.</param>
            <returns>
            The name which will be used for a given member during serialization/deserialization,
            or null if if will not be serialized.
            </returns>
            <remarks>
            DefaultSerializer uses <see cref="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver"/> from <see cref="P:Couchbase.Core.Serialization.DefaultSerializer.SerializerSettings"/>
            to determine the member name.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.Serialization.IExtendedTypeSerializer">
            <summary>
            Provides an interface for serialization and deserialization of K/V pairs, with support for more
            advanced deserialization features.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.IExtendedTypeSerializer.SupportedDeserializationOptions">
            <summary>
            Informs consumers what deserialization options this <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> supports.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.IExtendedTypeSerializer.DeserializationOptions">
            <summary>
            Provides custom deserialization options.  Options not listed in <see cref="P:Couchbase.Core.Serialization.IExtendedTypeSerializer.SupportedDeserializationOptions"/>
            will be ignored.  If null, then defaults will be used.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Serialization.IExtendedTypeSerializer.GetMemberName(System.Reflection.MemberInfo)">
            <summary>
            Get the name which will be used for a given member during serialization/deserialization.
            </summary>
            <param name="member">Returns the name of this member.</param>
            <returns>
            The name which will be used for a given member during serialization/deserialization,
            or null if if will not be serialized.
            </returns>
        </member>
        <member name="T:Couchbase.Core.Serialization.ICustomObjectCreator">
            <summary>
            Used to control type creation during deserialization.  For example, it can be used to create object proxies.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Serialization.ICustomObjectCreator.CanCreateObject(System.Type)">
            <summary>
            Determine if this creator can create a particular type.
            </summary>
            <param name="type">Type to test.</param>
            <returns>True if this creator can create a particular type.</returns>
            <remarks>Results of this method should be consistent for every call so that they can be cached.</remarks>
        </member>
        <member name="M:Couchbase.Core.Serialization.ICustomObjectCreator.CreateObject(System.Type)">
            <summary>
            Create an instance of a particular type with default values, ready to be populated by the deserializer.
            </summary>
            <param name="type">Type to create.</param>
            <returns>New instance of the type with default values, ready to be populated by the deserializer.</returns>
        </member>
        <member name="T:Couchbase.Core.Serialization.ITypeSerializer">
            <summary>
            Provides an interface for serialization and deserialization of K/V pairs.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Serialization.ITypeSerializer.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deserializes the specified buffer into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="buffer">The buffer to deserialize from.</param>
            <param name="offset">The offset of the buffer to start reading from.</param>
            <param name="length">The length of the buffer to read from.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.ITypeSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the specified stream into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.ITypeSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object into a buffer.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>A <see cref="T:System.Byte"/> array that is the serialized value of the key.</returns>
        </member>
        <member name="T:Couchbase.Core.Serialization.JsonNetCustomObjectCreatorWrapper">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> that wraps an <see cref="T:Couchbase.Core.Serialization.ICustomObjectCreator"/> to support Json.Net deserialization.
            </summary>
            <remarks>
            Used by <see cref="T:Couchbase.Core.Serialization.DefaultSerializer"/> if an <see cref="T:Couchbase.Core.Serialization.ICustomObjectCreator"/> is supplied.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.Serialization.SerializerFactory">
            <summary>
            A factory for creating <see cref="T:System.Func`1"/> factories.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Serialization.SerializerFactory.GetSerializer">
            <summary>
            Gets the <see cref="T:Couchbase.Core.Serialization.DefaultSerializer"/> serializer.
            </summary>
            <returns>A <see cref="T:System.Func`1"/> factory for creating <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/> objects.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.SerializerFactory.GetSerializer(System.String)">
            <summary>
            Gets the serializer.
            </summary>
            <param name="typeName">The name of the type implementing <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/>.</param>
            <returns>A <see cref="T:System.Func`1"/> factory for creating <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/> objects.</returns>
        </member>
        <member name="T:Couchbase.Core.Serialization.SupportedDeserializationOptions">
            <summary>
            Supplied by <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> to define which deserialization options it supports.
            </summary>
            <remarks>Intended to help support backwards compatibility as new deserialization options are added in the future.</remarks>
        </member>
        <member name="P:Couchbase.Core.Serialization.SupportedDeserializationOptions.CustomObjectCreator">
            <summary>
            If true, the <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> supports <see cref="P:Couchbase.Core.Serialization.DeserializationOptions.CustomObjectCreator"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Serialization.DeserializationOptions">
            <summary>
            Options to control deserialization process in an <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.DeserializationOptions.HasSettings">
            <summary>
            Returns true if any custom options are set
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.DeserializationOptions.CustomObjectCreator">
            <summary>
            <see cref="T:Couchbase.Core.Serialization.ICustomObjectCreator"/> to use when creating objects during deserialization.
            Null will uses the <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> defaults for type creation.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Lifespan">
            <summary>
            Represents the lifetime of an operation from creation to timeout.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Lifespan.CreationTime">
            <summary>
            Gets or sets the initial creation time of the operation.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="F:Couchbase.Core.Lifespan._timedOut">
            <summary>
            True if the operation has timed out.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Lifespan.Duration">
            <summary>
            Gets or sets the duration of operations lifespan; the interval between creation and timeout.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="M:Couchbase.Core.Lifespan.TimedOut">
            <summary>
            Checks if the operation has exceeded it's duration; if it has it is flagged as timedout.
            </summary>
            <returns>True if timed out</returns>
        </member>
        <member name="T:Couchbase.Core.LookupInBuilder`1">
            <summary>
            An implementation of <see cref="T:Couchbase.Core.ILookupInBuilder`1"/> that exposes a "builder" API for constructing a chain of read commands on a document within Couchbase.
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <seealso cref="T:Couchbase.Core.ILookupInBuilder`1" />
            <seealso cref="T:Couchbase.Core.Serialization.ITypeSerializerProvider" />
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.#ctor(Couchbase.Core.IO.SubDocument.ISubdocInvoker,System.Func{Couchbase.Core.Serialization.ITypeSerializer},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Core.LookupInBuilder`1"/> class.
            </summary>
            <param name="invoker">The invoker.</param>
            <param name="serializer">The serializer.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException"> invoker or serializer or key.
            </exception>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.#ctor(Couchbase.Core.IO.SubDocument.ISubdocInvoker,System.Func{Couchbase.Core.Serialization.ITypeSerializer},System.String,System.Collections.Generic.IEnumerable{Couchbase.Core.IO.SubDocument.OperationSpec})">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Core.LookupInBuilder`1"/> class.
            </summary>
            <param name="invoker">The invoker.</param>
            <param name="serializer">The serializer.</param>
            <param name="key">The key.</param>
            <param name="specs">The specs.</param>
        </member>
        <member name="P:Couchbase.Core.LookupInBuilder`1.Serializer">
            <summary>
            Gets the <see cref="T:Couchbase.Core.Serialization.ITypeSerializer" /> related to the object.
            </summary>
        </member>
        <member name="P:Couchbase.Core.LookupInBuilder`1.Key">
            <summary>
            Gets or sets the unique identifier for the document.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:Couchbase.Core.LookupInBuilder`1.Count">
            <summary>
            Returns a count of the currently chained operations.
            </summary>
            <returns>A <see cref="T:System.Int32"/> representing the number of chained commands.</returns>
        </member>
        <member name="P:Couchbase.Core.LookupInBuilder`1.ContainsXattrOperations">
            <summary>
            Gets a value indicating whether any of the pending commands target an XATTR.
            </summary>
            <value>
            <c>true</c> if any pending command targers an XATTR; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.Get(System.String)">
            <summary>
            Gets the value at a specified N1QL path.
            </summary>
            <param name="path">The path.</param>
            <returns>
            A <see cref="T:Couchbase.Core.ILookupInBuilder`1" /> implementation reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.Get(System.String,Couchbase.Core.SubdocLookupFlags)">
            <summary>
            Gets the value at a specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="flags">The Subdoc flags.</param>
            <returns>
            A <see cref="T:Couchbase.Core.ILookupInBuilder`1" /> implementation reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.Exists(System.String)">
            <summary>
            Checks for the existence of a given N1QL path.
            </summary>
            <param name="path">The path.</param>
            <returns>
            A <see cref="T:Couchbase.Core.ILookupInBuilder`1" /> implementation reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.Exists(System.String,Couchbase.Core.SubdocLookupFlags)">
            <summary>
            Checks for the existence of a given N1QL path.
            </summary>
            <param name="path">The path.</param>
            <param name="flags">The Subdoc flags.</param>
            <returns>
            A <see cref="T:Couchbase.Core.ILookupInBuilder`1" /> implementation reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.Execute">
            <summary>
            Executes the chained operations.
            </summary>
            <returns>
            A <see cref="T:Couchbase.IDocumentFragment`1" /> representing the results of the chained operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.ExecuteAsync">
            <summary>
            Executes the chained operations.
            </summary>
            <returns>
            A <see cref="T:Couchbase.IDocumentFragment`1" /> representing the results of the chained operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.System#Collections#Generic#IEnumerable{Couchbase#Core#IO#SubDocument#OperationSpec}#GetEnumerator">
            <summary>
            Gets the enumerator for enumerating the list of <see cref="T:Couchbase.Core.IO.SubDocument.OperationSpec"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.FirstSpec">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IO.SubDocument.OperationSpec"/> in the first position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Couchbase.Core.LookupInBuilder`1.Equals(Couchbase.Core.LookupInBuilder{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:Couchbase.Core.MutateInBuilder`1">
            <summary>
            Exposes the creation of a set of mutation operations to be performed.
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <seealso cref="T:Couchbase.Core.IMutateInBuilder`1" />
            <seealso cref="T:Couchbase.Core.Serialization.ITypeSerializerProvider" />
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.#ctor(Couchbase.Core.IO.SubDocument.ISubdocInvoker,System.Func{Couchbase.Core.Serialization.ITypeSerializer},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Core.MutateInBuilder`1"/> class.
            </summary>
            <param name="invoker">The invoker.</param>
            <param name="serializer">The serializer.</param>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">invoker or serializer or key
            </exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.#ctor(Couchbase.Core.IO.SubDocument.ISubdocInvoker,System.Func{Couchbase.Core.Serialization.ITypeSerializer},System.String,System.Collections.Generic.IEnumerable{Couchbase.Core.IO.SubDocument.OperationSpec})">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Core.LookupInBuilder`1"/> class.
            </summary>
            <param name="invoker">The invoker.</param>
            <param name="serializer">The serializer.</param>
            <param name="key">The key.</param>
            <param name="specs">The specs.</param>
        </member>
        <member name="P:Couchbase.Core.MutateInBuilder`1.Serializer">
            <summary>
            Gets the <see cref="T:Couchbase.Core.Serialization.ITypeSerializer" /> related to the object.
            </summary>
        </member>
        <member name="P:Couchbase.Core.MutateInBuilder`1.Key">
            <summary>
            The unique identifier for the document.
            </summary>
        </member>
        <member name="P:Couchbase.Core.MutateInBuilder`1.Cas">
            <summary>
            A "check-and-set" value for ensuring that a document has not been modified by another thread.
            </summary>
        </member>
        <member name="P:Couchbase.Core.MutateInBuilder`1.Expiry">
            <summary>
            The "time-to-live" or "TTL" that specifies the document's lifetime.
            </summary>
        </member>
        <member name="P:Couchbase.Core.MutateInBuilder`1.PersistTo">
            <summary>
            A durability constraint ensuring that a document has been persisted to the n^th node.
            </summary>
        </member>
        <member name="P:Couchbase.Core.MutateInBuilder`1.ReplicateTo">
            <summary>
            A durability constraint for ensuring that the document has been replicated to the n^th node.
            </summary>
        </member>
        <member name="P:Couchbase.Core.MutateInBuilder`1.Count">
            <summary>
            Returns a count of the currently chained operations.
            </summary>
            <value>A
              <see cref="T:System.Int32"/> representing the number of chained commands.</value>
        </member>
        <member name="P:Couchbase.Core.MutateInBuilder`1.ContainsXattrOperations">
            <summary>
            Gets a value indicating whether any of the pending commands target an XATTR.
            </summary>
            <value>
            <c>true</c> if any pending command targers an XATTR; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Insert(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts an element into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an Insert.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Insert(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Inserts an element into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.CreatePath"/>.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an Insert.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Upsert(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts or updates an element within or into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an Upsert.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Upsert(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Inserts or updates an element within or into a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.CreatePath"/>.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an Upsert.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Replace(System.String,System.Object)">
            <summary>
            Replaces an element or value within a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an Upsert.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Replace(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Replaces an element or value within a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.None"/>.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an Upsert.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Remove(System.String)">
            <summary>
            Removes an element or value from a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an Remove.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Remove(System.String,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Removes an element or value from a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.None"/>.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an Remove.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayAppend(System.Object,System.Boolean)">
            <summary>
            Inserts an array value into a JSON document at a given path.
            </summary>
            <param name="value">An array value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayAppend(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts a value to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An aray value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayAppend(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Inserts a value to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An aray value.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.CreatePath"/>.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayAppend(System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values at the end of an array in a JSON document at a given path.
            </summary>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayAppend(System.String,System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayAppend(System.String,Couchbase.Core.SubdocMutateFlags,System.Object[])">
            <summary>
            Inserts one or more values to the end of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.None"/>.</param>
            <param name="values">One or more values.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayPrepend(System.Object,System.Boolean)">
            <summary>
            Inserts a value to the beginning of an array that is the root of a JSON document.
            </summary>
            <param name="value">An array value, dictionary entry, scalar or any other valid JSON item.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayPrepend(System.String,System.Object,System.Boolean)">
            <summary>
            Inserts a value to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayPrepend(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Inserts a value to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">An array value.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.CreatePath"/>.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayPrepend(System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values to the beginning of an array that is the root of a JSON document.
            </summary>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>An <see cref="T:Couchbase.Core.IMutateInBuilder`1"/> reference for chaining operations.</returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayPrepend(System.String,System.Boolean,System.Object[])">
            <summary>
            Inserts one or more values to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <param name="values">One or more values.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayPrepend(System.String,Couchbase.Core.SubdocMutateFlags,System.Object[])">
            <summary>
            Inserts one or more values to the beginning of an array in a JSON document at a given path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.None"/>.</param>
            <param name="values">One or more values.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayInsert(System.String,System.Object)">
            <summary>
            Inserts a value at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A value.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an ArrayInsert.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayInsert(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Inserts a value at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A value.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.None"/>.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an ArrayInsert.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayInsert(System.String,System.Object[])">
            <summary>
            Inserts one or more values at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="values">One or more values.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an ArrayInsert.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayInsert(System.String,Couchbase.Core.SubdocMutateFlags,System.Object[])">
            <summary>
            Inserts one or more values at a given position within an array. The position is indicated as part of the path.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="values">One or more values.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.None"/>.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for an ArrayInsert.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayAddUnique(System.Object,System.Boolean)">
            <summary>
            Adds a value to an array if the value does not already exist in the array.
            </summary>
            <param name="value">A unique value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayAddUnique(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a value to an array if the value does not already exist in the array.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A unique value.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ArrayAddUnique(System.String,System.Object,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Adds a value to an array if the value does not already exist in the array.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="value">A unique value.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.CreatePath"/>.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Counter(System.String,System.Int64,System.Boolean)">
            <summary>
            Performs an arithmetic operation on a numeric value in a document.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="delta">The value to increment or decrement the original value by.</param>
            <param name="createParents">If <s>true</s>, the parent will be added to the document. The default is false.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for a Counter.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Counter(System.String,System.Int64,Couchbase.Core.SubdocMutateFlags)">
            <summary>
            Performs an arithmetic operation on a numeric value in a document.
            </summary>
            <param name="path">A string (N1QL syntax) used to specify a location within the document.</param>
            <param name="delta">The value to increment or decrement the original value by.</param>
            <param name="flags">The subdocument flags. Defaults to <see cref="F:SubdocLookupFlags.CreatePath"/>.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <exception cref="T:System.ArgumentException">Path cannot be empty for a Counter.</exception>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.WithExpiry(System.TimeSpan)">
            <summary>
            Applies an expiration to a document.
            </summary>
            <param name="expiry">The "time-to-live" or TTL of the document.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.WithCas(System.Int64)">
            <summary>
            A "check-and-set" value for ensuring that a document has not been modified by another thread.
            </summary>
            <param name="cas">The CAS value.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
            <remarks>Be aware that <see cref="T:System.Int64"/> will be internally cast to a <see cref="T:System.UInt64"/>.</remarks>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.WithCas(System.UInt64)">
            <summary>
            A "check-and-set" value for ensuring that a document has not been modified by another thread.
            </summary>
            <param name="cas">The CAS value.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.WithDurability(Couchbase.PersistTo)">
            <summary>
            A durability constraint ensuring that a document has been persisted to the n^th node.
            </summary>
            <param name="persistTo">The <see cref="P:Couchbase.Core.IMutateInBuilder`1.PersistTo" /> value.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.WithDurability(Couchbase.ReplicateTo)">
            <summary>
            A durability constraint ensuring that a document has been persisted to the n^th node.
            </summary>
            <param name="replicateTo">The <see cref="P:Couchbase.Core.IMutateInBuilder`1.ReplicateTo" /> value.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.WithDurability(Couchbase.PersistTo,Couchbase.ReplicateTo)">
            <summary>
            Sets the <see cref="P:Couchbase.Core.IMutateInBuilder`1.ReplicateTo" /> and <see cref="P:Couchbase.Core.IMutateInBuilder`1.PersistTo" /> values for a document.
            </summary>
            <param name="persistTo">The <see cref="P:Couchbase.Core.IMutateInBuilder`1.PersistTo" /> value.</param>
            <param name="replicateTo">The <see cref="P:Couchbase.Core.IMutateInBuilder`1.ReplicateTo" /> value.</param>
            <returns>
            An <see cref="T:Couchbase.Core.IMutateInBuilder`1" /> reference for chaining operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Execute">
            <summary>
            Executes the chained operations.
            </summary>
            <returns>
            A <see cref="T:Couchbase.IDocumentFragment`1" /> representing the results of the chained operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.ExecuteAsync">
            <summary>
            Executes the chained operations.
            </summary>
            <returns>
            A <see cref="T:Couchbase.IDocumentFragment`1" /> representing the results of the chained operations.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.System#Collections#Generic#IEnumerable{Couchbase#Core#IO#SubDocument#OperationSpec}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Couchbase.Core.MutateInBuilder`1.Equals(Couchbase.Core.MutateInBuilder{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:Couchbase.Core.NodeAdapterExtensions">
            <summary>
            Provides helper methods for workng with NodeAdapter's
            </summary>
        </member>
        <member name="M:Couchbase.Core.NodeAdapterExtensions.AreEqual(System.Collections.Generic.IList{Couchbase.Core.INodeAdapter},System.Collections.Generic.IList{Couchbase.Core.INodeAdapter})">
            <summary>
            Compares two <see cref="T:System.Collections.Generic.IList`1"/> instances for equality by comparing the <see cref="P:Couchbase.Core.INodeAdapter.Hostname"/> for each item in the list.
            </summary>
            <param name="nodes">The nodes to compare.</param>
            <param name="other">The other to nodes for comparison.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.SubdocLookupFlags">
            <summary>
            Flags for Subdoc lookup operations.
            </summary>
        </member>
        <member name="F:Couchbase.Core.SubdocLookupFlags.None">
            <summary>
            No subdoc flags have been specified.
            </summary>
        </member>
        <member name="F:Couchbase.Core.SubdocLookupFlags.AttributePath">
            <summary>
            Path refers to a location within the document’s attributes section.
            </summary>
        </member>
        <member name="F:Couchbase.Core.SubdocLookupFlags.AccessDeleted">
            <summary>
            Allows access to a deleted document's attributes section. Infers <see cref="F:SubdocLookupFlags.AttributePath"/>.
            Only for internal diagnostic use only and is an unsupported feature.
            </summary>
        </member>
        <member name="T:Couchbase.Core.SubdocMutateFlags">
            <summary>
            Flags for Subdoc mutate operations.
            </summary>
        </member>
        <member name="F:Couchbase.Core.SubdocMutateFlags.None">
            <summary>
            No subdoc flags have been specified.
            </summary>
        </member>
        <member name="F:Couchbase.Core.SubdocMutateFlags.CreatePath">
            <summary>
            Creates path if it does not exist.
            </summary>
        </member>
        <member name="F:Couchbase.Core.SubdocMutateFlags.CreateDocument">
            <summary>
            Creates the document if it does not exist.
            </summary>
        </member>
        <member name="F:Couchbase.Core.SubdocMutateFlags.AttributePath">
            <summary>
            Path refers to a location within the document’s attributes section.
            </summary>
        </member>
        <member name="F:Couchbase.Core.SubdocMutateFlags.ExpandMacro">
            <summary>
            Indicates that the server should expand any macros before storing the value. Infers <see cref="F:SubdocMutateFlags.AttributePath"/>.
            Only for internal diagnostic use only and is an unsupported feature.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.TimingLevel.None">
            <summary>
            Disabled - no timing information will be logged
            </summary>
        </member>
        <member name="M:Couchbase.Core.INodeAdapter.GetIPEndPoint">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint"/> for the KV port for this node.
            </summary>
            <returns>An <see cref="T:System.Net.IPEndPoint"/> with the KV port.</returns>
        </member>
        <member name="M:Couchbase.Core.INodeAdapter.GetIPEndPoint(System.Boolean)">
            <summary>
            Gets the ip end point.
            </summary>
            <param name="useSsl">if set to <c>true</c> use SSL/TLS.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.INodeAdapter.GetIPEndPoint(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint"/> for the KV port for this node.
            </summary>
            <param name="port">The port for the <see cref="T:System.Net.IPEndPoint"/></param>
            <returns>An <see cref="T:System.Net.IPEndPoint"/> with the port passed in.</returns>
        </member>
        <member name="M:Couchbase.Core.INodeAdapter.GetIPAddress">
            <summary>
            Gets the <see cref="T:System.Net.IPAddress"/> for this node.
            </summary>
            <returns>An <see cref="T:System.Net.IPAddress"/> for this node.</returns>
        </member>
        <member name="P:Couchbase.Core.INodeAdapter.IsDataNode">
            <summary>
            Gets a value indicating whether this instance is data node which supports K/V and Views.
            </summary>
            <value>
            	<c>true</c> if this instance is data node ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.INodeAdapter.IsIndexNode">
            <summary>
            Gets a value indicating whether this instance is index node.
            </summary>
            <value>
            	<c>true</c> if this instance is index node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.INodeAdapter.IsQueryNode">
            <summary>
            Gets a value indicating whether this instance is query node supports N1QL.
            </summary>
            <value>
            	<c>true</c> if this instance is query node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.INodeAdapter.IsSearchNode">
            <summary>
            Gets a value indicating whether this instance is search node.
            </summary>
            <value>
            <c>true</c> if this instance is search node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.INodeAdapter.IsAnalyticsNode">
            <summary>
            Gets a value indicating whether this instance is an analytics node.
            </summary>
            <value>
            <c>true</c> if this instance is analytics node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.Core.NodeAdapter.GetIPEndPoint">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint" /> for the KV port for this node.
            </summary>
            <returns>
            An <see cref="T:System.Net.IPEndPoint" /> with the KV port.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.NodeAdapter.GetIPEndPoint(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint" /> for the KV port for this node.
            </summary>
            <param name="port">The port for the <see cref="T:System.Net.IPEndPoint" /></param>
            <returns>
            An <see cref="T:System.Net.IPEndPoint" /> with the port passed in.
            </returns>
        </member>
        <member name="M:Couchbase.Core.NodeAdapter.GetIPAddress">
            <summary>
            Gets the <see cref="T:System.Net.IPAddress" /> for this node.
            </summary>
            <returns>
            An <see cref="T:System.Net.IPAddress" /> for this node.
            </returns>
        </member>
        <member name="M:Couchbase.Core.NodeAdapter.GetIPEndPoint(System.Boolean)">
            <summary>
            Gets the ip end point.
            </summary>
            <param name="useSsl">if set to <c>true</c> use SSL/TLS.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.NodeAdapter.IsDataNode">
            <summary>
            Gets a value indicating whether this instance is data node.
            </summary>
            <value>
            	<c>true</c> if this instance is data node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.NodeAdapter.IsIndexNode">
            <summary>
            Gets a value indicating whether this instance is index node.
            </summary>
            <value>
            	<c>true</c> if this instance is index node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.NodeAdapter.IsQueryNode">
            <summary>
            Gets a value indicating whether this instance is query node.
            </summary>
            <value>
            	<c>true</c> if this instance is query node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.NodeAdapter.IsSearchNode">
            <summary>
            Gets a value indicating whether this instance is search node.
            </summary>
            <value>
            <c>true</c> if this instance is search node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.NodeAdapter.IsAnalyticsNode">
            <summary>
            Gets a value indicating whether this instance is an analytics node.
            </summary>
            <value>
            <c>true</c> if this instance is analytics node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Couchbase.Core.NodeUnavailableException">
            <summary>
            Thrown if a node in the cluster is not online to service a pending request.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Services.ServiceNotSupportedException">
            <summary>
            Thrown when an application makes a request (query, view, data) on a cluster for which the service has not been configured.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Transcoders.ITypeTranscoder">
            <summary>
            An interface for providing transcoder implementations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Transcoders.ITypeTranscoder.GetFormat``1(``0)">
            <summary>
            Get data formatting based on the generic type and/or the actual value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be formatted.</param>
            <returns>Flags used to format value written to operation payload.</returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.ITypeTranscoder.Encode``1(``0,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value of the key to encode.</param>
            <param name="flags">The flags used for decoding the response.</param>
            <param name="opcode"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.ITypeTranscoder.Decode``1(System.ArraySegment{System.Byte},System.Int32,System.Int32,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer representing the value of the key to decode.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="length">The length to read from the buffer.</param>
            <param name="flags">The flags used to encode the payload.</param>
            <param name="opcode"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.ITypeTranscoder.Decode``1(System.Byte[],System.Int32,System.Int32,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="flags">The flags used for decoding the payload.</param>
            <param name="opcode"></param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.Transcoders.ITypeTranscoder.Serializer">
            <summary>
            Gets or sets the serializer used by the <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> implementation.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Transcoders.ITypeTranscoder.Converter">
            <summary>
            Gets or sets the byte converter used by used by the <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> implementation.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Transcoders.DefaultTranscoder">
            <summary>
            Provides the default implementation for <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> interface.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Transcoders.DefaultTranscoder.Serializer">
            <summary>
            Gets or sets the serializer used by the <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder" /> implementation.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Transcoders.DefaultTranscoder.Converter">
            <summary>
            Gets or sets the byte converter used by used by the <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder" /> implementation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.Encode``1(``0,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value of the key to encode.</param>
            <param name="flags">The flags used for decoding the response.</param>
            <param name="opcode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.Encode``1(``0,System.TypeCode,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="typeCode">Type to use for encoding</param>
            <param name="opcode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.Decode``1(System.Byte[],System.Int32,System.Int32,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="flags">The flags used for decoding the payload.</param>
            <param name="opcode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.Decode``1(System.Byte[],System.Int32,System.Int32,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.DeserializeAsJson``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deserializes as json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.Decode``1(System.ArraySegment{System.Byte},System.Int32,System.Int32,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer representing the value of the key to decode.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="length">The length to read from the buffer.</param>
            <param name="flags">The flags used to encode the payload.</param>
            <param name="opcode"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.SerializeAsJson(System.Object)">
            <summary>
            Serializes as json.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.DecodeString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes the specified buffer as string.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.DecodeChar(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes the specified buffer as char.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.DecodeBinary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes the binary.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.Transcoders.TranscoderFactory">
            <summary>
            A factory for creating <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> functories.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Transcoders.TranscoderFactory.GetTranscoder(Couchbase.Configuration.Client.ClientConfiguration)">
            <summary>
            Gets a Func for creating <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> transcoders.
            </summary>
            <param name="config">The current <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>.</param>
            <returns>A <see cref="T:System.Func`1"/> for creating <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/>s.</returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.TranscoderFactory.GetTranscoder(Couchbase.Configuration.Client.ClientConfiguration,System.String)">
            <summary>
            Gets a Func for creating <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> transcoders.
            </summary>
            <param name="config">The current <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>.</param>
            <param name="typeName">The name of the type implementing <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/>.</param>
            <returns>A <see cref="T:System.Func`1"/> for creating <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/>s.</returns>
        </member>
        <member name="T:Couchbase.Core.DocumentMutationLostException">
            <summary>
             The observed document was lost during a hard failover, because the document did not reach the replica in time.
            </summary>
        </member>
        <member name="T:Couchbase.Core.ReplicaNotConfiguredException">
            <summary>
            This exception is thrown when the given operation targeting a specific replica is not fulfillable because the
            replica is not configured (for example replica 2 is asked for, but only 1 is configured).
            </summary>
        </member>
        <member name="M:Couchbase.Core.ClusterController.GetBucket(Couchbase.Authentication.IClusterCredentials)">
            <summary>
            Gets the first <see cref="T:Couchbase.CouchbaseBucket"/> instance found./>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.ClusterController.Info">
            <summary>
            Retrieve Information for this cluster, see <see cref="P:Couchbase.Core.ICluster.Info">ICluster.Info</see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.ClusterController.IsObserving(System.String)">
            <summary>
            Returns a boolean indicating whether or not the bucket has been opened with this cluster instance.
            </summary>
            <param name="bucketName">The name of the bucket.</param>
            <returns>True if the bucket exists</returns>
        </member>
        <member name="M:Couchbase.Core.IClusterController.GetBucket(Couchbase.Authentication.IClusterCredentials)">
            <summary>
            Gets the first <see cref="T:Couchbase.CouchbaseBucket"/> instance found./>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.InitializationException">
            <summary>
            Thrown if Couchbase.Cluster.Initialize() is not called before calling Couchbase.Cluster.Get()
            </summary>
        </member>
        <member name="T:Couchbase.Core.FeatureNotAvailableException">
            <summary>
            Thrown when an application makes a subdoc request targeting an XAttribute when the cluster does not support it.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IBucket">
            <summary>
            Represents a Couchbase Bucket object for performing CRUD operations on Documents and Key/Value pairs, View
            queries, and executing N1QL queries.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IBucket.Name">
            <summary>
            The name of the Couchbase Bucket. This is visible from the Couchbase Server Management Console.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IBucket.BucketType">
            <summary>
            Returns type of the bucket (either Couchbase or Memcached)
            </summary>
        </member>
        <member name="P:Couchbase.Core.IBucket.Cluster">
            <summary>
            Returns the <see cref="T:Couchbase.Core.ICluster"/> that this bucket belongs to
            </summary>
        </member>
        <member name="M:Couchbase.Core.IBucket.Exists(System.String)">
            <summary>
            Checks for the existance of a given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key exists.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ExistsAsync(System.String)">
            <summary>
            Checks for the existance of a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to check.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ObserveAsync(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs 'observe' on a given key to ensure that it's durability requirements with respect to persistence and replication are satisfied asynchronously.
            </summary>
            <param name="key">The key to 'observe'.</param>
            <param name="cas">The 'Check and Set' or CAS value for the key.</param>
            <param name="deletion">True if the operation performed is a 'remove' operation.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> value indicating if the durability requirement were or were not met.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs 'observe' on a given key to ensure that it's durability requirements with respect to persistence and replication are satisfied.
            </summary>
            <param name="key">The key to 'observe'.</param>
            <param name="cas">The 'Check and Set' or CAS value for the key.</param>
            <param name="deletion">True if the operation performed is a 'remove' operation.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An <see cref="T:Couchbase.IO.Operations.ObserveResponse"/> value indicating if the durability requirement were or were not met.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Upserts a list of <see cref="T:Couchbase.IDocument`1"/> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> list.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Upserts a list of <see cref="T:Couchbase.IDocument`1"/> into a bucket asynchronously..
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <param name="replicateTo"></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> list.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts a list of <see cref="T:Couchbase.IDocument`1"/> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> list.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Replaces a list of <see cref="T:Couchbase.IDocument`1"/> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> list.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Replaces a list of <see cref="T:Couchbase.IDocument`1"/> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <param name="replicateTo"></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> list.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a list of <see cref="T:Couchbase.IDocument`1"/> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> list.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Inserts a list of JSON documents asynchronously, each document failing if it already exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Inserts a list of JSON documents asynchronously, each document failing if it already exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a list of JSON documents asynchronously, each document failing if it already exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Removes a list of <see cref="T:Couchbase.IDocument"/> from  the bucket asynchronously.
            </summary>
            <typeparam name="T">The type T of the document.</typeparam>
            <param name="documents">The documents.</param>
            <returns>A list of <see cref="T:System.Threading.Tasks.Task`1"/> objects representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Removes a list of <see cref="T:Couchbase.IDocument"/> from  the bucket asynchronously.
            </summary>
            <typeparam name="T">The type T of the document.</typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <returns>A list of <see cref="T:System.Threading.Tasks.Task`1"/> objects representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a list of <see cref="T:Couchbase.IDocument"/> from  the bucket asynchronously.
            </summary>
            <typeparam name="T">The type T of the document.</typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>A list of <see cref="T:System.Threading.Tasks.Task`1"/> objects representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String)">
            <summary>
            Asynchronously removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Touch(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with no value.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.TouchAsync(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndTouch``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the key's value.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndTouchAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndTouchDocument``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> with the key's document.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndTouchDocumentAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetDocument``1(System.String)">
            <summary>
            Gets a document by it's given id.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> object containing the document if it's found and any other operation specific info.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetDocumentAsync``1(System.String)">
            <summary>
            Gets a document by it's given id as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetDocumentsAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of documents by their given id as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="ids">The documents primary keys.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> array representing the asynchronous operation results.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Get``1(System.String)">
            <summary>
            Gets value for a given key
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="key">The key to use as a lookup.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAsync``1(System.String)">
            <summary>
            Gets a Task that can be awaited on for a given Key and value as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value object to be retrieved.</typeparam>
            <param name="key">The unique Key to use to lookup the value.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetFromReplica``1(System.String)">
            <summary>
            Returns a value for a
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetFromReplicaAsync``1(System.String)">
            <summary>
            Gets a value for key and checks it's replicas as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Get``1(System.Collections.Generic.IList{System.String})">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetWithLock``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the value.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndLock``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the value.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetWithLockAsync``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndLockAsync``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetWithLock``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the value.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndLock``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the value.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetWithLockAsync``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndLockAsync``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Unlock(System.String,System.UInt64)">
            <summary>
            Unlocks a key that was locked with <see cref="M:Couchbase.Core.IBucket.GetAndLock``1(System.String,System.UInt32)"/>.
            </summary>
            <param name="key">The key of the document to unlock.</param>
            <param name="cas">The 'check and set' value to use as a comparison</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UnlockAsync(System.String,System.UInt64)">
            <summary>
            Unlocks a key that was locked with <see cref="M:Couchbase.Core.IBucket.GetAndLockAsync``1(System.String,System.UInt32)"/> as an asynchronous operation.
            </summary>
            <param name="key">The key of the document to unlock.</param>
            <param name="cas">The 'check and set' value to use as a comparison</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Increment(System.String)">
            <summary>
            Increments the value of a key by one. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.IncrementAsync(System.String)">
            <summary>
            Increments the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created.
            and seeded with 1.
            </summary>
            <param name="key"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>/// <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Increment(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.IncrementAsync(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Increment(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.IncrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Increment(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Increment(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Decrement(System.String)">
            <summary>
            Decrements the value of a key by one. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.DecrementAsync(System.String)">
            <summary>
            Decrements the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Decrement(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.DecrementAsync(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Decrement(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.DecrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Decrement(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Decrement(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Append(System.String,System.String)">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.AppendAsync(System.String,System.String)">
            <summary>
            Appends a value to a give key as an asynchronous operation.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Append(System.String,System.Byte[])">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.AppendAsync(System.String,System.Byte[])">
            <summary>
            Appends a value to a give key as an asynchronous operation.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Prepend(System.String,System.String)">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.PrependAsync(System.String,System.String)">
            <summary>
            Prepends a value to a give key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Prepend(System.String,System.Byte[])">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.PrependAsync(System.String,System.Byte[])">
            <summary>
            Prepends a value to a give key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Query``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a View query and returns the result.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> used to generate the results.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.Views.IViewResult{T}"/> Type with the results of the query.</returns>
            <remarks>Use one of the IBucket.CreateQuery overloads to generate the query.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueryAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Asynchronously Executes a View query and returns the result.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> used to generate the results.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> with the T a <see cref="T:Couchbase.Views.IViewResult`1"/> instance.</returns>
            <remarks>Note this implementation is experimental and subject to change in future release!</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Query``1(System.String)">
            <summary>
            Executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueryAsync``1(System.String)">
            <summary>
            Asynchronously executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> with the T a <see cref="T:Couchbase.N1QL.IQueryResult`1"/> instance.</returns>
            <remarks>Note this implementation is uncommitted/experimental and subject to change in future release!</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Query``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Asynchronously executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueryAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Query``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Executes an Analytics statemnt via a <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> against the Couchbase cluster.
            </summary>
            <typeparam name="T">The type to deserialize the results to.</typeparam>
            <param name="analyticsRequest">A <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> that contains the statement to be executed.</param>
            <returns>An instance of <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> with the result of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueryAsync``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Asynchronously executes an Analytics statemnt via a <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> against the Couchbase cluster.
            </summary>
            <typeparam name="T">The type to deserialize the results to.</typeparam>
            <param name="analyticsRequest">A <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> that contains the statement to be executed.</param>
            <returns>An instance of <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> with the result of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueryAsync``1(Couchbase.Analytics.IAnalyticsRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an Analytics statemnt via a <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> against the Couchbase cluster.
            </summary>
            <typeparam name="T">The type to deserialize the results to.</typeparam>
            <param name="analyticsRequest">A <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> that contains the statement to be executed.</param>
            <param name="cancellationToken">A cancellation token that can be used to stop the query being executed.</param>
            <returns>An instance of <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> with the result of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.CreateQuery(System.String,System.String)">
            <summary>
            Creates an instance of an object that implements <see cref="T:Couchbase.Views.IViewQuery"/>, which targets a given bucket, design document and a published view.
            </summary>
            <param name="designDoc"></param>
            <param name="view"></param>
            <returns>An <see cref="T:Couchbase.Views.IViewQuery"/> which can have more filters and options applied to it.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.CreateQuery(System.String,System.String,System.Boolean)">
            <summary>
            Creates an instance of an object that implements <see cref="T:Couchbase.Views.IViewQuery"/>, which targets a given bucket and design document.
            </summary>
            <param name="designdoc">The design document that the View belongs to.</param>
            <param name="view">The View to query.</param>
            <param name="development">True will execute on the development dataset.</param>
            <returns>An <see cref="T:Couchbase.Views.ViewQuery"/> which can have more filters and options applied to it.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.CreateManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IBucketManager"/> instance for managing buckets.
            </summary>
            <param name="username">The administrators username</param>
            <param name="password">The administrators username</param>
            <returns>A <see cref="T:Couchbase.Management.IBucketManager"/> instance.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.CreateManager">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IBucketManager"/> instance for managing buckets using the <see cref="T:Couchbase.Authentication.IClusterCredentials"/> for authentication.
            </summary>
            <returns>A <see cref="T:Couchbase.Management.IBucketManager"/> instance.</returns>
        </member>
        <member name="P:Couchbase.Core.IBucket.IsSecure">
            <summary>
            Returns true if bucket is using SSL encryption between the client and the server.
            </summary>
            <remarks>If the server is not available (<see cref="T:Couchbase.ServerUnavailableException"/>), will default to false.</remarks>
        </member>
        <member name="P:Couchbase.Core.IBucket.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether enhanced durability is enabled.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability and it is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IBucket.Configuration">
            <summary>
            Gets the configuration for the bucket
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="M:Couchbase.Core.IBucket.MapGet``1(System.String,System.String)">
            <summary>
            Gets the value for a given key from a hashmap within a JSON document.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <returns>The value as <see cref="T:Couchbase.IResult`1"/></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.MapRemove(System.String,System.String)">
            <summary>
            Removes the value for a given key from a hashmap within a JSON document.
            </summary>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.MapSize(System.String)">
            <summary>
            Gets the size of a hashmap within a JSON document.
            </summary>
            <param name="key">The key.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.MapAdd(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a key/value pair to a JSON hashmap document.
            </summary>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <param name="value">The value.</param>
            <param name="createMap">If set to <c>true</c> create document.</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListGet``1(System.String,System.Int32)">
            <summary>
            Returns the value at a given index assuming a JSON array.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <returns>The value as <see cref="T:Couchbase.IResult`1"/></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListAppend(System.String,System.Object,System.Boolean)">
            <summary>
            Appends a value to the back of a JSON array within a document.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createList">If set to <c>true</c> [create list].</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListPrepend(System.String,System.Object,System.Boolean)">
            <summary>
            Prepends a value to the front of a JSON array within a document.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createList">If set to <c>true</c> [create list].</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListRemove(System.String,System.Int32)">
            <summary>
            Removes a value at a given index with a JSON document.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListSet(System.String,System.Int32,System.String)">
            <summary>
            Adds a value to an array within a JSON document at a given index.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListSize(System.String)">
            <summary>
            Gets the size of an array within a JSON document.
            </summary>
            <param name="key">The key.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.SetAdd(System.String,System.String,System.Boolean)">
            <summary>
            Adds a value to a set within a JSON array within a document.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createSet">If set to <c>true</c> [create set].</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.SetContains(System.String,System.String)">
            <summary>
            Checks if a set contains a given value within a JSON document.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.SetSize(System.String)">
            <summary>
            Gets the size of a set within a JSON document.
            </summary>
            <param name="key">The key.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.SetRemove``1(System.String,``0)">
            <summary>
            Removes a value from a set withing a JSON document.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueuePush``1(System.String,``0,System.Boolean)">
            <summary>
            Adds a value to the end of a queue stored in a JSON document.
            </summary>
            <typeparam name="T">The Type of the value being added to the queue</typeparam>
            <param name="key">The key for the document.</param>
            <param name="value">The value that is to be added to the queue.</param>
            <param name="createQueue">If <c>true</c> then the document will be created if it doesn't exist</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueuePop``1(System.String)">
            <summary>
            Removes a value from the front of a queue stored in a JSON document.
            </summary>
            <typeparam name="T">The type of the value being retrieved.</typeparam>
            <param name="key">The key for the queue.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueueSize(System.String)">
            <summary>
            Returns the number of items in the queue stored in the JSON document.
            </summary>
            <param name="key">The key for the document.</param>
            <returns>An <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.MapGetAsync``1(System.String,System.String)">
            <summary>
            Gets the value for a given key from a hashmap within a JSON document asynchronously.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <returns>The value as <see cref="T:Couchbase.IResult`1"/></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.MapRemoveAsync(System.String,System.String)">
            <summary>
            Removes the value for a given key from a hashmap within a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.MapSizeAsync(System.String)">
            <summary>
            Gets the size of a hashmap within a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.MapAddAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a key/value pair to a JSON hashmap document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <param name="value">The value.</param>
            <param name="createMap">If set to <c>true</c> create document.</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListGetAsync``1(System.String,System.Int32)">
            <summary>
            Returns the value at a given index assuming a JSON array asynchronously.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <returns>The value as <see cref="T:Couchbase.IResult`1"/></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListAppendAsync(System.String,System.Object,System.Boolean)">
            <summary>
            Appends a value to the back of a JSON array within a document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createList">If set to <c>true</c> [create list].</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListPrependAsync(System.String,System.Object,System.Boolean)">
            <summary>
            Prepends a value to the front of a JSON array within a document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createList">If set to <c>true</c> [create list].</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListRemoveAsync(System.String,System.Int32)">
            <summary>
            Removes a value at a given index with a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListSetAsync(System.String,System.Int32,System.String)">
            <summary>
            Adds a value to an array within a JSON document at a given index asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ListSizeAsync(System.String)">
            <summary>
            Gets the size of an array within a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.SetAddAsync(System.String,System.String,System.Boolean)">
            <summary>
            Adds a value to a set within a JSON array within a document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createSet">If set to <c>true</c> [create set].</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.SetContainsAsync(System.String,System.String)">
            <summary>
            Checks if a set contains a given value within a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.SetSizeAsync(System.String)">
            <summary>
            Gets the size of a set within a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.SetRemoveAsync``1(System.String,``0)">
            <summary>
            Removes a value from a set withing a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Couchbase.IResult"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueuePushAsync``1(System.String,``0,System.Boolean)">
            <summary>
            Adds a value to the end of a queue stored in a JSON document asynchronously.
            </summary>
            <typeparam name="T">The Type of the value being added to the queue</typeparam>
            <param name="key">The key for the document.</param>
            <param name="value">The value that is to be added to the queue.</param>
            <param name="createQueue">If <c>true</c> then the document will be created if it doesn't exist</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueuePopAsync``1(System.String)">
            <summary>
            Removes a value from the front of a queue stored in a JSON document asynchronously.
            </summary>
            <typeparam name="T">The type of the value being retrieved.</typeparam>
            <param name="key">The key for the queue.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueueSizeAsync(System.String)">
            <summary>
            Returns the number of items in the queue stored in the JSON document asynchronously.
            </summary>
            <param name="key">The key for the document.</param>
        </member>
        <member name="T:Couchbase.Core.ICluster">
            <summary>
            The client interface to a Couchbase Server Cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ICluster.OpenBucket">
            <summary>
            Opens a Couchbase Bucket instance.
            </summary>
            <returns>The default bucket for a Couchbase Cluster.</returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.OpenBucket(System.String,System.String)">
            <summary>
            Opens a Couchbase Bucket instance.
            </summary>
            <param name="bucketname">The name of the bucket to open.</param>
            <param name="password">The password to use if it's a SASL authenticated bucket.</param>
            <returns>A object that implements IBucket.</returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.OpenBucket(System.String)">
            <summary>
            Opens a Couchbase Bucket instance.
            </summary>
            <param name="bucketname">The name of the bucket to open.</param>
            <returns>A object that implements IBucket.</returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.CloseBucket(Couchbase.Core.IBucket)">
            <summary>
            Closes a Couchbase Bucket Instance.
            </summary>
            <param name="bucket">The object that implements IBucket that will be closed.</param>
        </member>
        <member name="M:Couchbase.Core.ICluster.CreateManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IClusterManager"/> object that uses the current <see cref="T:Couchbase.Core.ICluster"/> configuration settings.
            </summary>
            <returns>A <see cref="T:Couchbase.Management.IClusterManager"/> instance that uses the current <see cref="T:Couchbase.Core.ICluster"/> configuration settings. </returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.CreateManager">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IClusterManager"/> object that uses the current <see cref="T:Couchbase.Core.ICluster"/> configuration settings.
            </summary>
            <returns>A <see cref="T:Couchbase.Management.IClusterManager"/> instance that uses the current <see cref="T:Couchbase.Core.ICluster"/> configuration settings
            and <see cref="T:Couchbase.Authentication.IClusterCredentials"/> for authentication. </returns>
        </member>
        <member name="P:Couchbase.Core.ICluster.Info">
            <summary>
            Returns an object which implements IClusterInfo. This object contains various server
            stats and information.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ICluster.IsOpen(System.String)">
            <summary>
            Returns a response indicating whether or not the <see cref="T:Couchbase.Core.IBucket"/> instance has been opened and this <see cref="T:Couchbase.Cluster"/> instance is observing it.
            </summary>
            <param name="bucketName">The name of the bucket to check.</param>
            <returns>True if the <see cref="T:Couchbase.Core.IBucket"/> has been opened and the cluster is registered as an observer.</returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.Authenticate(Couchbase.Authentication.IClusterCredentials)">
            <summary>
            Authenticates the specified credentials.
            </summary>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:Couchbase.Core.ICluster.Query``1(System.String)">
            <summary>
            Executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.QueryAsync``1(System.String)">
            <summary>
            Asynchronously executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> with the T a <see cref="T:Couchbase.N1QL.IQueryResult`1"/> instance.</returns>
            <remarks>Note this implementation is uncommitted/experimental and subject to change in future release!</remarks>
        </member>
        <member name="M:Couchbase.Core.ICluster.Query``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Asynchronously executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="T:Couchbase.Core.IClusterInfo">
            <summary>
            Client interface for getting information about the cluster.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IServer">
            <summary>
            Represents a Couchbase Server node on the network.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IServer.IsMgmtNode">
            <summary>
            Gets a value indicating whether this instance is MGMT node.
            </summary>
            <value>
            <c>true</c> if this instance is MGMT node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.IsQueryNode">
            <summary>
            Gets a value indicating whether this instance is query node.
            </summary>
            <value>
            <c>true</c> if this instance is query node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.IsDataNode">
            <summary>
            Gets a value indicating whether this instance is data node.
            </summary>
            <value>
            <c>true</c> if this instance is data node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.IsIndexNode">
            <summary>
            Gets a value indicating whether this instance is index node.
            </summary>
            <value>
            <c>true</c> if this instance is index node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.IsViewNode">
            <summary>
            Gets a value indicating whether this instance is view node.
            </summary>
            <value>
            <c>true</c> if this instance is view node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.IsSearchNode">
            <summary>
            Gets a value indicating whether this instance is an FTS node.
            </summary>
            <value>
            <c>true</c> if this instance is search node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.SearchClient">
            <summary>
            Gets the <see cref="T:Couchbase.Search.ISearchClient"/> for this node if <see cref="P:Couchbase.Core.IServer.IsSearchNode"/> is <c>true</c>.
            </summary>
            <value>
            The search client.
            </value>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync(Couchbase.Search.SearchQuery)">
            <summary>
            Sends a <see cref="T:Couchbase.Search.IFtsQuery"/>  request to a Couchbase node that has FTS service configured asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the response from the FTS service.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.Send(Couchbase.Search.SearchQuery)">
            <summary>
            Sends a <see cref="T:Couchbase.Search.IFtsQuery"/>  request to a Couchbase node that has FTS service configured asynchronously.
            </summary>
            <returns>A <see cref="T:Couchbase.Search.ISearchQueryResult"/> representing the response from the FTS service.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a key/value operation that contains no body to it's mapped server asynchronously.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a key/value operation to it's mapped server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.Send``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a key/value operation that contains a body to it's mapped server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.Send(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a key/value operation that contains no body to it's mapped server.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> representing the result of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.Send``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a request for a View to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row result.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> representing the query.</param>
            <returns>An <see cref="T:Couchbase.Views.IViewResult`1"/> representing the result of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a request for a View to the server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row result.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> representing the query.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.Send``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a request for a N1QL query to the server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row (or document) result.</typeparam>
            <param name="queryRequest">A <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a request for a N1QL query to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row (or document) result.</typeparam>
            <param name="queryRequest">A <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.</param>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a request for a N1QL query to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row (or document) result.</typeparam>
            <param name="queryRequest">A <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
        </member>
        <member name="M:Couchbase.Core.IServer.Send``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Sends an analytics request to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body for each row (or document) result.</typeparam>
            <param name="analyticsRequest">The analytics request.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync``1(Couchbase.Analytics.IAnalyticsRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends an analytics request to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body for each row (or document) result.</typeparam>
            <param name="analyticsRequest">The analytics request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.IServer.SaslFactory">
            <summary>
            Gets or sets the SASL factory for authenticating each TCP connection.
            </summary>
            <value>
            The sasl factory.
            </value>
        </member>
        <member name="M:Couchbase.Core.IServer.CreateSaslMechanismIfNotExists">
            <summary>
            Creates the sasl mechanism using the <see cref="P:Couchbase.Core.IServer.SaslFactory"/> provided if it is null.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IServer.Revision">
            <summary>
            Gets the clustermap rev# of the <see cref="T:Couchbase.Core.Server"/>.
            </summary>
            <value>
            The revision.
            </value>
        </member>
        <member name="T:Couchbase.Core.IVBucket">
            <summary>
            Represents a VBucket partition in a Couchbase cluster
            </summary>
        </member>
        <member name="M:Couchbase.Core.IVBucket.LocateReplica(System.Int32)">
            <summary>
            Locates a replica for a given index.
            </summary>
            <param name="index">The index of the replica.</param>
            <returns>An <see cref="T:Couchbase.Core.IServer"/> if the replica is found, otherwise null.</returns>
        </member>
        <member name="P:Couchbase.Core.IVBucket.Replicas">
            <summary>
            Gets an array of replica indexes.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IVBucket.Index">
            <summary>
            Gets the index of the VBucket.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Core.IVBucket.Primary">
            <summary>
            Gets the index of the primary node in the VBucket.
            </summary>
            <value>
            The primary index that the key has mapped to.
            </value>
        </member>
        <member name="P:Couchbase.Core.IVBucket.HasReplicas">
            <summary>
            Gets a value indicating whether this instance has replicas.
            </summary>
            <value>
            <c>true</c> if this instance has replicas; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IVBucket.BucketName">
            <summary>
            Name of the bucket this vBucket is associated with.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Server">
            <summary>
            Represents a Couchbase Server node on the network.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Server.CachedViewBaseUri">
            <summary>
            The base <see cref="T:System.Uri"/> for building a View query request.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Server.CachedQueryBaseUri">
            <summary>
            The base <see cref="T:System.Uri"/> for building a N1QL query request.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Server.IsMgmtNode">
            <summary>
            Gets a value indicating whether this instance is MGMT node.
            </summary>
            <value>
            <c>true</c> if this instance is MGMT node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsQueryNode">
            <summary>
            Gets a value indicating whether this instance is query node.
            </summary>
            <value>
            <c>true</c> if this instance is query node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsAnalyticsNode">
            <summary>
            Gets a value indicating whether this instance is an analytics node.
            </summary>
            <value>
            <c>true</c> if this instance is analytics node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsDataNode">
            <summary>
            Gets a value indicating whether this instance is data node.
            </summary>
            <value>
            <c>true</c> if this instance is data node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsIndexNode">
            <summary>
            Gets a value indicating whether this instance is index node.
            </summary>
            <value>
            <c>true</c> if this instance is index node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsViewNode">
            <summary>
            Gets a value indicating whether this instance is view node.
            </summary>
            <value>
            <c>true</c> if this instance is view node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsSearchNode">
            <summary>
            Gets a value indicating whether this instance is an FTS node.
            </summary>
            <value>
            <c>true</c> if this instance is search node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.SaslFactory">
            <summary>
            Gets or sets the SASL factory for authenticating each TCP connection.
            </summary>
            <value>
            The sasl factory.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.EndPoint">
            <summary>
            Gets the remote <see cref="T:System.Net.IPEndPoint"/> of this node.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.ConnectionPool">
            <summary>
            Gets a reference to the connection pool thar this node is using.
            </summary>
            <value>
            The connection pool.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsSecure">
            <summary>
            Gets a value indicating whether this instance node is sending
            and receiving data securely with TLS.
            </summary>
            <value>
              <c>true</c> if this instance is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsDown">
            <summary>
            Gets or sets a value indicating whether this instance is down.
            </summary>
            <value>
              <c>true</c> if this instance is down; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.QueryClient">
            <summary>
            Gets the client used for sending N1QL requests to the N1QL service.
            </summary>
            <value>
            The query client.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.ViewClient">
            <summary>
            Gets the view client for sending View requests to the data service.
            </summary>
            <value>
            The view client.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.SearchClient">
            <summary>
            Gets the <see cref="T:Couchbase.Search.ISearchClient" /> for this node if <see cref="P:Couchbase.Core.Server.IsSearchNode" /> is <c>true</c>.
            </summary>
            <value>
            The search client.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.Revision">
            <summary>
            Gets the clustermap rev# of the <see cref="T:Couchbase.Core.Server" />.
            </summary>
            <value>
            The revision.
            </value>
        </member>
        <member name="M:Couchbase.Core.Server._heartBeatTimer_Elapsed(System.Object)">
            <summary>
            Handles the Elapsed event of the _heartBeatTimer control which is enabled
            whenever a node is unresponsive and possible offline. Once it is started,
            the node will be flagged as <see cref="F:Couchbase.Core.Server._isDown"/> (which will be true). When the node
            is down, all operations (K/V, view and or query) that are mapped to this node will fail
            with a <see cref="T:Couchbase.Core.NodeUnavailableException"/> - however, since operations are retried,
            it may be routed to a live node and succeed. The logs will reflect this but the result
            to the user will be a successful execution of a given operation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Server.CheckDataNode">
            <summary>
            If a data only node is flaged as down, this method will be invoked every <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.NodeAvailableCheckInterval"/>.
            When invoked, it will attempt to get a connection and perform a NOOP on it.
            If the NOOP succeeds, then the node will be put back into rotation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Server.CreateSaslMechanismIfNotExists">
            <summary>
            Creates the sasl mechanism using the <see cref="P:Couchbase.Core.Server.SaslFactory" /> provided if it is null.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Server.CheckOnline(System.Boolean)">
            <summary>
            This method checks to see if the node has experianced a number of IO failures which exceed
            the <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorThreshold"/> value defined in the configuration
            within a specific duration specified by <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorCheckInterval"/>.
            </summary>
            <param name="isDead">if set to <c>true</c> is dead.</param>
        </member>
        <member name="M:Couchbase.Core.Server.HandleNodeUnavailable(Couchbase.IO.Operations.IOperation)">
            <summary>
            If the node is down, handles the return result for a K/V operation.
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.HandleNodeUnavailable``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            If the node is down, handles the return result for a K/V operation.
            </summary>
            <typeparam name="T">The message body <see cref="T:System.Type"/>.</typeparam>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.HandleNodeUnavailable``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            If the node is down, handles the return result for a query operation.
            </summary>
            <typeparam name="T">The message body <see cref="T:System.Type"/>.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.HandleNodeUnavailable``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Creates a failure result for an <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> when a node is not available.
            </summary>
            <typeparam name="T">The target type for result rows to deserialize into.</typeparam>
            <param name="request">The analytics request.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.Send(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a key/value operation that contains no body to it's mapped server.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation" /> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.Send``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a key/value operation that contains a body to it's mapped server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1" /> representing the result of the operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.SendAsync``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a key/value operation to it's mapped server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> to send.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.SendAsync(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a key/value operation that contains no body to it's mapped server asynchronously.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation" /> to send.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.SendAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a request for a View to the server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body for each row result.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery" /> representing the query.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.Send``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a request for a View to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body for each row result.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery" /> representing the query.</param>
            <returns>
            An <see cref="T:Couchbase.Views.IViewResult`1" /> representing the result of the query.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.Couchbase#Core#IServer#Send``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a request for a N1QL query to the server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body for each row (or document) result.</typeparam>
            <param name="queryRequest">A <see cref="T:Couchbase.N1QL.IQueryRequest" /> object.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.Couchbase#Core#IServer#SendAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a request for a N1QL query to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body for each row (or document) result.</typeparam>
            <param name="queryRequest">A <see cref="T:Couchbase.N1QL.IQueryRequest" /> object.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.Couchbase#Core#IServer#SendAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a request for a N1QL query to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body for each row (or document) result.</typeparam>
            <param name="queryRequest">A <see cref="T:Couchbase.N1QL.IQueryRequest" /> object.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.Send``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Sends an analytics request to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body for each row (or document) result.</typeparam>
            <param name="analyticsRequest">The analytics request.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.SendAsync``1(Couchbase.Analytics.IAnalyticsRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends an analytics request to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> T of the body for each row (or document) result.</typeparam>
            <param name="analyticsRequest">The analytics request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>
            An <see cref="T:System.Int32" /> representing the size of the cache before it was cleared.
            </returns>
        </member>
        <member name="T:Couchbase.Core.VBucket">
            <summary>
            Represents a VBucket partition in a Couchbase cluster
            </summary>
        </member>
        <member name="M:Couchbase.Core.VBucket.LocatePrimary">
             <summary>
             Gets a reference to the primary server for this VBucket.
             </summary>
             <returns>A <see cref="T:Couchbase.Core.IServer"/> reference which is the primary server for this <see cref="T:Couchbase.Core.VBucket"/></returns>
            <remarks>If the VBucket doesn't have a master, it will return a random <see cref="T:Couchbase.Core.IServer"/> to force a NMV and reconfig.</remarks>
        </member>
        <member name="M:Couchbase.Core.VBucket.LocateReplica(System.Int32)">
            <summary>
            Locates a replica for a given index.
            </summary>
            <param name="index">The index of the replica.</param>
            <returns>An <see cref="T:Couchbase.Core.IServer"/> if the replica is found, otherwise null.</returns>
        </member>
        <member name="P:Couchbase.Core.VBucket.Replicas">
            <summary>
            Gets an array of replica indexes.
            </summary>
        </member>
        <member name="P:Couchbase.Core.VBucket.Index">
            <summary>
            Gets the index of the VBucket.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Core.VBucket.Primary">
            <summary>
            Gets the index of the primary node in the VBucket.
            </summary>
            <value>
            The primary index that the key has mapped to.
            </value>
        </member>
        <member name="P:Couchbase.Core.VBucket.Rev">
            <summary>
            Gets or sets the configuration revision.
            </summary>
            <value>
            The rev.
            </value>
        </member>
        <member name="P:Couchbase.Core.VBucket.HasReplicas">
            <summary>
            Gets a value indicating whether this instance has replicas.
            </summary>
            <value>
            <c>true</c> if this instance has replicas; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Couchbase.IO.SendTimeoutExpiredException">
            <summary>
            Thrown if an operation does not complete before the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.SendTimeout"/> is exceeded.
            </summary>
            <seealso cref="T:System.TimeoutException" />
        </member>
        <member name="P:Couchbase.IO.SendTimeoutExpiredException.StackTrace">
            <summary>
            Gets a string representation of the immediate frames on the call stack.
            </summary>
        </member>
        <member name="T:Couchbase.IO.TransportFailureException">
            <summary>
            Returned when an operation is attempted on a connection which has been closed by the remote host or
            for some other reason and before the client has determined that the Couchbase base node is either offline
            or otherwise unavailable. It should be considered a temporary error in that the client will try to reconnect
            and try again on the new connection.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Couchbase.IO.BufferUnavailableException">
            <summary>
            Thrown when an available buffer cannot be obtained from the <see cref="T:Couchbase.IO.BufferAllocator"/>.
            </summary>
        </member>
        <member name="P:Couchbase.IO.Http.AuthenticatingHttpClientHandler.BucketName">
            <summary>
            The name of the Couchbase Bucket to authenticate against.
            </summary>
        </member>
        <member name="T:Couchbase.IO.IOBuffer">
            <summary>
            Represents a temporary buffer provided by a <see cref="T:Couchbase.IO.BufferAllocator"/>.  It should be released after use
            using <see cref="M:Couchbase.IO.BufferAllocator.ReleaseBuffer(Couchbase.IO.IOBuffer)"/>.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IOBuffer.Buffer">
            <summary>
            Byte array that the IOBuffer exists within
            </summary>
        </member>
        <member name="P:Couchbase.IO.IOBuffer.Offset">
            <summary>
            Offset of the buffer within the byte array
            </summary>
        </member>
        <member name="P:Couchbase.IO.IOBuffer.Length">
            <summary>
            Length of the buffer within the byte array
            </summary>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.MultiLookup`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.MultiLookup`1.CanRetry">
            <summary>
            Determines whether this instance can be retried.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.MultiLookup`1.Equals(Couchbase.IO.Operations.SubDocument.MultiLookup{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.MultiMutation`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.MultiMutation`1.Equals(Couchbase.IO.Operations.SubDocument.MultiMutation{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubDocDictUpsert`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubDocReplace`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubDocDictAdd`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.IO.Operations.SubDocument.SubDocDelete`1">
            <summary>
            This command removes an entry from the document. If the entry points to a dictionary key-value,
            the key and the value are removed from the document. If the entry points to an array element, the
            array element is removed, and all following elements will implicitly shift back by one. If the
            array element is specified as [-1] then the last element is removed.
            </summary>
            <typeparam name="T">The CLR Type representing the document.</typeparam>
            <seealso cref="T:Couchbase.IO.Operations.SubDocument.SubDocSingularMutationBase`1" />
        </member>
        <member name="P:Couchbase.IO.Operations.SubDocument.SubDocDelete`1.OperationCode">
            <summary>
            Gets the operation code for this specific operation.
            </summary>
            <value>
            The operation code.
            </value>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubDocDelete`1.CreateBody">
            <summary>
            Creates an array representing the operations body.
            </summary>
            <remarks>Sub-Document delete is always empty.</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubDocDelete`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubCounter`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubArrayPushLast`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubArrayPushFirst`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubArrayAddUnique`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubArrayInsert`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubExists`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.SubDocument.SubGet`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse">
            <summary>
            Represents values sufficient to determine if a mutation has occurred and
            been mutated to a specific node, replicated to one or more replicas or has
            been persisted in one or more of the replicas.
            </summary>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.Format">
            <summary>
            Gets or sets the format of the response. 1 indicates a failover, in which
            case the <see cref="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.OldVBucketUUID"/> and <see cref="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.LastSeqnoReceived"/> will
            be set.
            </summary>
            <value>
            The format of the response
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.VBucketId">
            <summary>
            Gets or sets the VBucketId identifier.
            </summary>
            <value>
            The VBucket identifier.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.VBucketUUID">
            <summary>
            Gets or sets the VBucketUUID.
            </summary>
            <value>
            The vbucket UUID.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.LastPersistedSeqno">
            <summary>
            Gets or sets the last persisted seqno.
            </summary>
            <value>
            The last persisted seqno.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.CurrentSeqno">
            <summary>
            Gets or sets the current seqno.
            </summary>
            <value>
            The current seqno.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.OldVBucketUUID">
            <summary>
            Gets or sets the vbucket uuid for this vbucket prior to the failover and is
            the same as the vbucket uuid passed in by the client in the observe_seqno request.
            </summary>
            <value>
            The old v bucket UUID.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.LastSeqnoReceived">
            <summary>
            Gets or sets the last sequence number received in the old vbucket uuid.
            </summary>
            <value>
            The last seqno received.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.IsHardFailover">
            <summary>
            Gets or sets a value indicating whether a hard failover has occurred.
            </summary>
            <value>
            <c>true</c> if a hard failover has occurred; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno.OperationCode">
            <summary>
            Gets the operation code for <see cref="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno.OperationCode"/>
            </summary>
            <value>
            The operation code.
            </value>
        </member>
        <member name="M:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno.Write">
            <summary>
            Writes this instance into a memcached packet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno.GetValue">
            <summary>
            Gets the value of the memecached response packet and converts it to a <see cref="T:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.IO.Operations.ServerFeatures">
            <summary>
            Features that they client negotiate on a per connection basis.
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.ServerFeatures.Datatype">
            <summary>
            For custom data types
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.ServerFeatures.TcpNoDelay">
            <summary>
            Enable TCP nodelay
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.ServerFeatures.MutationSeqno">
            <summary>
            Return the sequence number with every mutation
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.ServerFeatures.TcpDelay">
            <summary>
            Disable TCP nodelay
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.ServerFeatures.SubdocXAttributes">
            <summary>
            Perform subdocument operations on document attributes
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.MutationOperationBase">
            <summary>
            Represents an abstract base class for mutation operations (PROTOCOL_BINARY_CMD_SET, DELETE,REPLACE, ADD,
            APPEND, PREPEND, INCR, DECR, SET_WITH_META, DEL_WITH_META) and supports <see cref="!:OperationBase&lt;&gt;.MutationToken"/>'s.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Couchbase.IO.Operations.MutationOperationBase.ReadExtras(System.Byte[])">
            <summary>
            Reads the VBucketUUID and Sequence Number from  the extras if the instance has a <see cref="T:Couchbase.Core.VBucket"/> -
            only persistent Couchbase buckets that use VBucket Hashing support mutation tokens.
            </summary>
            <param name="buffer">The memcached response buffer.</param>
        </member>
        <member name="T:Couchbase.IO.Operations.MutationOperationBase`1">
            <summary>
            Represents an abstract base class for mutation operations (PROTOCOL_BINARY_CMD_SET, DELETE,REPLACE, ADD,
            APPEND, PREPEND, INCR, DECR, SET_WITH_META, DEL_WITH_META) and supports <see cref="!:OperationBase&lt;&gt;.MutationToken"/>'s.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Couchbase.IO.Operations.MutationOperationBase`1.ReadExtras(System.Byte[])">
            <summary>
            Reads the VBucketUUID and Sequence Number from  the extras if the instance has a <see cref="T:Couchbase.Core.VBucket"/> -
            only persistent Couchbase buckets that use VBucket Hashing support mutation tokens.
            </summary>
            <param name="buffer">The memcached response buffer.</param>
        </member>
        <member name="T:Couchbase.IO.Operations.Compression">
            <summary>
            Specifies the compression type the current operation is using.
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.Compression.None">
            <summary>
            No compression is being used.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.DataFormat">
            <summary>
            Specifies the formatting of data across all SDKs
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.DataFormat.Reserved">
            <summary>
            Reserved bit position to avoid zeroing out upper 8 bits
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.DataFormat.Private">
            <summary>
            Used for SDK specific encodings
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.DataFormat.Json">
            <summary>
            Encode as Json
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.DataFormat.Binary">
            <summary>
            Store as raw binary format
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.DataFormat.String">
            <summary>
            Store as a UTF8 string
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.KeyState">
            <summary>
            In an Observe operation, indicates whether the key is persisted or not.
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.KeyState.FoundNotPersisted">
            <summary>
            Found, not persisted. Indicates key is in RAM, but not persisted to disk
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.KeyState.FoundPersisted">
            <summary>
            Found, persisted. Indicates key is found in RAM, and is persisted to disk
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.KeyState.NotFound">
            <summary>
            Not found. Indicates the key is persisted, but not found in RAM. In this case,
            a key is not available in any view/index. Couchbase Server will return this keystate
            for any item that is not stored in the server. It indicates you will not expect to have
            the item in a view/index.
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.KeyState.LogicalDeleted">
            <summary>
            Logically deleted. Indicates an item is in RAM, but is not yet deleted from disk.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.Authentication.SaslList">
            <summary>
            Gets the supported SASL Mechanisms supported by the Couchbase Server.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.Authentication.SaslStart">
            <summary>
            Starts the SASL authentication process using a specified SASL mechanism type as a key.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Operations.Authentication.SaslStart.#ctor(System.String,System.String,Couchbase.Core.IVBucket,Couchbase.Core.Transcoders.ITypeTranscoder,System.UInt32,System.UInt32)">
            <summary>
                Creates an instance of the <see cref="T:Couchbase.IO.Operations.Authentication.SaslStart" />" object for starting the SASL authentication process.
            </summary>
            <param name="key">The SASL Mechanism to use: PLAIN or CRAM-MD5.</param>
            <param name="value"></param>
            <param name="vBucket"></param>
            <param name="transcoder"></param>
            <param name="opaque"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Couchbase.IO.Operations.Authentication.SaslStart.#ctor(System.String,System.String,Couchbase.Core.Transcoders.ITypeTranscoder,System.UInt32)">
            <summary>
            Creates an instance of the <see cref="T:Couchbase.IO.Operations.Authentication.SaslStart"/>" object for starting the SASL authentication process.
            </summary>
            <param name="key">The SASL Mechanism to use: PLAIN or CRAM-MD5.</param>
            <param name="value"></param>
            <param name="transcoder"></param>
            <param name="timeout"></param>
        </member>
        <member name="T:Couchbase.IO.Operations.Authentication.SaslStep">
            <summary>
            Peforms the next step in the in SASL authentication process when required by a AuthenticationContinue message from a <see cref="T:Couchbase.IO.Operations.Authentication.SaslStart"/> operation.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.Replace`1">
            <summary>
            Replace a key in the database, failing if the key does not exist.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Couchbase.IO.Operations.Set`1">
            <summary>
            Add a key to the database, replacing the key if it already exists.
            </summary>
            <typeparam name="T">The value to insert.</typeparam>
        </member>
        <member name="F:Couchbase.IO.Operations.OperationCode.Hello">
            <summary>
            You say goodbye and I say Hello. Hello, hello.
            </summary>
        </member>
        <member name="T:Couchbase.IO.ConnectionPoolFactory">
            <summary>
            A factory creator for <see cref="T:Couchbase.IO.IConnectionPool"/> instances.
            </summary>
        </member>
        <member name="M:Couchbase.IO.ConnectionPoolFactory.GetFactory">
            <summary>
            Gets the factory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.ConnectionPoolFactory.GetFactory(System.String)">
            <summary>
            Gets the factory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.ConnectionPoolFactory.GetFactory``1">
            <summary>
            Gets the factory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.IO.RemoteHostClosedException">
            <summary>
            Thrown when the remote host has gracefully closed the TCP connection.
            </summary>
        </member>
        <member name="T:Couchbase.IO.AsyncState">
            <summary>
            Represents an asynchronous Memcached request in flight.
            </summary>
        </member>
        <member name="M:Couchbase.IO.AsyncState.Cancel(Couchbase.IO.ResponseStatus,System.Exception)">
            <summary>
            Cancels the current Memcached request that is in-flight.
            </summary>
        </member>
        <member name="M:Couchbase.IO.AsyncState.Complete(System.Byte[])">
            <summary>
            Completes the specified Memcached response.
            </summary>
            <param name="response">The Memcached response packet.</param>
        </member>
        <member name="T:Couchbase.IO.BufferAllocator">
            <summary>
            A buffer allocator for <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instances.
            </summary>
            <remarks>Used to reduce memory fragmentation do to pinning.</remarks>
            <remarks>Near identical to implementation found in MSDN documentation: http://msdn.microsoft.com/en-us/library/bb517542%28v=vs.110%29.aspx</remarks>
        </member>
        <member name="M:Couchbase.IO.BufferAllocator.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Sets the buffer for a <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> object.
            </summary>
            <param name="eventArgs">The SAEA whose buffer will be set</param>
            <returns>True if the bucket was set.</returns>
        </member>
        <member name="M:Couchbase.IO.BufferAllocator.GetBuffer">
            <summary>
            Returns an <see cref="T:Couchbase.IO.IOBuffer"/>.
            </summary>
            <returns>The <see cref="T:Couchbase.IO.IOBuffer"/>, or null if no buffer is available.</returns>
        </member>
        <member name="M:Couchbase.IO.BufferAllocator.ReleaseBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Releases the buffer allocate to a <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance.
            </summary>
            <param name="eventArgs">The SAEA instance the buffer will be released from.</param>
        </member>
        <member name="M:Couchbase.IO.BufferAllocator.ReleaseBuffer(Couchbase.IO.IOBuffer)">
            <summary>
            Releases the buffer allocated to an <see cref="T:Couchbase.IO.IOBuffer"/> instance.
            </summary>
            <param name="buffer">The instance the buffer will be released from.</param>
        </member>
        <member name="M:Couchbase.IO.Connection.Send(System.Byte[])">
            <summary>
            Sends a memcached operation as a buffer to a the server.
            </summary>
            <param name="buffer">A memcached request buffer</param>
            <returns>A memcached response buffer.</returns>
        </member>
        <member name="M:Couchbase.IO.Connection.OnCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Raised when an asynchronous operation is completed
            </summary>
            <param name="sender">The <see cref="T:System.Net.Sockets.Socket"/> which the asynchronous operation is associated with.</param>
            <param name="args"></param>
        </member>
        <member name="M:Couchbase.IO.Connection.Send(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Receives an asynchronous send operation
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> which the asynchronous operation is associated with.</param>
            <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> that is being used for the operation.</param>
        </member>
        <member name="M:Couchbase.IO.Connection.Receive(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Recieves an asynchronous recieve operation and loops until the response body has been read.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> which the asynchronous operation is associated with.</param>
            <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> that is being used for the operation.</param>
        </member>
        <member name="M:Couchbase.IO.Connection.Dispose">
            <summary>
            Disposes the underlying socket and other objects used by this instance.
            </summary>
        </member>
        <member name="T:Couchbase.IO.MultiplexingConnection">
            <summary>
            Represents a connection for pipelining Memcached requests/responses to and from a server.
            </summary>
        </member>
        <member name="M:Couchbase.IO.MultiplexingConnection.SendAsync(System.Byte[],System.Func{Couchbase.IO.SocketAsyncState,System.Threading.Tasks.Task})">
            <summary>
            Sends a memcached packet asyncronously and handles the response be calling the passed in <see cref="!:callback" /> delegate.
            </summary>
            <param name="request">The memcached request packet.</param>
            <param name="callback">The callback handled when the response has been been received.</param>
            <exception cref="T:Couchbase.IO.SendTimeoutExpiredException"></exception>
        </member>
        <member name="M:Couchbase.IO.MultiplexingConnection.Send(System.Byte[])">
            <summary>
            Sends a Memcached packet to the server and waits for a response.
            </summary>
            <param name="request">The memcached request packet.</param>
            <returns></returns>
            <exception cref="T:Couchbase.IO.SendTimeoutExpiredException"></exception>
        </member>
        <member name="M:Couchbase.IO.MultiplexingConnection.AcquireState">
            <summary>
            Gets a <see cref="T:Couchbase.IO.SyncState"/> object if one exists in the pool or creates and returns a new one.
            </summary>
            <returns>An <see cref="T:Couchbase.IO.SyncState"/> object representing the state of the request.</returns>
        </member>
        <member name="M:Couchbase.IO.MultiplexingConnection.ReleaseState(Couchbase.IO.SyncState)">
            <summary>
            Releases a <see cref="T:Couchbase.IO.SyncState"/> object back into the pool for reuse.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Couchbase.IO.MultiplexingConnection.ReceiveThreadBody">
            <summary>
            Executed by a dedicated background thread to constantly listen for responses
            cpming back from the server and writes them to the <see cref="F:Couchbase.IO.MultiplexingConnection._receiveBuffer"/>.
            </summary>
        </member>
        <member name="M:Couchbase.IO.MultiplexingConnection.ParseReceivedData">
            <summary>
            Parses the received data checking the buffer to see if a completed response has arrived.
             If it has, the request is completed and the <see cref="T:Couchbase.IO.IState"/> is removed from the pending queue.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Converters.ConverterFactory">
            <summary>
            A factory for creating <see cref="T:Couchbase.IO.Converters.IByteConverter"/> functories.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Converters.ConverterFactory.GetConverter">
            <summary>
            Gets a <see cref="T:System.Func`1"/> factory for the default converter: <see cref="T:Couchbase.IO.Converters.DefaultConverter"/>
            </summary>
            <returns>A func for creating <see cref="T:Couchbase.IO.Converters.DefaultConverter"/> instances.</returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ConverterFactory.GetConverter(System.String)">
            <summary>
            Gets a <see cref="T:System.Func`1"/> factory for custom <see cref="T:Couchbase.IO.Converters.IByteConverter"/>s conifgured in the App.Config.
            </summary>
            <param name="typeName">The name of the type implementing <see cref="T:Couchbase.IO.Converters.IByteConverter"/>.</param>
            <returns>A func for creating custom <see cref="T:Couchbase.IO.Converters.IByteConverter"/> instances.</returns>
        </member>
        <member name="T:Couchbase.IO.Converters.DefaultConverter">
            <summary>
            The default <see cref="T:Couchbase.IO.Converters.IByteConverter" /> for for converting types and arrays before
            being sent or after being received across the network. Unless an overload is called
            with useNbo = false, Network Byte Order will be used in the conversion.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToBoolean(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Boolean" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToSingle(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Single" /> from a buffer starting from a given offset..
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToDateTime(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.DateTime" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToDouble(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Double" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToByte(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Byte" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int16" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt16(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int16" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt16" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt16(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt16" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int32" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt32(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int32" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt32" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt32(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt32" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int64" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt64(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int64" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt64" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt64(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt64" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt16(System.Int16,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int16" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt16(System.Int16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt16(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt16(System.UInt16,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt16(System.UInt16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt16(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt32(System.Int32,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int32" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt32(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt32(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt32(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt32(System.UInt32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt32(System.UInt32,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt64(System.Int64,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int64" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt64(System.Int64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int64" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt64(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int64" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt64(System.UInt64,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt64(System.UInt64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt64(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromString(System.String,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a dst at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The dst.</param>
            <param name="offset">The offset.</param>
            <remarks>Will resize dst if empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromString(System.String,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a dst at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The dst.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromByte(System.Byte,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.SetBit(System.Byte@,System.Int32,System.Boolean)">
            <summary>
            Sets the bit from a <see cref="T:System.Byte" /> at a given position.
            </summary>
            <param name="theByte">The byte.</param>
            <param name="position">The position.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.GetBit(System.Byte,System.Int32)">
            <summary>
            Gets the bit as a <see cref="T:System.Boolean" /> from a <see cref="T:System.Byte" /> at a given position.
            </summary>
            <param name="theByte">The byte.</param>
            <param name="position">The position.</param>
            <returns>
            True if the bit is set; otherwise false.
            </returns>
        </member>
        <member name="T:Couchbase.IO.Converters.IByteConverter">
            <summary>
            Provides an interface for converting types and arrays before being sent or after being received across the network.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToBoolean(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToSingle(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Single"/> from a buffer starting from a given offset..
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToDateTime(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.DateTime"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToDouble(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            To the double.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">if set to <c>true</c> [use nbo].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToByte(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Byte"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
             Reads a <see cref="T:System.Int16"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> from the buffer starting at a given offset and length.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt16(System.UInt16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt16(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt32(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt32(System.UInt32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt32(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt32(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt64(System.Int64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt64(System.UInt64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt64(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt64(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromString(System.String,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromString(System.String,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromByte(System.Byte,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.SetBit(System.Byte@,System.Int32,System.Boolean)">
            <summary>
            Sets the bit from a <see cref="T:System.Byte"/> at a given position.
            </summary>
            <param name="theByte">The byte.</param>
            <param name="position">The position.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.GetBit(System.Byte,System.Int32)">
            <summary>
            Gets the bit as a <see cref="T:System.Boolean"/> from a <see cref="T:System.Byte"/> at a given position.
            </summary>
            <param name="theByte">The byte.</param>
            <param name="position">The position.</param>
            <returns>True if the bit is set; otherwise false.</returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt16(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int16" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt16(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt16" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int32" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt32(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int32" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt32(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt32" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt64(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int64" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt64(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt64" /> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt16(System.Int16,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int16" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt16(System.Int16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt16(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt16(System.UInt16,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt32(System.Int32,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int32" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt32(System.UInt32,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt64(System.Int64,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int64" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt64(System.UInt64,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="T:Couchbase.IO.Converters.ManualByteConverter">
            <summary>
            Provides methods for "manually" converting bytes to and from types.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToByte(System.Byte[],System.Int32)">
            <summary>
            Converts a <see cref="T:System.Byte"/> at a given offset to a <see cref="T:System.Byte"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.Int16"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.String"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromByte(System.Byte,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt16(System.Int16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt16(System.UInt16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt16(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt16(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt32(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt32(System.UInt32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt32(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt32(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt64(System.Int64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt64(System.UInt64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt64(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt64(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromString(System.String,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will resize buffer if empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromString(System.String,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:Couchbase.IO.IState">
            <summary>
            Represents a Memcached request in flight.
            </summary>
        </member>
        <member name="M:Couchbase.IO.IState.Complete(System.Byte[])">
            <summary>
            Completes the specified Memcached response.
            </summary>
            <param name="response">The Memcached response packet.</param>
        </member>
        <member name="P:Couchbase.IO.SocketAsyncState.Status">
            <summary>
            Represents a response status that has originated in within the client.
            The purpose is to handle client side errors
            </summary>
        </member>
        <member name="T:Couchbase.IO.Services.MultiplexingIOService">
            <summary>
            An IO service that dispatches without using a pool.
            </summary>
        </member>
        <member name="P:Couchbase.IO.Services.MultiplexingIOService.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether enhanced durability is enabled.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability and it is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.Services.MultiplexingIOService.SupportsSubdocXAttributes">
            <summary>
            Gets a value indicating whether Subdocument XAttributes are supported.
            </summary>
            <value>
            <c>true</c> if the server supports Subdocument XAttributes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.IO.Services.MultiplexingIOService.EnableServerFeatures(Couchbase.IO.IConnection)">
            <summary>
            Send request to server to try and enable server features.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Couchbase.IO.Services.MultiplexingIOService.LogFailedHelloOperation(Couchbase.IResult)">
            <summary>
            Logs a failed HELO operation
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Couchbase.IO.Services.MultiplexingIOService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Services.PooledIOService">
            <summary>
            The default service for performing IO
            </summary>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.#ctor(Couchbase.IO.IConnectionPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.IO.Services.PooledIOService"/> class.
            </summary>
            <param name="connectionPool">The connection pool.</param>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.#ctor(Couchbase.IO.IConnectionPool,Couchbase.Authentication.SASL.ISaslMechanism)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.IO.Services.PooledIOService"/> class.
            </summary>
            <param name="connectionPool">The connection pool.</param>
            <param name="saslMechanism">The sasl mechanism.</param>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.Execute``1(Couchbase.IO.Operations.IOperation{``0},Couchbase.IO.IConnection)">
            <summary>
            Executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection" /> the operation is using.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1" /> representing the result of operation.
            </returns>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.Execute(Couchbase.IO.Operations.IOperation)">
            <summary>
            Executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation" /> being executed.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult" /> representing the result of operation.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.Execute``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> being executed.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1" /> representing the result of operation.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.ExecuteAsync``1(Couchbase.IO.Operations.IOperation{``0},Couchbase.IO.IConnection)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection" /> the operation is using.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1" /> representing the result of operation.
            </returns>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.ExecuteAsync(Couchbase.IO.Operations.IOperation,Couchbase.IO.IConnection)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection" /> the operation is using.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult" /> representing the result of operation.
            </returns>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.ExecuteAsync``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> being executed.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1" /> representing the result of operation.
            </returns>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.ExecuteAsync(Couchbase.IO.Operations.IOperation)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> being executed.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult" /> representing the result of operation.
            </returns>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="P:Couchbase.IO.Services.PooledIOService.EndPoint">
            <summary>
            The IP endpoint of the node in the cluster that this <see cref="T:Couchbase.IO.IIOService" /> instance is communicating with.
            </summary>
        </member>
        <member name="P:Couchbase.IO.Services.PooledIOService.ConnectionPool">
            <summary>
            The <see cref="T:Couchbase.IO.IConnectionPool" /> that this <see cref="T:Couchbase.IO.IIOService" /> instance is using for acquiring <see cref="T:Couchbase.IO.IConnection" />s.
            </summary>
        </member>
        <member name="P:Couchbase.IO.Services.PooledIOService.SaslMechanism">
            <summary>
            The SASL mechanism type the <see cref="T:Couchbase.IO.IIOService" /> is using for authentication.
            </summary>
            <remarks>
            This could be PLAIN or CRAM-MD5 depending upon what the server supports.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.Authenticate(Couchbase.IO.IConnection)">
            <summary>
            Authenticates the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <exception cref="T:System.Security.Authentication.AuthenticationException"></exception>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.EnableServerFeatures(Couchbase.IO.IConnection)">
            <summary>
            Send request to server to try and enable server features.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.LogFailedHelloOperation(Couchbase.IResult)">
            <summary>
            Logs a failed HELO operation
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Couchbase.IO.Services.PooledIOService.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether enhanced durability is enabled.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability and it is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.Services.PooledIOService.SupportsSubdocXAttributes">
            <summary>
            Gets a value indicating whether Subdocument XAttributes are supported.
            </summary>
            <value>
            <c>true</c> if the server supports Subdocument XAttributes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.Services.PooledIOService.IsSecure">
            <summary>
            Returns true if internal TCP connections are using SSL.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Services.PooledIOService.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Couchbase.IO.SyncState">
            <summary>
            Represents a synchronous Memcached operation.
            </summary>
            <seealso cref="T:Couchbase.IO.IState" />
        </member>
        <member name="M:Couchbase.IO.SyncState.Complete(System.Byte[])">
            <summary>
            Completes the specified Memcached response.
            </summary>
            <param name="response">The Memcached response packet.</param>
            <remarks>Exception is not used</remarks>
        </member>
        <member name="T:Couchbase.IO.ConnectionUnavailableException">
            <summary>
            Thrown when an available <see cref="T:Couchbase.IO.IConnection"/> cannot be obtained from the <see cref="T:Couchbase.IO.IConnectionPool"/> after n number of tries.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.Socket">
            <summary>
            The Socket used for IO.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.Identity">
            <summary>
            Unique identifier for this connection.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.IsConnected">
            <summary>
            Gets a value indicating whether the underlying socket is connected to the remopte host.
            </summary>
            <value>
            <c>true</c> if this socket is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.IsAuthenticated">
            <summary>
            True if the connection has been SASL authenticated.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.WriteBuffer">
            <summary>
            Gets or sets the write buffer.
            </summary>
            <value>
            The write buffer for building the request packet.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.IsSecure">
            <summary>
            True if connection is using SSL
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.EndPoint">
            <summary>
            Gets the remote hosts <see cref="P:Couchbase.IO.ConnectionBase.EndPoint"/> that this <see cref="T:Couchbase.IO.Connection"/> is connected to.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.IsDead">
            <summary>
            Gets or sets a value indicating whether this instance is dead.
            </summary>
            <value>
              <c>true</c> if this instance is dead; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.MaxCloseAttempts">
            <summary>
            Gets or sets the maximum times that the client will check the <see cref="P:Couchbase.IO.ConnectionBase.InUse"/>
            property before closing the connection.
            </summary>
            <value>
            The maximum close attempts.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.InUse">
            <summary>
             Checks whether this <see cref="T:Couchbase.IO.Connection"/> is currently being used to execute a request.
            </summary>
            <value>
              <c>true</c> if if this <see cref="T:Couchbase.IO.Connection"/> is in use; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.CloseAttempts">
            <summary>
            Gets the number of close attempts that this <see cref="T:Couchbase.IO.Connection"/> has attemped.
            </summary>
            <value>
            The close attempts.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.HasShutdown">
            <summary>
            Gets a value indicating whether this instance is shutting down.
            </summary>
            <value>
            <c>true</c> if this instance has shutdown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.IO.ConnectionBase.MarkUsed(System.Boolean)">
            <summary>
            Marks this <see cref="T:Couchbase.IO.Connection"/> as used; meaning it cannot be disposed unless <see cref="P:Couchbase.IO.ConnectionBase.InUse"/>
            is <c>false</c> or the <see cref="P:Couchbase.IO.ConnectionBase.MaxCloseAttempts"/> has been reached.
            </summary>
            <param name="isUsed">if set to <c>true</c> [is used].</param>
        </member>
        <member name="M:Couchbase.IO.ConnectionBase.CountdownToClose(System.UInt32)">
            <summary>
            Disposes this <see cref="T:Couchbase.IO.Connection"/> if <see cref="P:Couchbase.IO.ConnectionBase.InUse"/> is <c>false</c>; otherwise
            it will wait for the interval and attempt again up until the <see cref="P:Couchbase.IO.ConnectionBase.MaxCloseAttempts"/>
            threshold is met or <see cref="P:Couchbase.IO.ConnectionBase.InUse"/> is <c>false</c>.
            </summary>
            <param name="interval">The interval to wait between close attempts.</param>
        </member>
        <member name="M:Couchbase.IO.ConnectionBase.IncrementCloseAttempts">
            <summary>
            Increments the number of close attempts during CountdownToClose.
            </summary>
            <remarks>Primarily intented as a stub for unit testing CountdownToClose.</remarks>
        </member>
        <member name="M:Couchbase.IO.ConnectionBase.Dispose">
            <summary>
            Disposes the <see cref="T:System.Threading.Timer"/> used for checking whether or not the connection
            is in use and can be Disposed; <see cref="P:Couchbase.IO.ConnectionBase.InUse"/> will be set to <c>false</c>.
            </summary>
        </member>
        <member name="M:Couchbase.IO.ConnectionBase.Authenticate">
            <summary>
            Authenticates this instance.
            </summary>
        </member>
        <member name="T:Couchbase.IO.ConnectionPool`1">
            <summary>
            Represents a pool of TCP connections to a Couchbase Server node.
            </summary>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.#ctor(Couchbase.Configuration.Client.PoolConfiguration,System.Net.IPEndPoint,System.Func{Couchbase.IO.ConnectionPool{`0},Couchbase.IO.Converters.IByteConverter,Couchbase.IO.BufferAllocator,`0},Couchbase.IO.Converters.IByteConverter)">
            <summary>
            CTOR for testing/dependency injection.
            </summary>
            <param name="configuration">The <see cref="T:Couchbase.Configuration.Client.PoolConfiguration"/> to use.</param>
            <param name="endPoint">The <see cref="T:System.Net.IPEndPoint"/> of the Couchbase Server.</param>
            <param name="factory">A functory for creating <see cref="T:Couchbase.IO.IConnection"/> objects./></param>
        </member>
        <member name="P:Couchbase.IO.ConnectionPool`1.InitializationFailed">
            <summary>
            Gets a value indicating whether the pool failed to initialize properly.
            If for example, TCP connection to the server couldn't be made, then this
            would return false until the connection could be made (after the node went
            back online).
            </summary>
            <value>
              <c>true</c> if initialization failed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionPool`1.Configuration">
            <summary>
            The configuration passed into the pool when it is created. It has fields
            for MaxSize, MinSize, etc.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionPool`1.EndPoint">
            <summary>
            The <see cref="T:System.Net.IPEndPoint"/> of the server that the <see cref="T:Couchbase.IO.IConnection"/>s are connected to.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionPool`1.Connections">
            <summary>
            Returns a collection of <see cref="T:Couchbase.IO.IConnection"/> objects.
            </summary>
            <remarks>Only returns what is available in the queue at the point in time it is called.</remarks>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.Count">
            <summary>
            Gets the number of <see cref="T:Couchbase.IO.IConnection"/> within the pool, whether or not they are available or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.Initialize">
            <summary>
            Sets the initial state of the pool and adds the MinSize of <see cref="T:Couchbase.IO.IConnection"/> object to the pool.
            </summary>After the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MinSize"/> is reached, the pool will grow to <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MaxSize"/>
            and any pending requests will then wait for a <see cref="T:Couchbase.IO.IConnection"/> to be released back into the pool.
            <remarks></remarks>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.Acquire">
            <summary>
            Returns a <see cref="T:Couchbase.IO.IConnection"/> the pool, creating a new one if none are available
            and the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MaxSize"/> has not been reached.
            </summary>
            <returns>A TCP <see cref="T:Couchbase.IO.IConnection"/> object to a Couchbase Server.</returns>
            <exception cref="T:Couchbase.IO.ConnectionUnavailableException">thrown if a thread waits more than the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MaxAcquireIterationCount"/>.</exception>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.AcquireFromPool">
            <summary>
            Returns a <see cref="T:Couchbase.IO.IConnection"/> from the pool.
            </summary>
            <returns>A TCP <see cref="T:Couchbase.IO.IConnection"/> object to a Couchbase Server.</returns>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.Release(`0)">
            <summary>
            Releases an acquired <see cref="T:Couchbase.IO.IConnection"/> object back into the pool so that it can be reused by another operation.
            </summary>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> to release back into the pool.</param>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.Dispose">
            <summary>
            Removes and disposes all <see cref="T:Couchbase.IO.IConnection"/> objects in the pool.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionPool`1.Owner">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Core.IServer" /> instance which "owns" this pool.
            </summary>
            <value>
            The owner.
            </value>
        </member>
        <member name="T:Couchbase.IO.IConnectionPool">
            <summary>
            Represents a pool of TCP connections to a Couchbase Server node.
            </summary>
        </member>
        <member name="M:Couchbase.IO.IConnectionPool.Acquire">
            <summary>
            Returns a <see cref="T:Couchbase.IO.IConnection"/> the pool, creating a new one if none are available
            and the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MaxSize"/> has not been reached.
            </summary>
            <returns>A TCP <see cref="T:Couchbase.IO.IConnection"/> object to a Couchbase Server.</returns>
        </member>
        <member name="M:Couchbase.IO.IConnectionPool.Release(Couchbase.IO.IConnection)">
            <summary>
            Releases an acquired <see cref="T:Couchbase.IO.IConnection"/> object back into the pool so that it can be reused by another operation.
            </summary>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> to release back into the pool.</param>
        </member>
        <member name="M:Couchbase.IO.IConnectionPool.Initialize">
            <summary>
            Sets the initial state of the pool and adds the MinSize of <see cref="T:Couchbase.IO.IConnection"/> object to the pool.
            After the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MinSize"/> is reached, the pool will grow to <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MaxSize"/>
            and any pending requests will then wait for a <see cref="T:Couchbase.IO.IConnection"/> to be released back into the pool.
            </summary>
        </member>
        <member name="M:Couchbase.IO.IConnectionPool.Count">
            <summary>
            Gets the number of <see cref="T:Couchbase.IO.IConnection"/> within the pool, whether or not they are availabe or not.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.IO.IConnectionPool.Configuration">
            <summary>
            The configuration passed into the pool when it is created. It has fields
            for MaxSize, MinSize, etc.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnectionPool.EndPoint">
            <summary>
            The <see cref="T:System.Net.IPEndPoint"/> of the server that the <see cref="T:Couchbase.IO.IConnection"/>s are connected to.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnectionPool.Connections">
            <summary>
            Returns a collection of <see cref="T:Couchbase.IO.IConnection"/> objects.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnectionPool.Owner">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Core.IServer"/> instance which "owns" this pool.
            </summary>
            <value>
            The owner.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnectionPool.InitializationFailed">
            <summary>
            Gets a value indicating whether the pool failed to initialize properly.
            If for example, TCP connection to the server couldn't be made, then this
            would return false until the connection could be made (after the node went
            back online).
            </summary>
            <value>
              <c>true</c> if initialization failed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Couchbase.IO.IOServiceFactory">
            <summary>
            Contains Factory methods for creating <see cref="T:Couchbase.IO.IIOService"/> implementations.
            </summary>
        </member>
        <member name="M:Couchbase.IO.IOServiceFactory.GetFactory(Couchbase.Configuration.Client.ClientConfiguration)">
            <summary>
            Gets a <see cref="T:System.Func`2"/> that will create a <see cref="T:Couchbase.IO.Services.PooledIOService"/> instance
            if <paramref name="ClientConfiguration.UseConnectionPooling.UseConnectionPooling"/> is <c>true</c>, otherwise it will create a <see cref="T:Couchbase.IO.Services.MultiplexingIOService"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.IOServiceFactory.GetFactory(System.String)">
            <exception cref="T:System.TypeLoadException">Condition.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
            <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
        </member>
        <member name="M:Couchbase.IO.IOServiceFactory.GetFactory``1">
            <exception cref="T:System.TypeLoadException">Condition.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception. </exception>
            <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
        </member>
        <member name="M:Couchbase.IO.SslConnection.Dispose">
            <summary>
            Shuts down, closes and disposes of the internal <see cref="T:System.Net.Sockets.Socket"/> instance.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Utils.BufferExtensions">
            <summary>
            Extension methods for reading values from a buffer and converting them to CLR types.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Utils.BufferExtensions.ToOpCode(System.Byte)">
            <summary>
            Converts a <see cref="T:System.Byte"/> to an <see cref="T:Couchbase.IO.Operations.OperationCode"/>
            </summary>
            <param name="value"></param> enumeration value.
            <returns>A <see cref="T:Couchbase.IO.Operations.OperationCode"/> enumeration value.</returns>
            <remarks><see cref="T:Couchbase.IO.Operations.OperationCode"/> are the available operations supported by Couchbase.</remarks>
        </member>
        <member name="M:Couchbase.IO.Utils.BufferExtensions.GetLengthSafe(System.Byte[])">
            <summary>
            Gets the length of a buffer.
            </summary>
            <param name="buffer"></param>
            <returns>0 if the buffer is null, otherwise the length of the buffer.</returns>
        </member>
        <member name="T:Couchbase.IO.Utils.SocketExtensions">
            <summary>
            Extension methods for using <see cref="T:System.Net.Sockets.Socket"/> instances.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.SetKeepAlives(System.Net.Sockets.Socket,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Enable TCP keep-alives, the time and interval on a managed Socket.
            </summary>
            <param name="socket">The socket to enable keep-alives on.</param>
            <param name="on">if set to <c>true</c> keep-alives are enabled; false to disable.</param>
            <param name="time">The duration between two keepalive transmissions in idle condition.</param>
            <param name="interval">The duration between two successive keepalive retransmissions, if acknowledgement to the previous keepalive transmission is not received.</param>
            <remarks>Credit: <see href="http://blogs.msdn.com/b/lcleeton/archive/2006/09/15/754932.aspx"/></remarks>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.ReceiveAsync(System.Net.Sockets.Socket,Couchbase.IO.SocketAwaitable)">
            <summary>
            Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket"/> object using await.
            </summary>
            <param name="socket">The connected <see cref="T:System.Net.Sockets.Socket"/> object to use.</param>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.SendAsync(System.Net.Sockets.Socket,Couchbase.IO.SocketAwaitable)">
            <summary>
            Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"/> object using await.
            </summary>
            <param name="socket">The connected <see cref="T:System.Net.Sockets.Socket"/> object to use.</param>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.ConnectAsync(System.Net.Sockets.Socket,Couchbase.IO.SocketAwaitable)">
            <summary>
            Begins an asynchronous to a connection to a remote host using await.
            </summary>
            <param name="socket">The connected <see cref="T:System.Net.Sockets.Socket"/> object to use.</param>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.DisconnectAsync(System.Net.Sockets.Socket,Couchbase.IO.SocketAwaitable)">
            <summary>
            Begins an asynchronous to disconnect from a remote host using await.
            </summary>
            <param name="socket">The connected <see cref="T:System.Net.Sockets.Socket"/> object to use.</param>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.AcceptAsync(System.Net.Sockets.Socket,Couchbase.IO.SocketAwaitable)">
            <summary>
            Begins an asynchronous to accept an incoming connection attempt using await.
            </summary>
            <param name="socket">The connected <see cref="T:System.Net.Sockets.Socket"/> object to use.</param>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.ReceiveAsync(Couchbase.IO.SocketAwaitable)">
            <summary>
            Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket"/> object using await.
            </summary>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.SendAsync(Couchbase.IO.SocketAwaitable)">
            <summary>
            Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"/> object using await.
            </summary>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="T:Couchbase.IO.Utils.HeaderIndexFor">
            <summary>
            Bytes offsets and constants for BinaryProtocolRevamped packets.
            </summary>
            <see cref="!:http://code.google.com/p/memcached/wiki/BinaryProtocolRevamped#Packet_Structure"/>
        </member>
        <member name="T:Couchbase.IO.DefaultConnectionFactory">
            <summary>
            A factory creator for <see cref="T:Couchbase.IO.IConnection"/>s
            </summary>
        </member>
        <member name="M:Couchbase.IO.DefaultConnectionFactory.GetGeneric``1">
            <summary>
            Returns a functory for creating <see cref="T:Couchbase.IO.Connection"/> objects.
            </summary>
            <returns>A <see cref="T:Couchbase.IO.Connection"/> based off of the <see cref="T:Couchbase.Configuration.Client.PoolConfiguration"/> of the <see cref="T:Couchbase.IO.IConnectionPool"/>.</returns>
        </member>
        <member name="T:Couchbase.IO.IConnection">
            <summary>
            Represents a TCP connection to a Couchbase Server instance.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnection.Socket">
            <summary>
            The Socket used for IO.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnection.Identity">
            <summary>
            Unique identifier for this connection.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnection.IsAuthenticated">
            <summary>
            True if the connection has been SASL authenticated.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnection.IsSecure">
            <summary>
            True if connection is using SSL
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnection.IsConnected">
            <summary>
            Gets a value indicating whether the underlying socket is connected to the remopte host.
            </summary>
            <value>
            <c>true</c> if this socket is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.EndPoint">
            <summary>
            Gets the remove hosts <see cref="P:Couchbase.IO.IConnection.EndPoint"/> that this <see cref="T:Couchbase.IO.Connection"/> is connected to.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.IsDead">
            <summary>
            Gets or sets a value indicating whether this instance is dead.
            </summary>
            <value>
              <c>true</c> if this instance is dead; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.IO.IConnection.SendAsync(System.Byte[],System.Func{Couchbase.IO.SocketAsyncState,System.Threading.Tasks.Task})">
            <summary>
            Sends a request packet as an asynchronous operation.
            </summary>
            <param name="buffer">A memcached request buffer.</param>
            <param name="callback">The callback that will be fired after the operation is completed.</param>
        </member>
        <member name="M:Couchbase.IO.IConnection.Send(System.Byte[])">
            <summary>
            Sends a request packet as an asynchronous operation; waiting for the reponse.
            </summary>
            <param name="request">A memcached request buffer.</param>
            <returns>A memcached response packet.</returns>
        </member>
        <member name="P:Couchbase.IO.IConnection.InUse">
            <summary>
             Checks whether this <see cref="T:Couchbase.IO.Connection"/> is currently being used to execute a request.
            </summary>
            <value>
              <c>true</c> if if this <see cref="T:Couchbase.IO.Connection"/> is in use; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.IO.IConnection.MarkUsed(System.Boolean)">
            <summary>
            Marks this <see cref="T:Couchbase.IO.Connection"/> as used; meaning it cannot be disposed unless <see cref="P:Couchbase.IO.IConnection.InUse"/>
            is <c>false</c> or the <see cref="P:Couchbase.IO.IConnection.MaxCloseAttempts"/> has been reached.
            </summary>
            <param name="isUsed">if set to <c>true</c> [is used].</param>
        </member>
        <member name="M:Couchbase.IO.IConnection.CountdownToClose(System.UInt32)">
            <summary>
            Disposes this <see cref="T:Couchbase.IO.Connection"/> if <see cref="P:Couchbase.IO.IConnection.InUse"/> is <c>false</c>; otherwise
            it will wait for the interval and attempt again up until the <see cref="P:Couchbase.IO.IConnection.MaxCloseAttempts"/>
            threshold is met or <see cref="P:Couchbase.IO.IConnection.InUse"/> is <c>false</c>.
            </summary>
            <param name="interval">The interval to wait between close attempts.</param>
        </member>
        <member name="P:Couchbase.IO.IConnection.MaxCloseAttempts">
            <summary>
            Gets or sets the maximum times that the client will check the <see cref="P:Couchbase.IO.IConnection.InUse"/>
            property before closing the connection.
            </summary>
            <value>
            The maximum close attempts.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.CloseAttempts">
            <summary>
            Gets the number of close attempts that this <see cref="T:Couchbase.IO.Connection"/> has attemped.
            </summary>
            <value>
            The close attempts.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.HasShutdown">
            <summary>
            Gets a value indicating whether this instance is shutting down.
            </summary>
            <value>
            <c>true</c> if this instance has shutdown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.IO.IConnection.Authenticate">
            <summary>
            Authenticates this instance.
            </summary>
        </member>
        <member name="T:Couchbase.IO.IConnectionPool`1">
            <summary>
            Represents a pool of <see cref="T:Couchbase.IO.IConnection"/> objects which are TCP connections to Couchbase Server. 
            </summary>
        </member>
        <member name="M:Couchbase.IO.IConnectionPool`1.Release(`0)">
            <summary>
            Releases an acquired <see cref="T:Couchbase.IO.IConnection"/> object back into the pool so that it can be reused by another operation.
            </summary>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> to release back into the pool.</param>
        </member>
        <member name="T:Couchbase.IO.IIOService">
            <summary>
            Primary interface for the IO engine.
            </summary>
        </member>
        <member name="M:Couchbase.IO.IIOService.Execute``1(Couchbase.IO.Operations.IOperation{``0},Couchbase.IO.IConnection)">
            <summary>
            Executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> the operation is using.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.</returns>
            <remarks>This overload is used to perform authentication on the connection if it has not already been authenticated.</remarks>
        </member>
        <member name="M:Couchbase.IO.IIOService.Execute``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.</returns>
        </member>
        <member name="M:Couchbase.IO.IIOService.Execute(Couchbase.IO.Operations.IOperation)">
            <summary>
            Executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> being executed.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> representing the result of operation.</returns>
        </member>
        <member name="M:Couchbase.IO.IIOService.ExecuteAsync``1(Couchbase.IO.Operations.IOperation{``0},Couchbase.IO.IConnection)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> the operation is using.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.</returns>
            <remarks>This overload is used to perform authentication on the connection if it has not already been authenticated.</remarks>
        </member>
        <member name="M:Couchbase.IO.IIOService.ExecuteAsync``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.</returns>
            <remarks>This overload is used to perform authentication on the connection if it has not already been authenticated.</remarks>
        </member>
        <member name="P:Couchbase.IO.IIOService.EndPoint">
            <summary>
            The IP endpoint of the node in the cluster that this <see cref="T:Couchbase.IO.IIOService"/> instance is communicating with.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IIOService.ConnectionPool">
            <summary>
            The <see cref="T:Couchbase.IO.IConnectionPool"/> that this <see cref="T:Couchbase.IO.IIOService"/> instance is using for acquiring <see cref="T:Couchbase.IO.IConnection"/>s.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IIOService.SaslMechanism">
            <summary>
            The SASL mechanism type the <see cref="T:Couchbase.IO.IIOService"/> is using for authentication.
            </summary>
            <remarks>This could be PLAIN or CRAM-MD5 depending upon what the server supports.</remarks>
        </member>
        <member name="P:Couchbase.IO.IIOService.IsSecure">
            <summary>
            Returns true if internal TCP connections are using SSL.
            </summary>
        </member>
        <member name="M:Couchbase.IO.IIOService.ExecuteAsync(Couchbase.IO.Operations.IOperation,Couchbase.IO.IConnection)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection" /> the operation is using.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult" /> representing the result of operation.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.IIOService.ExecuteAsync(Couchbase.IO.Operations.IOperation)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1" /> being executed.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult" /> representing the result of operation.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="P:Couchbase.IO.IIOService.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether the server supports enhanced durability.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.IIOService.SupportsSubdocXAttributes">
            <summary>
            Gets a value indicating whether [supports subdoc x attributes].
            </summary>
            <value>
            <c>true</c> if [supports subdoc x attributes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Couchbase.IO.ResponseStatus">
            <summary>
            The response status for binary Memcached and Couchbase operations.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.None">
            <summary>
             Indicates that the enum has not been set.
            </summary>
            <remarks>0 has already been taken by the Memcached protocol for success.</remarks>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.Success">
            <summary>
            The operation was successful
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.KeyNotFound">
            <summary>
            The key does not exist in the database
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.KeyExists">
            <summary>
            The key exists in the database.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.ValueTooLarge">
            <summary>
            The value of the object stored was too large.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.InvalidArguments">
            <summary>
            The arguments of the operation were invalid.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.ItemNotStored">
            <summary>
            The item could not be stored in the database
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.IncrDecrOnNonNumericValue">
            <summary>
            The increment operation was called on a non-numeric value
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.VBucketBelongsToAnotherServer">
            <summary>
            The VBucket the operation was attempted on, no longer belongs to the server.
            <remarks>This is a common during rebalancing after adding or removing a node or during a failover.</remarks>
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.AuthenticationError">
            <summary>
            The connection to Couchbase could not be authenticated.
            </summary>
            <remarks>Check the bucket name and/or password being used.</remarks>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.AuthenticationContinue">
            <summary>
            During SASL authentication, another step (or more) must be made before authentication is complete.
            <remarks>This is a system-level response status.</remarks>
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.InvalidRange">
            <summary>
            The value was outside of supported range.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.UnknownCommand">
            <summary>
            The server received an unknown command from a client.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.OutOfMemory">
            <summary>
            The server is temporarily out of memory.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.NotSupported">
            <summary>
            The operation is not supported.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.InternalError">
            <summary>
            An internal error has occured.
            </summary>
            <remarks>See logs for more details.</remarks>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.Busy">
            <summary>
            The server was too busy to complete the operation.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.TemporaryFailure">
            <summary>
            A temporary error has occured in the server.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.ClientFailure">
            <summary>
            A client error has occured before the operation could be sent to the server.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.OperationTimeout">
            <summary>
            The operation exceeded the specified OperationTimeout configured for the client instance.
            </summary>
            <remarks>The default is 2500ms.</remarks>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.NoReplicasFound">
            <summary>
             Returned when the client cannot locate a replica within the cluster map config for a replica read.
             This would happen if a bucket was not configured to have replicas; if you encounter this error check
             to make sure you have indeed configured replicas on your bucket.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.NodeUnavailable">
            <summary>
            The node or service that the key has been mapped to is offline or cannot be reached.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.TransportFailure">
            <summary>
            Indicates that a transport layer failure occured while the client was sending or receiving data.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.DocumentMutationLost">
            <summary>
            Document Mutation lost during a hard failover.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.DocumentMutationDetected">
            <summary>
            A document mutation was detected on the document being observed.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocPathNotFound">
            <summary>
            Subdocument error indicating the path inside the JSON is invalid.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocPathMismatch">
            <summary>
            Subdocument error indicating one of the path components was denoting a wrong type (eg. trying to access
            an array index in an entry that isn't an array). Also for arithmetic operations when the value of the
            path is not a number.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocPathInvalid">
            <summary>
            Subdocument error indicating that the path provided is invalid. For operations requiring an array index, this
            is returned if the last component of that path isn't an array. Similarly for operations requiring a dictionary,
            if the last component isn't a dictionary but eg. an array index.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocPathTooBig">
            <summary>
             Subdocument error indicating that the path is too large (ie. the string is too long) or too deep (more that 32 components).
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocDocTooDeep">
            <summary>
            Subdocument error indicating that the target document's level of JSON nesting is too deep to be processed by the subdoc service.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocCannotInsert">
            <summary>
            Subdocument error indicating that the target document is not flagged or recognized as JSON.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocDocNotJson">
            <summary>
            Subdocument error indicating that, for arithmetic subdoc operations, the existing number is already too large.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocNumRange">
            <summary>
            Subdocument error indicating that for arithmetic subdoc operations, the operation will make the value too large.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocDeltaRange">
            <summary>
            Subdocument error indicating that for arithmetic subdoc operations, the operation will make the value too large.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocPathExists">
            <summary>
            Subdocument error indicating that the last component of the path already exist despite the mutation operation
            expecting it not to exist (the mutation was expecting to create only the last part of the path and store the
            fragment there).
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocValueTooDeep">
            <summary>
            Subdocument error indicating that, in a multi-specification, an invalid combination of commands were specified,
            including the case where too many paths were specified.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocInvalidCombo">
             <summary>
            Subdocument error indicating that, in a multi-specification, an invalid combination of commands were specified,
            including the case where too many paths were specified.
             </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocMultiPathFailure">
            <summary>
            Subdocument error indicating that, in a multi-specification, one or more commands failed to execute on a document
            which exists (ie. the key was valid).
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocXattrInvalidFlagCombo">
            <summary>
            Subdocument error indicating the flag combination for an XATTR operation was invalid.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.SubDocXattrInvalidKeyCombo">
            <summary>
            Subdocument error indicating the key combination for an XATTR opeation was invalid.
            </summary>
        </member>
        <member name="T:Couchbase.IO.SocketAwaitable">
            <summary>
            A class wrapper for <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> which supports await and async on <see cref="T:System.Net.Sockets.Socket"/> objects.
            </summary>
        </member>
        <member name="M:Couchbase.IO.SocketAwaitable.#ctor(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Ctor for <see cref="T:Couchbase.IO.SocketAwaitable"/>.
            </summary>
            <param name="eventArgs">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> object to use for the underlying IO operations.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Couchbase.IO.SocketAwaitable.EventArgs">
            <summary>
            Gets the internal <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> object that is wrapped by this instance.
            </summary>
        </member>
        <member name="P:Couchbase.IO.SocketAwaitable.IsCompleted">
            <summary>
            Returns true if the operation has comepleted.
            </summary>
        </member>
        <member name="M:Couchbase.IO.SocketAwaitable.Reset">
            <summary>
            Resets the object for reuse.
            </summary>
        </member>
        <member name="M:Couchbase.IO.SocketAwaitable.GetAwaiter">
            <summary>
            Gets the object being awaited on.
            </summary>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object.</returns>
        </member>
        <member name="M:Couchbase.IO.SocketAwaitable.OnCompleted(System.Action)">
            <summary>
            Fired when the asyncrounous operation has completed.
            </summary>
            <param name="continuation">The <see cref="T:System.Action"/> object to run if continuation is required.</param>
        </member>
        <member name="M:Couchbase.IO.SocketAwaitable.GetResult">
            <summary>
            Gets the result of the asynchronous <see cref="T:System.Net.Sockets.Socket"/> operation.
            </summary>
            <remarks>Throws <see cref="T:System.Net.Sockets.SocketException"/> if <see cref="T:System.Net.Sockets.SocketError"/> is not <see cref="F:System.Net.Sockets.SocketError.Success"/>.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
        </member>
        <member name="T:Couchbase.Cluster">
            <summary>
            The client interface to a Couchbase Server Cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Cluster.#ctor">
            <summary>
            Ctor for creating Cluster instance using the default settings.
            </summary>
            <remarks>
            This is the default configuration and will attempt to bootstrap off of localhost.
            </remarks>
        </member>
        <member name="M:Couchbase.Cluster.#ctor(Couchbase.Configuration.Client.ICouchbaseClientDefinition)">
            <summary>
            Ctor for creating Cluster instance using an <see cref="T:Couchbase.Configuration.Client.ICouchbaseClientDefinition"/>.
            </summary>
            <param name="definition">The configuration definition loaded from a configuration file.</param>
        </member>
        <member name="M:Couchbase.Cluster.#ctor(Couchbase.Configuration.Client.ClientConfiguration)">
            <summary>
            Ctor for creating Cluster instance with a custom <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/> configuration.
            </summary>
            <param name="configuration">The ClientCOnfiguration to use for initialization.</param>
        </member>
        <member name="M:Couchbase.Cluster.#ctor(Couchbase.Configuration.Client.ClientConfiguration,Couchbase.Core.IClusterController)">
            <summary>
            Ctor for creating Cluster instance.
            </summary>
            <param name="configuration">The ClientCOnfiguration to use for initialization.</param>
            <param name="clusterController">The ClusterManager instance use.</param>
            <remarks>
            This overload is primarly added for testing.
            </remarks>
        </member>
        <member name="M:Couchbase.Cluster.OpenBucket">
            <summary>
            Opens the default bucket associated with a Couchbase Cluster.
            </summary>
            <returns>An instance which implements the IBucket interface with the
            default buckets configuration.</returns>
            <remarks>Use Cluster.CloseBucket(bucket) to release resources associated with a Bucket.</remarks>
        </member>
        <member name="M:Couchbase.Cluster.OpenBucket(System.String,System.String)">
            <summary>
            Creates a connection to a specific SASL authenticated Couchbase Bucket.
            </summary>
            <param name="bucketname">The Couchbase Bucket to connect to.</param>
            <param name="password">The SASL password to use.</param>
            <returns>An instance which implements the IBucket interface.</returns>
            <remarks>Use Cluster.CloseBucket(bucket) to release resources associated with a Bucket.</remarks>
        </member>
        <member name="M:Couchbase.Cluster.OpenBucket(System.String)">
            <summary>
            Creates a connection to a non-SASL Couchbase bucket.
            </summary>
            <param name="bucketname">The Couchbase Bucket to connect to.</param>
            <returns>An instance which implements the IBucket interface.</returns>
            <remarks>
            Use Cluster.CloseBucket(bucket) to release resources associated with a Bucket.
            </remarks>
        </member>
        <member name="M:Couchbase.Cluster.CloseBucket(Couchbase.Core.IBucket)">
            <summary>
            Closes and releases all resources associated with a Couchbase bucket.
            </summary>
            <param name="bucket">The Bucket to close.</param>
        </member>
        <member name="M:Couchbase.Cluster.CreateManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IClusterManager"/> object that uses the current <see cref="T:Couchbase.Core.ICluster"/> configuration settings.
            </summary>
            <returns>A <see cref="T:Couchbase.Management.IClusterManager"/> instance that uses the current <see cref="T:Couchbase.Core.ICluster"/> configuration settings. </returns>
        </member>
        <member name="M:Couchbase.Cluster.CreateManager">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IClusterManager" /> object that uses the current <see cref="T:Couchbase.Core.ICluster" /> configuration settings
            and <see cref="T:Couchbase.Authentication.IClusterCredentials" /> for authentication.
            </summary>
            <returns>
            A <see cref="T:Couchbase.Management.IClusterManager" /> instance that uses the current <see cref="T:Couchbase.Core.ICluster" /> configuration settings
            and <see cref="T:Couchbase.Authentication.IClusterCredentials" /> for authentication.
            </returns>
            <exception cref="T:System.Security.Authentication.AuthenticationException">
            No credentials found. Please add them via <see cref="M:Couchbase.Core.ICluster.Authenticate(Couchbase.Authentication.IClusterCredentials)"/>.
            </exception>
        </member>
        <member name="P:Couchbase.Cluster.Info">
            <summary>
            Returns an object representing cluster status information.
            </summary>
        </member>
        <member name="P:Couchbase.Cluster.Configuration">
            <summary>
            The current client configuration being used by the <see cref="T:Couchbase.Cluster"/> object.
            Set this by passing in a <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/> object into <see cref="!:Initialize(ClientConfiguration)" /> or by
            providing a <see cref="!:CouchbaseClientSection"/> in your App.config or Web.config and calling <see cref="!:Initialize(string)"/>
            </summary>
        </member>
        <member name="M:Couchbase.Cluster.IsOpen(System.String)">
            <summary>
            Returns a response indicating whether or not the <see cref="T:Couchbase.Core.IBucket"/> instance has been opened and this <see cref="T:Couchbase.Cluster"/> instance is observing it.
            </summary>
            <param name="bucketName">The name of the bucket to check.</param>
            <returns>True if the <see cref="T:Couchbase.Core.IBucket"/> has been opened and the cluster is registered as an observer.</returns>
        </member>
        <member name="M:Couchbase.Cluster.Query``1(System.String)">
            <summary>
            Executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Cluster.QueryAsync``1(System.String)">
            <summary>
            Asynchronously executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> with the T a <see cref="T:Couchbase.N1QL.IQueryResult`1"/> instance.</returns>
            <remarks>Note this implementation is uncommitted/experimental and subject to change in future release!</remarks>
        </member>
        <member name="M:Couchbase.Cluster.Query``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Cluster.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Asynchronously executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Cluster.Authenticate(Couchbase.Authentication.IClusterCredentials)">
            <summary>
            Authenticates the specified credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Cluster.Dispose">
            <summary>
            Closes and releases all internal resources.
            </summary>
        </member>
        <member name="M:Couchbase.Cluster.Dispose(System.Boolean)">
            <summary>
            Disposes the Cluster object, calling GC.SuppressFinalize(this) if it's not called on the finalization thread.
            </summary>
            <param name="disposing">True if called by an explicit call to Dispose by the consuming application; false if called via finalization.</param>
        </member>
        <member name="T:Couchbase.CouchbaseBucket">
            <summary>
            Represents a persistent Couchbase Bucket and can be used for performing CRUD operations on documents,
            querying Views and executing N1QL queries.
            </summary>
            <seealso cref="T:Couchbase.Core.IBucket" />
            <seealso cref="T:Couchbase.Configuration.Server.Providers.IConfigObserver" />
            <seealso cref="T:Couchbase.IRefCountable" />
            <seealso cref="T:Couchbase.IQueryCacheInvalidator" />
            <seealso cref="T:Couchbase.Core.IO.SubDocument.ISubdocInvoker" />
        </member>
        <member name="F:Couchbase.CouchbaseBucket.RefCounts">
            <summary>
            Used for reference counting instances so that <see cref="M:System.IDisposable.Dispose"/> is only called by the last instance.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.#ctor(Couchbase.Core.Buckets.IRequestExecuter,Couchbase.IO.Converters.IByteConverter,Couchbase.Core.Transcoders.ITypeTranscoder)">
            <summary>
            For unit testing purposes only
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.BucketType">
            <summary>
            Returns type of the bucket. In this implementation the value is constant: Couchbase.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.Name">
            <summary>
            The Bucket's name. You can view this from the Couchbase Management Console.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.Cluster">
            <summary>
            Returns the <see cref="T:Couchbase.Core.ICluster"/> that this bucket belongs to
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Couchbase#Configuration#Server#Providers#IConfigObserver#NotifyConfigChanged(Couchbase.Configuration.IConfigInfo)">
            <summary>
            Called when a configuration update has occurred from the server.
            </summary>
            <param name="configInfo">The new configuration</param>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Append(System.String,System.String)">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Exists(System.String)">
            <summary>
            Checks for the existance of a given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key exists.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket._Exists(System.String)">
            <summary>
             Check for existence of a given key
            </summary>
            <param name="key">The key to check.</param>
            <returns> Returns the <see cref="T:Couchbase.IOperationResult"/> object containing Value as true if the key exists</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ExistsAsync(System.String)">
            <summary>
            Checks for the existance of a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to check.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket._ExistsAsync(System.String)">
            <summary>
            Checks for the existance of a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to check.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Append(System.String,System.Byte[])">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.AppendAsync(System.String,System.String)">
            <summary>
            Appends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to append to.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.AppendAsync(System.String,System.Byte[])">
            <summary>
            Appends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to append to.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.CreateManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Couchbase.Management.BucketManager" /> instance for managing buckets.
            </summary>
            <param name="username">The administrators username</param>
            <param name="password">The administrators username</param>
            <returns>
            A <see cref="T:Couchbase.Management.BucketManager" /> instance.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.CreateManager">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IBucketManager" /> instance for managing buckets using the <see cref="T:Couchbase.Authentication.IClusterCredentials" /> for authentication.
            </summary>
            <returns>
            A <see cref="T:Couchbase.Management.IBucketManager" /> instance.
            </returns>
            <exception cref="T:System.Security.Authentication.AuthenticationException">
            No credentials found.
            </exception>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Touch(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with no value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.TouchAsync(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.CreateQuery(System.String,System.String)">
            <summary>
            Creates an instance of an object that implements <see cref="T:Couchbase.Views.IViewQuery"/>, which targets a given bucket, design document and view.
            </summary>
            <param name="designDoc"></param>
            <param name="view"></param>
            <returns>An <see cref="T:Couchbase.Views.IViewQuery"/> which can have more filters and options applied to it.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.CreateQuery(System.String,System.String,System.Boolean)">
            <summary>
            Creates an instance of an object that implements <see cref="T:Couchbase.Views.IViewQuery"/>, which targets a given bucket and design document.
            </summary>
            <param name="designdoc">The design document that the View belongs to.</param>
            <param name="viewname"></param>
            <param name="development">True will execute on the development dataset.</param>
            >
            <returns>An <see cref="T:Couchbase.Views.IViewQuery"/> which can have more filters and options applied to it.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Decrement(System.String)">
            <summary>
            Decrements the value of a key by one. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Decrement(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Decrement(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Decrement(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Decrement(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>
            If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.DecrementAsync(System.String)">
            <summary>
            Decrements the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.DecrementAsync(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.DecrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Dispose">
            <summary>
            Closes this <see cref="T:Couchbase.CouchbaseBucket"/> instance, shutting down and releasing all resources,
            removing it from it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Equals(System.Object)">
            <summary>
            Compares for equality which is the Name of the Bucket and it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
            <param name="obj">The other <see cref="T:Couchbase.CouchbaseBucket"/> reference to compare against.</param>
            <returns>True if they have the same name and <see cref="T:Couchbase.Core.ClusterController"/> instance.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetDocumentsAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of documents by their given id as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="ids">The documents primary keys.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> array representing the asynchronous operation results.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Get``1(System.String)">
            <summary>
            Gets a value for a given key.
            </summary>
            <typeparam name="T">The Type of the value object to be retrieved.</typeparam>
            <param name="key">The unique Key to use to lookup the value.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Get``1(System.Collections.Generic.IList{System.String})">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options"></param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options"></param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAsync``1(System.String)">
            <summary>
             Gets a value for a given key as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="key">The documents primary key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetDocument``1(System.String)">
            <summary>
            Gets a document by it's given id.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>An <see cref="T:Couchbase.IResult`1"/> object containing the document if it's found and any other operation specific info.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetDocumentAsync``1(System.String)">
            <summary>
            Gets a document by it's given id asynchronously.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> object containing the document if it's found and any other operation specific info.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetFromReplica``1(System.String)">
            <summary>
            Gets a value for a key by checking each replica.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value being retrieved.</typeparam>
            <param name="key">The key of the value to retrieve.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the results of the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetFromReplicaAsync``1(System.String)">
            <summary>
            Gets a value for a key by checking each replica asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value being retrieved.</typeparam>
            <param name="key">The key of the value to retrieve.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetHashCode">
            <summary>
            Gets the hashcode for the CouchbaseBucket instance.
            </summary>
            <returns>The hashcode of the instance</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetWithLock``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the value.</returns>
            <remarks>Expirations exceeding 30 seconds will be defaulted to 15 seconds.</remarks>
            <remarks>An expiration value of 0 will be defaulted to 15 seconds at the cluster.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetWithLock``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1" /> with the value.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndLock``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the value.</returns>
            <remarks>Expirations exceeding 30 seconds will be defaulted to 15 seconds.</remarks>
            <remarks>An expiration value of 0 will be defaulted to 15 seconds at the cluster.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndLock``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1" /> with the value.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetWithLockAsync``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetWithLockAsync``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndLockAsync``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndLockAsync``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Increment(System.String)">
            <summary>
            Increments the value of a key by one. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Increment(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Increment(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Increment(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Increment(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>
            If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.IncrementAsync(System.String)">
            <summary>
            Increments the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created.
            and seeded with 1.
            </summary>
            <param name="key"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>/// <returns></returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.IncrementAsync(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.IncrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Inserts a list of JSON documents asynchronously, each document failing if it already exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Inserts a list of JSON documents asynchronously, each document failing if it already exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a list of JSON documents asynchronously, each document failing if it already exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0)">
            <summary>
            Inserts a document into the database using a given key, failing if the key exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts a document into the database using a given key, failing if the key exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database using a given key, failing if the key exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns>A Task that can be awaited on for it's <see cref="T:Couchbase.IOperationResult`1"/> value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket" />failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket" />failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket" />failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Couchbase#IRefCountable#AddRef">
            <summary>
            Increments the reference counter for this <see cref="T:Couchbase.Core.IBucket"/> instance.
            </summary>
            <returns>The current count of all <see cref="T:Couchbase.Core.IBucket"/> references, or -1 if a reference could not be added because the bucket is disposed.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Couchbase#IRefCountable#Release">
            <summary>
            Decrements the reference counter and calls <see cref="M:System.IDisposable.Dispose"/> if the count is zero.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs 'observe' on a given key to ensure that it's durability requirements with respect to persistence and replication are satisfied.
            </summary>
            <param name="key">The key to 'observe'.</param>
            <param name="cas">The 'Check and Set' or CAS value for the key.</param>
            <param name="deletion">True if the operation performed is a 'remove' operation.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>A <see cref="T:Couchbase.IO.Operations.ObserveResponse"/> value indicating if the durability requirement were or were not met.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ObserveAsync(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs 'observe' on a given key to ensure that it's durability requirements with respect to persistence and replication are satisfied asynchronously.
            </summary>
            <param name="key">The key to 'observe'.</param>
            <param name="cas">The 'Check and Set' or CAS value for the key.</param>
            <param name="deletion">True if the operation performed is a 'remove' operation.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1" /> value indicating if the durability requirement were or were not met.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Prepend(System.String,System.String)">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndTouch``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the key's value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndTouchAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndTouchDocument``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> with the key's document.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndTouchDocumentAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Prepend(System.String,System.Byte[])">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.PrependAsync(System.String,System.String)">
            <summary>
            Prepends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend to.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.PrependAsync(System.String,System.Byte[])">
            <summary>
            Prepends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend to.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Query``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a View query and returns the result.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> used to generate the results.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.Views.IViewResult{T}"/> Type with the results of the query.</returns>
            <remarks>Use one of the IBucket.CreateQuery overloads to generate the query.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Query``1(System.String)">
            <summary>
            Executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Query``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueryAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Asynchronously Executes a View query and returns the result.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> used to generate the results.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> with the T a <see cref="T:Couchbase.Views.IViewResult`1"/> instance.</returns>
            <remarks>Note this implementation is experimental and subject to change in future release!</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueryAsync``1(System.String)">
            <summary>
            Asynchronously executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
            <remarks>Note this implementation is uncommitted/experimental and subject to change in future release!</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Asynchronously executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueryAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String)">
            <summary>
            For a given key, removes a document from the database.
            </summary>
            <param name="key">The unique key for indexing.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String,Couchbase.ReplicateTo)">
            <summary>
            For a given key, removes a document from the database.
            </summary>
            <param name="key">The unique key for indexing.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            For a given key, removes a document from the database.
            </summary>
            <param name="key">The unique key for indexing.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            For a given key, removes a document from the database.
            </summary>
            <param name="key">The unique key for indexing.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1" /> result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance with the options for the given operation.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1" /> result.
            </returns>
            <remarks>
            Use the <see cref="T:System.Threading.Tasks.ParallelOptions" /> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken" /> with the operation.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1" /> result.
            </returns>
            <remarks>
            Use the <see cref="T:System.Threading.Tasks.ParallelOptions" /> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken" /> with the operation.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String)">
            <summary>
            Asynchronously removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> to remove from the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Removes a list of <see cref="T:Couchbase.IDocument" /> from  the bucket asynchronously.
            </summary>
            <typeparam name="T">The type T of the document.</typeparam>
            <param name="documents">The documents.</param>
            <returns>
            A list of <see cref="T:System.Threading.Tasks.Task`1" /> objects representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Removes a list of <see cref="T:Couchbase.IDocument" /> from  the bucket asynchronously.
            </summary>
            <typeparam name="T">The type T of the document.</typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <returns>
            A list of <see cref="T:System.Threading.Tasks.Task`1" /> objects representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a list of <see cref="T:Couchbase.IDocument" /> from  the bucket asynchronously.
            </summary>
            <typeparam name="T">The type T of the document.</typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>
            A list of <see cref="T:System.Threading.Tasks.Task`1" /> objects representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0)">
            <summary>
            Replaces a value for a key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces a value for a key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces a value for a key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas"></param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a value for a key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Unlock(System.String,System.UInt64)">
            <summary>
            Unlocks a key that was locked with <see cref="M:Couchbase.CouchbaseBucket.GetWithLock``1(System.String,System.UInt32)"/>.
            </summary>
            <param name="key">The key of the document to unlock.</param>
            <param name="cas">The 'check and set' value to use as a comparison</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UnlockAsync(System.String,System.UInt64)">
            <summary>
            Unlocks a key that was locked with <see cref="M:Couchbase.CouchbaseBucket.GetWithLock``1(System.String,System.UInt32)"/> as an asynchronous operation.
            </summary>
            <param name="key">The key of the document to unlock.</param>
            <param name="cas">The 'check and set' value to use as a comparison</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Couchbase.CouchbaseBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)" -->
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket" /> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket" /> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket" /> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Upserts a list of <see cref="T:Couchbase.IDocument`1" /> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> list.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Upserts a list of <see cref="T:Couchbase.IDocument`1" /> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <param name="replicateTo"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> list.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts a list of <see cref="T:Couchbase.IDocument`1" /> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> list.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.IsSecure">
            <summary>
            Returns true if bucket is using SSL encryption between the client and the server.
            </summary>
            <remarks>If the server is not available (<see cref="T:Couchbase.ServerUnavailableException"/>), will default to false.</remarks>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.Couchbase#Core#IBucket#Configuration">
            <summary>
            Gets the configuration for the bucket
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether enhanced durability is enabled.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability and it is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.SupportsSubdocXAttributes">
            <summary>
            Gets a value indicating whether subdoc operations on xattributes are available.
            </summary>
            <value>
            <c>true</c> if the cluster supports subdoc operations on xattributes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>
            An <see cref="T:System.Int32" /> representing the size of the cache before it was cleared.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.CheckForConfigUpdates``1(Couchbase.IOperationResult{``0},Couchbase.IO.Operations.IOperation)">
            <summary>
            Performs a CCCP request for the latest server configuration if the passed in operationResult
            results in a NMV response.
            </summary>
            <typeparam name="T">The Type parameter of the passed in operation.</typeparam>
            <param name="operationResult">The <see cref="T:Couchbase.IOperationResult`1"/> to check.</param>
            <param name="operation"></param>
            <returns>True if the operation should be retried again with the new config.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Dispose(System.Boolean)">
            <summary>
            Closes this <see cref="T:Couchbase.CouchbaseBucket"/> instance, shutting down and releasing all resources,
            removing it from it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
            <param name="disposing">If true suppresses finalization.</param>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Equals(Couchbase.CouchbaseBucket)">
            <summary>
            Compares for equality which is the Name of the Bucket and it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
            <param name="other">The other <see cref="T:Couchbase.CouchbaseBucket"/> reference to compare against.</param>
            <returns>True if they have the same name and <see cref="T:Couchbase.Core.ClusterController"/> instance.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.MapGet``1(System.String,System.String)">
            <summary>
            Gets the value for a given key from a hashmap within a JSON document.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <returns>
            The value as <see cref="T:Couchbase.IResult`1" />
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.MapRemove(System.String,System.String)">
            <summary>
            Removes the value for a given key from a hashmap within a JSON document.
            </summary>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.MapSize(System.String)">
            <summary>
            Gets the size of a hashmap within a JSON document.
            </summary>
            <param name="key">The key.</param>
            <returns>
            A <see cref="T:Couchbase.IResult`1" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.MapAdd(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a key/value pair to a JSON hashmap document.
            </summary>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <param name="value">The value.</param>
            <param name="createMap">If set to <c>true</c> create document.</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListGet``1(System.String,System.Int32)">
            <summary>
            Returns the value at a given index assuming a JSON array.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <returns>
            The value as <see cref="T:Couchbase.IResult`1" />
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListAppend(System.String,System.Object,System.Boolean)">
            <summary>
            Appends a value to the back of a JSON array within a document.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createList">If set to <c>true</c> [create list].</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListPrepend(System.String,System.Object,System.Boolean)">
            <summary>
            Prepends a value to the front of a JSON array within a document.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createList">If set to <c>true</c> [create list].</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListRemove(System.String,System.Int32)">
            <summary>
            Removes a value at a given index with a JSON document.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListSet(System.String,System.Int32,System.String)">
            <summary>
            Adds a value to an array within a JSON document at a given index.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListSize(System.String)">
            <summary>
            Gets the size of an array within a JSON document.
            </summary>
            <param name="key">The key.</param>
            <returns>
            A <see cref="T:Couchbase.IResult`1" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.SetAdd(System.String,System.String,System.Boolean)">
            <summary>
            Adds a value to a set within a JSON array within a document.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createSet">If set to <c>true</c> [create set].</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.SetContains(System.String,System.String)">
            <summary>
            Checks if a set contains a given value within a JSON document.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:Couchbase.IResult`1" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.SetSize(System.String)">
            <summary>
            Gets the size of a set within a JSON document.
            </summary>
            <param name="key">The key.</param>
            <returns>
            A <see cref="T:Couchbase.IResult`1" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.SetRemove``1(System.String,``0)">
            <summary>
            Removes a value from a set withing a JSON document.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueuePush``1(System.String,``0,System.Boolean)">
            <summary>
            Adds a value to the end of a queue stored in a JSON document.
            </summary>
            <typeparam name="T">The Type of the value being added to the queue</typeparam>
            <param name="key">The key for the document.</param>
            <param name="value">The value that is to be added to the queue.</param>
            <param name="createQueue">If <c>true</c> then the document will be created if it doesn't exist</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueuePop``1(System.String)">
            <summary>
            Removes a value from the front of a queue stored in a JSON document.
            </summary>
            <typeparam name="T">The type of the value being retrieved.</typeparam>
            <param name="key">The key for the queue.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueueSize(System.String)">
            <summary>
            Returns the number of items in the queue stored in the JSON document.
            </summary>
            <param name="key">The key for the document.</param>
            <returns>An <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.MapGetAsync``1(System.String,System.String)">
            <summary>
            Gets the value for a given key from a hashmap within a JSON document asynchronously.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <returns>
            The value as <see cref="T:Couchbase.IResult`1" />
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.MapRemoveAsync(System.String,System.String)">
            <summary>
            Removes the value for a given key from a hashmap within a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.MapSizeAsync(System.String)">
            <summary>
            Gets the size of a hashmap within a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <returns>
            A <see cref="T:Couchbase.IResult`1" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.MapAddAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a key/value pair to a JSON hashmap document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="mapkey">The mapkey.</param>
            <param name="value">The value.</param>
            <param name="createMap">If set to <c>true</c> create document.</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListGetAsync``1(System.String,System.Int32)">
            <summary>
            Returns the value at a given index assuming a JSON array asynchronously.
            </summary>
            <typeparam name="TContent">The type of the content.</typeparam>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <returns>
            The value as <see cref="T:Couchbase.IResult`1" />
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListAppendAsync(System.String,System.Object,System.Boolean)">
            <summary>
            Appends a value to the back of a JSON array within a document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createList">If set to <c>true</c> [create list].</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListPrependAsync(System.String,System.Object,System.Boolean)">
            <summary>
            Prepends a value to the front of a JSON array within a document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createList">If set to <c>true</c> [create list].</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListRemoveAsync(System.String,System.Int32)">
            <summary>
            Removes a value at a given index with a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListSetAsync(System.String,System.Int32,System.String)">
            <summary>
            Adds a value to an array within a JSON document at a given index asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ListSizeAsync(System.String)">
            <summary>
            Gets the size of an array within a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <returns>
            A <see cref="T:Couchbase.IResult`1" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.SetAddAsync(System.String,System.String,System.Boolean)">
            <summary>
            Adds a value to a set within a JSON array within a document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="createSet">If set to <c>true</c> [create set].</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.SetContainsAsync(System.String,System.String)">
            <summary>
            Checks if a set contains a given value within a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:Couchbase.IResult`1" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.SetSizeAsync(System.String)">
            <summary>
            Gets the size of a set within a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <returns>
            A <see cref="T:Couchbase.IResult`1" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.SetRemoveAsync``1(System.String,``0)">
            <summary>
            Removes a value from a set withing a JSON document asynchronously.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            A <see cref="T:Couchbase.IResult" /> with the operation result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueuePushAsync``1(System.String,``0,System.Boolean)">
            <summary>
            Adds a value to the end of a queue stored in a JSON document asynchronously.
            </summary>
            <typeparam name="T">The Type of the value being added to the queue</typeparam>
            <param name="key">The key for the document.</param>
            <param name="value">The value that is to be added to the queue.</param>
            <param name="createQueue">If <c>true</c> then the document will be created if it doesn't exist</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueuePopAsync``1(System.String)">
            <summary>
            Removes a value from the front of a queue stored in a JSON document asynchronously.
            </summary>
            <typeparam name="T">The type of the value being retrieved.</typeparam>
            <param name="key">The key for the queue.</param>
            <returns>A <see cref="T:Couchbase.IResult`1"/> with the operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueueSizeAsync(System.String)">
            <summary>
            Returns the number of items in the queue stored in the JSON document asynchronously.
            </summary>
            <param name="key">The key for the document.</param>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Query``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Executes an Analytics statemnt via a <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> against the Couchbase cluster.
            </summary>
            <typeparam name="T">The type to deserialize the results to.</typeparam>
            <param name="analyticsRequest">A <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> that contains the statement to be executed.</param>
            <returns>An instance of <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> with the result of the query.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueryAsync``1(Couchbase.Analytics.IAnalyticsRequest)">
            <summary>
            Asynchronously executes an Analytics statemnt via a <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> against the Couchbase cluster.
            </summary>
            <typeparam name="T">The type to deserialize the results to.</typeparam>
            <param name="analyticsRequest">A <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> that contains the statement to be executed.</param>
            <returns>An instance of <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> with the result of the query.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueryAsync``1(Couchbase.Analytics.IAnalyticsRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an Analytics statemnt via a <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> against the Couchbase cluster.
            </summary>
            <typeparam name="T">The type to deserialize the results to.</typeparam>
            <param name="analyticsRequest">A <see cref="T:Couchbase.Analytics.IAnalyticsRequest"/> that contains the statement to be executed.</param>
            <param name="cancellationToken">A cancellation token that can be used to stop the query being executed.</param>
            <returns>An instance of <see cref="T:Couchbase.Analytics.IAnalyticsResult`1"/> with the result of the query.</returns>
        </member>
        <member name="T:Couchbase.ClusterInfo">
            <summary>
            Client interface for getting information about the cluster. Since each version of the server can return a different
            range of data, for now this is only retrieved as plain JSON and it is up to the user to check what kind of data is
            available.
            </summary>
        </member>
        <member name="M:Couchbase.ClusterInfo.Pools">
            <summary>
            Returns the configuration of the <see cref="M:Couchbase.ClusterInfo.Pools">pools</see> in this cluster.
            The Pools should only be used in a readonly fashion!
            </summary>
            <returns>The pools configuration.</returns>
        </member>
        <member name="M:Couchbase.ClusterInfo.BucketConfigs">
            <summary>
            Returns the configuration of the <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig">buckets</see> in this cluster.
            The list can be modified but each IBucketConfiguration should only be used in a readonly fashion!
            </summary>
            <returns>The list of bucket configurations.</returns>
        </member>
        <member name="T:Couchbase.DocumentAlreadyExistsException">
            <summary>
            Thrown when an attempt is made to insert a document that already exists.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Couchbase.DocumentDoesNotExistException">
            <summary>
            Thrown when an attempt is made to replace or get a document that does not exist.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Couchbase.IDocument">
            <summary>
            Base interface for a document.
            </summary>
        </member>
        <member name="P:Couchbase.IDocument.Id">
            <summary>
            The unique identifier for the document
            </summary>
        </member>
        <member name="P:Couchbase.IDocument.Cas">
            <summary>
            The "Check and Set" value for enforcing optimistic concurrency
            </summary>
        </member>
        <member name="P:Couchbase.IDocument.Expiry">
            <summary>
            The time-to-live or TTL for the document before it's evicted from disk in milliseconds.
            </summary>
            <remarks>Setting this to zero or less will give the document infinite lifetime</remarks>
        </member>
        <member name="P:Couchbase.IDocument.Token">
            <summary>
            Gets the mutation token for the operation if enhanced durability is enabled.
            </summary>
            <value>
            The mutation token.
            </value>
            <remarks>Note: this is used internally for enhanced durability if supported by
            the Couchbase server version and enabled by configuration.</remarks>
        </member>
        <member name="M:Couchbase.IDocumentFragment.Content``1(System.String)">
            <summary>
            The value if it exists for a specific path.
            </summary>
            <typeparam name="TContent">The <see cref="T:System.Type"/> to cast the value to.</typeparam>
            <param name="path">The path of the operation to retrieve the value from.</param>
            <returns>An object of type <see cref="T:System.Type"/> representing the value of the operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.IDocumentFragment.Content``1(System.Int32)">
            <summary>
            The value if it exists for a specific index.
            </summary>
            <typeparam name="TContent">The <see cref="T:System.Type"/> to cast the value to.</typeparam>
            <param name="index">The ordinal of the operation to retrieve the value from.</param>
            <returns>An object of type <see cref="T:System.Type"/> representing the value of the operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.IDocumentFragment.Content(System.String)">
            <summary>
            The value if it exists for a specific path.
            </summary>
            <param name="path">The path of the operation to retrieve the value from.</param>
            <returns>An <see cref="T:System.Object"/> representing the result of a operation.</returns>
            <remarks>If no value exists, the default value (null) for the <see cref="T:System.Object"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.IDocumentFragment.Content(System.Int32)">
            <summary>
            The value if it exists for a specific index.
            </summary>
            <param name="index">The ordinal of the operation to retrieve the value from.</param>
            <returns>An <see cref="T:System.Object"/> representing the result of a operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
            <remarks>If no value exists, the default value (null) for the <see cref="T:System.Object"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.IDocumentFragment.Exists(System.String)">
            <summary>
            Checks whether the given path is part of this result set, eg. an operation targeted it, and the operation executed successfully.
            </summary>
            <param name="path">The path for the sub-document operation.</param>
            <returns><s>true</s> if that path is part of the successful result set, <s>false</s> in any other case.</returns>
        </member>
        <member name="M:Couchbase.IDocumentFragment.Count">
            <summary>
            The count of the sub-document operations chained togather.
            </summary>
            <returns>An <see cref="T:System.Int32"/> that is the count of the total operations chained togather.</returns>
        </member>
        <member name="M:Couchbase.IDocumentFragment.OpStatus(System.String)">
            <summary>
            Gets the <see cref="T:Couchbase.IO.ResponseStatus"/> for a specific operation at it's path.
            </summary>
            <param name="path">The path of the operation.</param>
            <returns>The <see cref="T:Couchbase.IO.ResponseStatus"/> that the server returned.</returns>
        </member>
        <member name="M:Couchbase.IDocumentFragment.OpStatus(System.Int32)">
            <summary>
            Gets the <see cref="T:Couchbase.IO.ResponseStatus"/> for a specific operation at it's index.
            </summary>
            <param name="index">The ordinal of the operation.</param>
            <returns>The <see cref="T:Couchbase.IO.ResponseStatus"/> that the server returned.</returns>
        </member>
        <member name="T:Couchbase.IDocumentFragment`1">
            <summary>
            Represents one more fragments of an <see cref="T:Couchbase.IDocument`1"/> that is returned by the sub-document API.
            </summary>
            <typeparam name="TDocument">The document</typeparam>
        </member>
        <member name="P:Couchbase.IDocumentFragment`1.Expiry">
            <summary>
            The time-to-live or TTL for the document before it's evicted from disk in milliseconds.
            </summary>
            <remarks>Setting this to zero or less will give the document infinite lifetime</remarks>
        </member>
        <member name="T:Couchbase.IQueryCacheInvalidator">
            <summary>
            Provides a method signature for invalidating and clearing a cache.
            </summary>
        </member>
        <member name="M:Couchbase.IQueryCacheInvalidator.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the size of the cache before it was cleared.</returns>
        </member>
        <member name="T:Couchbase.IDocumentResult">
            <summary>
            The return type for "document" centric operation requests that do not return documents - e.g. remove
            </summary>
        </member>
        <member name="P:Couchbase.IDocumentResult.Status">
            <summary>
            The response status returned by the server when fulfilling the request.
            </summary>
        </member>
        <member name="P:Couchbase.IDocumentResult.Id">
            <summary>
            Gets the id or key for the document.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="T:Couchbase.Management.BucketSettings">
            <summary>
            Consolidates the setting for configuring a Bucket on a Couchbase server.
            <remarks>Defaults are equivalent to the defaults of Couchbase Management Console when creating a Bucket.</remarks>
            </summary>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.Name">
            <summary>
            Gets or sets the name of the bucket
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.RamQuota">
            <summary>
            Gets or sets the RAM quota in megabytes. The default is 100.
            </summary>
            <value>
            The ram quota.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.BucketType">
            <summary>
            Gets or sets the type of bucket to be created. “Memcached” configures as Memcached bucket. “Couchbase” configures as Couchbase bucket
            </summary>
            <value>
            The type of the bucket.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.ReplicaNumber">
            <summary>
            Gets or sets the number of replicas of each document: minimum 0, maximum 3.
            </summary>
            <value>
            The replica number.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.AuthType">
            <summary>
            Gets or sets the type of the authentication to use.
            </summary>
            <value>
            The type of the authentication.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.IndexReplicas">
            <summary>
            Gets or sets a value indicating whether to index the replicas.
            </summary>
            <value>
              <c>true</c> if replicas are indexed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.FlushEnabled">
            <summary>
            Gets or sets a value indicating whether flush is enabled for the specified bucket.
            </summary>
            <value>
              <c>true</c> if flush is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.ParallelDbAndViewCompaction">
            <summary>
            Gets or sets a value indicating whether database and view files on disk can be compacted simultaneously.
            </summary>
            <value>
            <c>true</c> if true then database and view compaction will be parallelized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.SaslPassword">
            <summary>
            Gets or sets the password for SASL authentication. Required if SASL authentication has been enabled.
            </summary>
            <value>
            The sasl password.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.ThreadNumber">
            <summary>
            Gets or sets the number of concurrent readers and writers for the data bucket.
            </summary>
            <value>
            The thread number.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.Services">
            <summary>
            Gets or sets the services that will be enabled on the host.
            </summary>
            <value>
            The services: kv, query and/or data.
            </value>
        </member>
        <member name="T:Couchbase.Management.ClusterProvisioner">
            <summary>
            A convenience class for configuring a cluster from a set of provisioned Couchbase nodes.
            </summary>
            <remarks>This class is **EXPERIMENTAL** and subject to change in future releases.</remarks>
        </member>
        <member name="M:Couchbase.Management.ClusterProvisioner.ProvisionNodeAsync(System.String,Couchbase.Management.CouchbaseService[])">
            <summary>
            Provisions a Couchbase server node, adding it to an existing cluster.
            </summary>
            <param name="hostname">The hostname.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterProvisioner.ProvisionNodesAsync(Couchbase.Management.CouchbaseService[])">
            <summary>
            Provisions the nodes defined in the ClientConfiguration.Servers list, skipping
            the first node which is the entry point (EP).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterProvisioner.ProvisionEntryPointAsync(System.String,Couchbase.Management.BucketSettings,System.UInt32,System.UInt32)">
            <summary>
            Provisions the entry point Couchbase server node.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="defaultSettings">The default settings.</param>
            <param name="dataRamQuota">The data ram quota.</param>
            <param name="indexRamQuota">The index ram quota.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterProvisioner.ProvisionSampleBucketAsync(System.String,System.String)">
            <summary>
            Provisions a sample bucket: beer-sample, travel-sample or game-sim.
            </summary>
            <param name="bucketName">Name of the bucket.</param>
            <param name="hostname">The hostname.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterProvisioner.ProvisionBucketAsync(Couchbase.Management.BucketSettings,System.String)">
            <summary>
            Provisions a bucket adding it to a CouchbaseCluster
            </summary>
            <param name="bucketSettings">The bucket settings.</param>
            <param name="hostname">The hostname</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Management.Indexes.IndexInfo">
            <summary>
            Represents the meta-data related to an index in Couchbase Server.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Indexes.IndexInfo.Name">
            <summary>
            The name of the index.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Indexes.IndexInfo.IsPrimary">
            <summary>
            Whether or not the index is a primary index - <c>true</c> if a primary index; otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Indexes.IndexInfo.Type">
            <summary>
            The type of index
            </summary>
        </member>
        <member name="P:Couchbase.Management.Indexes.IndexInfo.RawType">
            <summary>
            Raw string type in case a new index type is introduced, for forward-compatibility
            </summary>
        </member>
        <member name="P:Couchbase.Management.Indexes.IndexInfo.State">
            <summary>
            The indexes current state.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Indexes.IndexInfo.Keyspace">
            <summary>
            The keyspace that the index belongs to.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Indexes.IndexInfo.Namespace">
            <summary>
            The namespace that the index belongs to.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Indexes.IndexInfo.IndexKey">
            <summary>
            The index key.
            </summary>
        </member>
        <member name="P:Couchbase.Management.Indexes.IndexInfo.Condtion">
            <summary>
            The predicate.
            </summary>
        </member>
        <member name="T:Couchbase.Management.MemcachedBucketManager">
            <summary>
            An <see cref="T:Couchbase.Core.IBucket"/> implementation for doing mangement operations on a <see cref="T:Couchbase.MemcachedBucket"/>.
            </summary>
            <seealso cref="T:Couchbase.Management.BucketManager" />
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.BuildN1qlDeferredIndexes">
            <summary>
            Builds any indexes that have been created with the "defer" flag and are still in the "pending" state on the current <see cref="T:Couchbase.Core.IBucket" />.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IList`1" /> with the status for each index built.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.BuildN1qlDeferredIndexesAsync">
            <summary>
            Builds any indexes that have been created with the "defered" flag and are still in the "pending" state asynchronously.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.CreateN1qlIndex(System.String,System.Boolean,System.String[])">
            <summary>
            Creates a secondary index on the current <see cref="T:Couchbase.Core.IBucket" /> reference.
            </summary>
            <param name="indexName">Name of the index to create.</param>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <param name="fields">The fields to index on.</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the request.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.CreateN1qlIndexAsync(System.String,System.Boolean,System.String[])">
            <summary>
            Creates a secondary index with optional fields asynchronously.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <param name="fields">The fields to index on.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.CreateN1qlPrimaryIndex(System.Boolean)">
            <summary>
            Creates the primary index for the current bucket if it doesn't already exist.
            </summary>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.CreateN1qlPrimaryIndex(System.String,System.Boolean)">
            <summary>
            Creates a primary index on the current <see cref="T:Couchbase.Core.IBucket" /> reference.
            </summary>
            <param name="customName">The name of the index.</param>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the request.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.CreateN1qlPrimaryIndexAsync(System.Boolean)">
            <summary>
            Creates a primary index on the current <see cref="T:Couchbase.Core.IBucket" /> asynchronously.
            </summary>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.CreateN1qlPrimaryIndexAsync(System.String,System.Boolean)">
            <summary>
            Creates a named primary index on the current <see cref="T:Couchbase.Core.IBucket" /> asynchronously.
            </summary>
            <param name="customName">The name of the custom index.</param>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.DropN1qlIndexAsync(System.String)">
            <summary>
            Drops an index by name asynchronously.
            </summary>
            <param name="name">The name of the index to drop.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.DropN1qlPrimaryIndex(System.String)">
            <summary>
            Drops the named primary index if it exists on the current <see cref="T:Couchbase.Core.IBucket" />.
            </summary>
            <param name="customName">Name of primary index.</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the request.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.DropN1qlPrimaryIndexAsync">
            <summary>
            Drops the primary index of the current <see cref="T:Couchbase.Core.IBucket" /> asynchronously.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.DropNamedPrimaryIndexAsync(System.String)">
            <summary>
            Drops the named primary index on the current <see cref="T:Couchbase.Core.IBucket" /> asynchronously.
            </summary>
            <param name="customName">Name of the primary index to drop.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.InsertDesignDocument(System.String,System.String)">
            <summary>
            Inserts a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>
            A boolean value indicating the result.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.GetDesignDocument(System.String)">
            <summary>
            Retrieves the contents of a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>
            A design document object.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.GetDesignDocumentAsync(System.String)">
            <summary>
            Retrieves the contents of a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>
            A design document object.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.ExecuteIndexRequestAsync(System.String)">
            <summary>
            Executes the index request asynchronously.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.ExecuteIndexRequest(System.String)">
            <summary>
            Executes the index request syncronously.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.GetDesignDocuments(System.Boolean)">
            <summary>
            Lists all existing design documents.
            </summary>
            <param name="includeDevelopment">Whether or not to show development design documents in the results.</param>
            <returns>
            The design document as a string.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.GetDesignDocumentsAsync(System.Boolean)">
            <summary>
            Lists all existing design documents.
            </summary>
            <param name="includeDevelopment">Whether or not to show development design documents in the results.</param>
            <returns>
            The design document as a string.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.InsertDesignDocumentAsync(System.String,System.String)">
            <summary>
            Inserts a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>
            A boolean value indicating the result.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.ListN1qlIndexes">
            <summary>
            Lists the indexes for the current <see cref="T:Couchbase.Core.IBucket" />.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.ListN1qlIndexesAsync">
            <summary>
            Lists the indexes for a the current <see cref="T:Couchbase.Core.IBucket" /> asynchronously.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.RemoveDesignDocument(System.String)">
            <summary>
            Removes a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>
            A boolean value indicating the result.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.RemoveDesignDocumentAsync(System.String)">
            <summary>
            Removes a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>
            A boolean value indicating the result.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.UpdateDesignDocument(System.String,System.String)">
            <summary>
            Updates a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>
            A boolean value indicating the result.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.UpdateDesignDocumentAsync(System.String,System.String)">
            <summary>
            Updates a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>
            A boolean value indicating the result.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.WatchN1qlIndexes(System.Collections.Generic.List{System.String},System.TimeSpan)">
            <summary>
            Watches all given indexes, polling the query service until they are "online" or the <param name="watchTimeout"/> has expired.
            </summary>
            <param name="indexNames">The list of indexes to watch for.</param>
            <param name="watchTimeout">The timeout for the watch.</param>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.WatchN1qlIndexesAsync(System.Collections.Generic.List{System.String},System.TimeSpan)">
            <summary>
            Watches all given indexes, asynchronously polling the query service until they are "online" or the <param name="watchTimeout"/> has expired.
            </summary>
            <param name="indexNames">The list of indexes to watch for.</param>
            <param name="watchTimeout">The timeout for the watch.</param>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.DropN1qlIndex(System.String)">
            <summary>
            Drops a secondary index on the current <see cref="T:Couchbase.Core.IBucket" /> reference.
            </summary>
            <param name="name">The name of the secondary index to drop.</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the request.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.Management.MemcachedBucketManager.DropN1qlPrimaryIndex">
            <summary>
            Drops the primary index on the current <see cref="T:Couchbase.Core.IBucket" />.
            </summary>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the request.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="T:Couchbase.Management.BucketManager">
            <summary>
            An intermediate class for doing management operations on a Bucket.
            </summary>
        </member>
        <member name="T:Couchbase.Management.BucketManager.Statements">
            <summary>
            N1QL statements for creating and dropping indexes on the current bucket
            </summary>
        </member>
        <member name="P:Couchbase.Management.BucketManager.BucketName">
            <summary>
            The name of the Bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Management.BucketManager.ListN1qlIndexes">
            <summary>
            Lists the indexes for the current <see cref="T:Couchbase.Core.IBucket" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.ListN1qlIndexesAsync">
            <summary>
            Lists the indexes for a the current <see cref="T:Couchbase.Core.IBucket" /> asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.WatchN1qlIndexes(System.Collections.Generic.List{System.String},System.TimeSpan)">
            <summary>
            Watches all given indexes, polling the query service until they are "online" or the <param name="watchTimeout"/> has expired.
            </summary>
            <param name="indexNames">The list of indexes to watch for.</param>
            <param name="watchTimeout">The timeout for the watch.</param>
        </member>
        <member name="M:Couchbase.Management.BucketManager.WatchN1qlIndexesAsync(System.Collections.Generic.List{System.String},System.TimeSpan)">
            <summary>
            Watches all given indexes, asynchronously polling the query service until they are "online" or the <param name="watchTimeout"/> has expired.
            </summary>
            <param name="indexNames">The list of indexes to watch for.</param>
            <param name="watchTimeout">The timeout for the watch.</param>
        </member>
        <member name="M:Couchbase.Management.BucketManager.CreateN1qlPrimaryIndex(System.Boolean)">
            <summary>
            Creates the primary index for the current bucket if it doesn't already exist.
            </summary>
            <param name="defer"> If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
        </member>
        <member name="M:Couchbase.Management.BucketManager.CreateN1qlPrimaryIndexAsync(System.Boolean)">
            <summary>
            Creates a primary index on the current <see cref="T:Couchbase.Core.IBucket" /> asynchronously.
            </summary>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.CreateN1qlPrimaryIndexAsync(System.String,System.Boolean)">
            <summary>
            Creates a named primary index on the current <see cref="T:Couchbase.Core.IBucket" /> asynchronously.
            </summary>
            <param name="customName">The name of the custom index.</param>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.CreateN1qlIndexAsync(System.String,System.Boolean,System.String[])">
            <summary>
            Creates a secondary index with optional fields asynchronously.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <param name="fields">The fields to index on.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.DropN1qlPrimaryIndexAsync">
            <summary>
            Drops the primary index of the current <see cref="T:Couchbase.Core.IBucket" /> asynchronously.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.DropNamedPrimaryIndexAsync(System.String)">
            <summary>
            Drops the named primary index on the current <see cref="T:Couchbase.Core.IBucket" /> asynchronously.
            </summary>
            <param name="customName">Name of the primary index to drop.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.DropN1qlIndexAsync(System.String)">
            <summary>
            Drops an index by name asynchronously.
            </summary>
            <param name="name">The name of the index to drop.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.BuildN1qlDeferredIndexesAsync">
            <summary>
            Builds any indexes that have been created with the "defered" flag and are still in the "pending" state asynchronously.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> for awaiting on that contains the result of the method.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.CreateN1qlPrimaryIndex(System.String,System.Boolean)">
            <summary>
            Creates a primary index on the current <see cref="T:Couchbase.Core.IBucket" /> reference.
            </summary>
            <param name="customName">The name of the index.</param>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the request.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.CreateN1qlIndex(System.String,System.Boolean,System.String[])">
            <summary>
            Creates a secondary index on the current <see cref="T:Couchbase.Core.IBucket" /> reference.
            </summary>
            <param name="indexName">Name of the index to create.</param>
            <param name="defer">If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <param name="fields">The fields to index on.</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the request.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.DropN1qlPrimaryIndex">
            <summary>
            Drops the primary index on the current <see cref="T:Couchbase.Core.IBucket" />.
            </summary>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the request.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.DropN1qlPrimaryIndex(System.String)">
            <summary>
            Drops the named primary index if it exists on the current <see cref="T:Couchbase.Core.IBucket" />.
            </summary>
            <param name="customName">Name of primary index.</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the request.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.DropN1qlIndex(System.String)">
            <summary>
            Drops a secondary index on the current <see cref="T:Couchbase.Core.IBucket" /> reference.
            </summary>
            <param name="name">The name of the secondary index to drop.</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the request.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.BuildN1qlDeferredIndexes">
            <summary>
            Builds any indexes that have been created with the "defer" flag and are still in the "pending" state on the current <see cref="T:Couchbase.Core.IBucket" />.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IList`1" /> with the status for each index built.
            </returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.ExecuteIndexRequestAsync(System.String)">
            <summary>
            Executes the index request asynchronously.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.ExecuteIndexRequest(System.String)">
            <summary>
            Executes the index request syncronously.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.InsertDesignDocument(System.String,System.String)">
            <summary>
            Inserts a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.InsertDesignDocumentAsync(System.String,System.String)">
            <summary>
            Inserts a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.UpdateDesignDocument(System.String,System.String)">
            <summary>
            Updates a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.UpdateDesignDocumentAsync(System.String,System.String)">
            <summary>
            Updates a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.GetDesignDocument(System.String)">
            <summary>
            Retrieves the contents of a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A design document object.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.GetDesignDocumentAsync(System.String)">
            <summary>
            Retrieves the contents of a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A design document object.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.RemoveDesignDocument(System.String)">
            <summary>
            Removes a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.RemoveDesignDocumentAsync(System.String)">
            <summary>
            Removes a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.GetDesignDocuments(System.Boolean)">
            <summary>
            Lists all existing design documents.
            </summary>
            <param name="includeDevelopment">Whether or not to show development design documents in the results.</param>
            <returns>The design document as a string.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.GetDesignDocumentsAsync(System.Boolean)">
            <summary>
            Lists all existing design documents.
            </summary>
            <param name="includeDevelopment">Whether or not to show development design documents in the results.</param>
            <returns>The design document as a string.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.Flush">
            <summary>
            Destroys all documents stored within a bucket.  This functionality must also be enabled within the server-side bucket settings for safety reasons.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating success.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.FlushAsync">
            <summary>
            Destroys all documents stored within a bucket.  This functionality must also be enabled within the server-side bucket settings for safety reasons.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating success.</returns>
        </member>
        <member name="T:Couchbase.Management.ClusterManager">
            <summary>
            An intermediate class for doing management operations on a Cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.AddNode(System.String)">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.AddNodeAsync(System.String)">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RemoveNode(System.String)">
            <summary>
            Removes a failed over node from the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
            <remarks>The node must have been failed over before removing or else this operation will fail.</remarks>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RemoveNodeAsync(System.String)">
            <summary>
            Removes a failed over node from the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
            <remarks>The node must have been failed over before removing or else this operation will fail.</remarks>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.FailoverNode(System.String)">
            <summary>
            Fails over a given node
            </summary>
            <param name="hostname">The name of the node to remove.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.FailoverNodeAsync(System.String)">
            <summary>
            Fails over a given node
            </summary>
            <param name="hostname">The name of the node to remove.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.Rebalance">
            <summary>
            Initiates a rebalance across the cluster.
            </summary>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RebalanceAsync">
            <summary>
            Initiates a rebalance across the cluster.
            </summary>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ListBuckets">
            <summary>
            List all current buckets in this cluster.
            </summary>
            <returns>A list of buckets and their properties.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ListBucketsAsync">
            <summary>
            List all current buckets in this cluster.
            </summary>
            <returns>A list of buckets and their properties.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.CreateBucket(System.String,System.UInt32,Couchbase.Core.Buckets.BucketTypeEnum,Couchbase.Management.ReplicaNumber,Couchbase.Authentication.AuthType,System.Boolean,System.Boolean,System.Boolean,System.String,Couchbase.Management.ThreadNumber)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="name">Required parameter. Name for new bucket.</param>
            <param name="ramQuota">The RAM quota in megabytes. The default is 100.</param>
            <param name="bucketType">Required parameter. Type of bucket to be created. “Memcached” configures as Memcached bucket. “Couchbase” configures as Couchbase bucket</param>
            <param name="replicaNumber">The number of replicas of each document: minimum 0, maximum 3.</param>
            <param name="authType">The authentication type.</param>
            <param name="indexReplicas">Disable or enable indexes for bucket replicas.</param>
            <param name="flushEnabled">Enables the flush functionality on the specified bucket.</param>
            <param name="parallelDbAndViewCompaction">Indicates whether database and view files on disk can be compacted simultaneously.</param>
            <param name="saslPassword">Optional Parameter. String. Password for SASL authentication. Required if SASL authentication has been enabled.</param>
            <param name="threadNumber">Optional Parameter. Integer from 2 to 8. Change the number of concurrent readers and writers for the data bucket. </param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.CreateBucketAsync(Couchbase.Management.BucketSettings)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="settings">The settings for the bucket.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.CreateBucketAsync(System.String,System.UInt32,Couchbase.Core.Buckets.BucketTypeEnum,Couchbase.Management.ReplicaNumber,Couchbase.Authentication.AuthType,System.Boolean,System.Boolean,System.Boolean,System.String,Couchbase.Management.ThreadNumber)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="name">Required parameter. Name for new bucket.</param>
            <param name="ramQuota">The RAM quota in megabytes. The default is 100.</param>
            <param name="bucketType">Required parameter. Type of bucket to be created. “Memcached” configures as Memcached bucket. “Couchbase” configures as Couchbase bucket</param>
            <param name="replicaNumber">The number of replicas of each document: minimum 0, maximum 3.</param>
            <param name="authType">The authentication type.</param>
            <param name="indexReplicas">Disable or enable indexes for bucket replicas.</param>
            <param name="flushEnabled">Enables the flush functionality on the specified bucket.</param>
            <param name="parallelDbAndViewCompaction">Indicates whether database and view files on disk can be compacted simultaneously.</param>
            <param name="saslPassword">Optional Parameter. String. Password for SASL authentication. Required if SASL authentication has been enabled.</param>
            <param name="threadNumber">Optional Parameter. Integer from 2 to 8. Change the number of concurrent readers and writers for the data bucket. </param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RemoveBucket(System.String)">
            <summary>
            Removes a bucket from the cluster permamently.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RemoveBucketAsync(System.String)">
            <summary>
            Removes a bucket from the cluster permamently.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ClusterInfo">
            <summary>
            Returns the current state of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ClusterInfoAsync">
            <summary>
            Returns the current state of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.InitializeClusterAsync(System.String,System.String,System.String)">
            <summary>
            Initializes the entry point (EP) node of the cluster; similar to using the Management Console to setup a cluster.
            </summary>
            <param name="hostName"></param>
            <param name="path">The path to the data file.</param>
            <param name="indexPath">The index path to data file.</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the operation.
            </returns>
            <remarks>
            See: <a href="http://docs.couchbase.com/admin/admin/Misc/admin-datafiles.html" />
            </remarks>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RenameNodeAsync(System.String)">
            <summary>
            Renames the name of a node from it's default.
            </summary>
            <param name="hostName">Name of the host.</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the operation.
            </returns>
            <remarks>In most cases this should just be the IP or hostname of node.</remarks>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.SetupServicesAsync(System.String,Couchbase.Management.CouchbaseService[])">
            <summary>
            Sets up the services that are available on a given node.
            </summary>
            <param name="hostName">The hostname or IP of the node.</param>
            <param name="services">The services - e.g. query, kv, and/or index</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the operation.
            </returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.SetupServicesAsync(System.String,System.Collections.Generic.List{Couchbase.Management.CouchbaseService})">
            <summary>
            Sets up the services that are available on a given node.
            </summary>
            <param name="hostName">The hostname or IP of the node.</param>
            <param name="services">The services - e.g. query, kv, and/or index</param>
            <returns>
            An <see cref="T:Couchbase.IResult" /> with the status of the operation.
            </returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ConfigureMemoryAsync(System.String,System.UInt32,System.UInt32)">
            <summary>
            Configures the memory asynchronous.
            </summary>
            <param name="hostName">Name of the host.</param>
            <param name="memoryQuota">The memory quota.</param>
            <param name="indexMemQuota"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ConfigureAdminAsync(System.String)">
            <summary>
            Provisions the administartor account for an EP node.
            </summary>
            <param name="hostName">Name of the host.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.AddSampleBucketAsync(System.String,System.String)">
            <summary>
            Adds the sample bucket asynchronous.
            </summary>
            <param name="hostName">Name of the host.</param>
            <param name="sampleBucketName">Name of the sample bucket.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Management.IBucketManager">
            <summary>
            An intermediate class for doing management operations on a Bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.InsertDesignDocument(System.String,System.String)">
            <summary>
            Inserts a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.InsertDesignDocumentAsync(System.String,System.String)">
            <summary>
            Inserts a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.UpdateDesignDocument(System.String,System.String)">
            <summary>
            Updates a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.UpdateDesignDocumentAsync(System.String,System.String)">
            <summary>
            Updates a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.GetDesignDocument(System.String)">
            <summary>
            Retrieves the contents of a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A design document object.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.GetDesignDocumentAsync(System.String)">
            <summary>
            Retrieves the contents of a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A design document object.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.RemoveDesignDocument(System.String)">
            <summary>
            Removes a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.RemoveDesignDocumentAsync(System.String)">
            <summary>
            Removes a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.GetDesignDocuments(System.Boolean)">
            <summary>
            Lists all existing design documents.
            </summary>
            <param name="includeDevelopment">Whether or not to show development design documents in the results.</param>
            <returns>The design document as a string.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.GetDesignDocumentsAsync(System.Boolean)">
            <summary>
            Lists all existing design documents.
            </summary>
            <param name="includeDevelopment">Whether or not to show development design documents in the results.</param>
            <returns>The design document as a string.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.Flush">
            <summary>
            Destroys all documents stored within a bucket.  This functionality must also be enabled within the server-side bucket settings for safety reasons.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating success.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.FlushAsync">
            <summary>
            Destroys all documents stored within a bucket.  This functionality must also be enabled within the server-side bucket settings for safety reasons.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating success.</returns>
        </member>
        <member name="P:Couchbase.Management.IBucketManager.BucketName">
            <summary>
            The name of the Bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.ListN1qlIndexes">
            <summary>
            Lists the indexes for the current <see cref="T:Couchbase.Management.IBucketManager"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.ListN1qlIndexesAsync">
            <summary>
            Lists the indexes for the current <see cref="T:Couchbase.Management.IBucketManager"/> asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.WatchN1qlIndexes(System.Collections.Generic.List{System.String},System.TimeSpan)">
            <summary>
            Watches all given indexes, polling the query service until they are "online" or the <param name="watchTimeout"/> has expired.
            </summary>
            <param name="indexNames">The list of indexes to watch for.</param>
            <param name="watchTimeout">The timeout for the watch.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.WatchN1qlIndexesAsync(System.Collections.Generic.List{System.String},System.TimeSpan)">
            <summary>
            Watches all given indexes, asynchronously polling the query service until they are "online" or the <param name="watchTimeout"/> has expired.
            </summary>
            <param name="indexNames">The list of indexes to watch for.</param>
            <param name="watchTimeout">The timeout for the watch.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.CreateN1qlPrimaryIndex(System.Boolean)">
            <summary>
            Creates the primary index for the current bucket if it doesn't already exist.
            </summary>
            <param name="defer"> If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.CreateN1qlPrimaryIndexAsync(System.Boolean)">
            <summary>
            Creates a primary index on the current <see cref="T:Couchbase.Core.IBucket"/> asynchronously.
            </summary>
            <param name="defer"> If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for awaiting on that contains the result of the method.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.CreateN1qlPrimaryIndexAsync(System.String,System.Boolean)">
            <summary>
            Creates a named primary index on the current <see cref="T:Couchbase.Core.IBucket"/> asynchronously.
            </summary>
            <param name="customName">The name of the custom index.</param>
            <param name="defer"> If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for awaiting on that contains the result of the method.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.CreateN1qlIndexAsync(System.String,System.Boolean,System.String[])">
            <summary>
            Creates a secondary index with optional fields asynchronously.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="defer"> If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <param name="fields">The fields to index on.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for awaiting on that contains the result of the method.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.DropN1qlPrimaryIndexAsync">
            <summary>
            Drops the primary index of the current <see cref="T:Couchbase.Core.IBucket"/> asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for awaiting on that contains the result of the method.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.DropNamedPrimaryIndexAsync(System.String)">
            <summary>
            Drops the named primary index on the current <see cref="T:Couchbase.Core.IBucket"/> asynchronously.
            </summary>
            <param name="customName">Name of the primary index to drop.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for awaiting on that contains the result of the method.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.DropN1qlIndexAsync(System.String)">
            <summary>
            Drops an index by name asynchronously.
            </summary>
            <param name="name">The name of the index to drop.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for awaiting on that contains the result of the method.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.BuildN1qlDeferredIndexesAsync">
            <summary>
            Builds any indexes that have been created with the "defer" flag and are still in the "pending" or "deferred" state asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> for awaiting on that contains the result of the method.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.CreateN1qlPrimaryIndex(System.String,System.Boolean)">
            <summary>
            Creates a primary index on the current <see cref="T:Couchbase.Core.IBucket"/> reference.
            </summary>
            <param name="customName">The name of the index.</param>
            <param name="defer"> If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.CreateN1qlIndex(System.String,System.Boolean,System.String[])">
            <summary>
            Creates a secondary index on the current <see cref="T:Couchbase.Core.IBucket"/> reference.
            </summary>
            <param name="indexName">Name of the index to create.</param>
            <param name="defer"> If set to <c>true</c>, the N1QL query will use the "with defer" syntax and the index will simply be "pending" (prior to 4.5) or "deferred" (at and after 4.5, see MB-14679).</param>
            <param name="fields">The fields to index on.</param>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.DropN1qlPrimaryIndex">
            <summary>
            Drops the primary index on the current <see cref="T:Couchbase.Core.IBucket"/>.
            </summary>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.DropN1qlPrimaryIndex(System.String)">
            <summary>
            Drops the named primary index if it exists on the current <see cref="T:Couchbase.Core.IBucket"/>.
            </summary>
            <param name="customName">Name of primary index.</param>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.DropN1qlIndex(System.String)">
            <summary>
            Drops a secondary index on the current <see cref="T:Couchbase.Core.IBucket"/> reference.
            </summary>
            <param name="name">The name of the secondary index to drop.</param>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.BuildN1qlDeferredIndexes">
            <summary>
            Builds any indexes that have been created with the "defer" flag and are still in the "pending" state on the current <see cref="T:Couchbase.Core.IBucket"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> with the status for each index built.</returns>
        </member>
        <member name="T:Couchbase.Management.IClusterManager">
            <summary>
            An intermediate class for doing management operations on a Cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.AddNode(System.String)">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.AddNodeAsync(System.String)">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RemoveNode(System.String)">
            <summary>
            Removes a failed over node from the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
            <remarks>The node must have been failed over before removing or else this operation will fail.</remarks>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RemoveNodeAsync(System.String)">
            <summary>
            Removes a failed over node from the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
            <remarks>The node must have been failed over before removing or else this operation will fail.</remarks>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.Rebalance">
            <summary>
            Initiates a rebalance across the cluster.
            </summary>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RebalanceAsync">
            <summary>
            Initiates a rebalance across the cluster.
            </summary>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ClusterInfo">
            <summary>
            Returns the current state of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ClusterInfoAsync">
            <summary>
            Returns the current state of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ListBuckets">
            <summary>
            List all current buckets in this cluster.
            </summary>
            <returns>A list of buckets and their properties.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ListBucketsAsync">
            <summary>
            List all current buckets in this cluster.
            </summary>
            <returns>A list of buckets and their properties.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.CreateBucket(System.String,System.UInt32,Couchbase.Core.Buckets.BucketTypeEnum,Couchbase.Management.ReplicaNumber,Couchbase.Authentication.AuthType,System.Boolean,System.Boolean,System.Boolean,System.String,Couchbase.Management.ThreadNumber)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="name">Required parameter. Name for new bucket.</param>
            <param name="ramQuota">The RAM quota in megabytes. The default is 100.</param>
            <param name="bucketType">Required parameter. Type of bucket to be created. “Memcached” configures as Memcached bucket. “Couchbase” configures as Couchbase bucket</param>
            <param name="replicaNumber">The number of replicas of each document: minimum 0, maximum 3.</param>
            <param name="authType">The authentication type.</param>
            <param name="indexReplicas">Disable or enable indexes for bucket replicas.</param>
            <param name="flushEnabled">Enables the flush functionality on the specified bucket.</param>
            <param name="parallelDbAndViewCompaction">Indicates whether database and view files on disk can be compacted simultaneously.</param>
            <param name="saslPassword">Optional Parameter. String. Password for SASL authentication. Required if SASL authentication has been enabled.</param>
            <param name="threadNumber">Optional Parameter. Integer from 2 to 8. Change the number of concurrent readers and writers for the data bucket. </param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.CreateBucketAsync(System.String,System.UInt32,Couchbase.Core.Buckets.BucketTypeEnum,Couchbase.Management.ReplicaNumber,Couchbase.Authentication.AuthType,System.Boolean,System.Boolean,System.Boolean,System.String,Couchbase.Management.ThreadNumber)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="name">Required parameter. Name for new bucket.</param>
            <param name="ramQuota">The RAM quota in megabytes. The default is 100.</param>
            <param name="bucketType">Required parameter. Type of bucket to be created. “Memcached” configures as Memcached bucket. “Couchbase” configures as Couchbase bucket</param>
            <param name="replicaNumber">The number of replicas of each document: minimum 0, maximum 3.</param>
            <param name="authType">The authentication type.</param>
            <param name="indexReplicas">Disable or enable indexes for bucket replicas.</param>
            <param name="flushEnabled">Enables the flush functionality on the specified bucket.</param>
            <param name="parallelDbAndViewCompaction">Indicates whether database and view files on disk can be compacted simultaneously.</param>
            <param name="saslPassword">Optional Parameter. String. Password for SASL authentication. Required if SASL authentication has been enabled.</param>
            <param name="threadNumber">Optional Parameter. Integer from 2 to 8. Change the number of concurrent readers and writers for the data bucket. </param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.CreateBucketAsync(Couchbase.Management.BucketSettings)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="settings">The settings for the bucket.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RemoveBucket(System.String)">
            <summary>
            Removes a bucket from the cluster permamently.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RemoveBucketAsync(System.String)">
            <summary>
            Removes a bucket from the cluster permamently.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.FailoverNode(System.String)">
            <summary>
            Fails over a given node
            </summary>
            <param name="hostname">The name of the node to remove.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.FailoverNodeAsync(System.String)">
            <summary>
            Fails over a given node
            </summary>
            <param name="hostname">The name of the node to remove.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.InitializeClusterAsync(System.String,System.String,System.String)">
            <summary>
            Initializes the entry point (EP) node of the cluster; similar to using the Management Console to setup a cluster.
            </summary>
            <param name="hostName"></param>
            <param name="path">The path to the data file. The default is "/opt/couchbase/var/lib/couchbase/data".</param>
            <param name="indexPath">The index path to data file. The default is "/opt/couchbase/var/lib/couchbase/data".</param>
            <remarks>See: <a href="http://docs.couchbase.com/admin/admin/Misc/admin-datafiles.html"/></remarks>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RenameNodeAsync(System.String)">
            <summary>
            Renames the name of a node from it's default.
            </summary>
            <param name="hostName">Name of the host.</param>
            In most cases this should just be the IP or hostname of node.
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.SetupServicesAsync(System.String,System.Collections.Generic.List{Couchbase.Management.CouchbaseService})">
            <summary>
            Sets up the services that are available on a given node.
            </summary>
            <param name="hostName">The hostname or IP of the node.</param>
            <param name="services">The services - e.g. query, kv, and/or index</param>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.SetupServicesAsync(System.String,Couchbase.Management.CouchbaseService[])">
            <summary>
            Sets up the services that are available on a given node.
            </summary>
            <param name="hostName">The hostname or IP of the node.</param>
            <param name="services">The services - e.g. query, kv, and/or index</param>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ConfigureMemoryAsync(System.String,System.UInt32,System.UInt32)">
            <summary>
            Provisions the memory for an EP node.
            </summary>
            <param name="hostName">Name of the host.</param>
            <param name="dataMemQuota">The data memory quota.</param>
            <param name="indexMemQuota"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ConfigureAdminAsync(System.String)">
            <summary>
            Provisions the administartor account for an EP node.
            </summary>
            <param name="hostName">Name of the host.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.AddSampleBucketAsync(System.String,System.String)">
            <summary>
            Adds the sample bucket.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="sampleBucketName">Name of the sample bucket.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.AddNodeAsync(System.String,Couchbase.Management.CouchbaseService[])">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Management.ReplicaNumber">
            <summary>
            Number of replicas to be configured for this bucket. Required parameter when creating a Couchbase bucket. Default 1, minimum 0, maximum 3.
            </summary>
        </member>
        <member name="F:Couchbase.Management.ReplicaNumber.Two">
            <summary>
            Default.
            </summary>
        </member>
        <member name="T:Couchbase.Management.ThreadNumber">
            <summary>
            The number of concurrent readers and writers for the data bucket.
            </summary>
        </member>
        <member name="T:Couchbase.MemcachedBucket">
            <summary>
            Represents an in-memory bucket for storing Key/Value pairs. Most often used as a distributed cache.
            </summary>
            <seealso cref="T:Couchbase.Core.IBucket" />
            <seealso cref="T:Couchbase.Configuration.Server.Providers.IConfigObserver" />
            <seealso cref="T:Couchbase.IRefCountable" />
        </member>
        <member name="F:Couchbase.MemcachedBucket.RefCounts">
            <summary>
            Used for reference counting instances so that <see cref="M:System.IDisposable.Dispose"/> is only called by the last instance.
            </summary>
        </member>
        <member name="P:Couchbase.MemcachedBucket.Name">
            <summary>
            The Bucket's name. You can view this from the Couchbase Management Console.
            </summary>
        </member>
        <member name="P:Couchbase.MemcachedBucket.BucketType">
            <summary>
            Returns type of the bucket. In this implementation the value is constant: Memcached.
            </summary>
        </member>
        <member name="P:Couchbase.MemcachedBucket.Cluster">
            <summary>
            Returns the <see cref="T:Couchbase.Core.ICluster"/> that this bucket belongs to
            </summary>
        </member>
        <member name="M:Couchbase.MemcachedBucket.CreateManager">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IBucketManager" /> instance for managing buckets using the <see cref="T:Couchbase.Authentication.IClusterCredentials" /> for authentication.
            </summary>
            <returns>
            A <see cref="T:Couchbase.Management.IBucketManager" /> instance.
            </returns>
            <exception cref="T:System.Security.Authentication.AuthenticationException">
            No credentials found.
            </exception>
        </member>
        <member name="P:Couchbase.MemcachedBucket.IsSecure">
            <summary>
            Returns true if bucket is using SSL encryption between the client and the server.
            </summary>
            <remarks>If the server is not available (<see cref="T:Couchbase.ServerUnavailableException"/>), will default to false.</remarks>
        </member>
        <member name="P:Couchbase.MemcachedBucket.Couchbase#Core#IBucket#Configuration">
            <summary>
            Gets the configuration for the bucket
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Couchbase.MemcachedBucket.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether enhanced durability is enabled.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability and it is enabled; otherwise, <c>false</c>.
            </value>
            <remarks>Note this will always be false for Memcached buckets.</remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Couchbase#Configuration#Server#Providers#IConfigObserver#NotifyConfigChanged(Couchbase.Configuration.IConfigInfo)">
            <summary>
            Called when a configuration update has occurred from the server.
            </summary>
            <param name="configInfo">The new configuration</param>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Exists(System.String)">
            <summary>
            Checks for the existance of a given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key exists.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ExistsAsync(System.String)">
            <summary>
            Checks for the existance of a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to check.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Touch(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with no value.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.TouchAsync(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts a list of <see cref="T:Couchbase.IDocument`1" /> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> list.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into a Memcached Bucket on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0)">
            <summary>
            Replaces a value for a key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a list of <see cref="T:Couchbase.IDocument`1" /> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> list.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An object implementing <see cref="T:Couchbase.IDocumentResult`1" /> with information regarding the operation.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Insert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Inserts a list of JSON documents asynchronously, each document failing if it already exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Inserts a list of JSON documents asynchronously, each document failing if it already exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a list of JSON documents asynchronously, each document failing if it already exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Insert``1(System.String,``0)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Insert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Insert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1" />interface.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove(System.String)">
            <summary>
            For a given key, removes a document from the database.
            </summary>
            <param name="key">The unique key for indexing.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1" /> result.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance with the options for the given operation.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1" /> result.
            </returns>
            <remarks>
            Use the <see cref="T:System.Threading.Tasks.ParallelOptions" /> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken" /> with the operation.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions" /> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1" /> result.
            </returns>
            <remarks>
            Use the <see cref="T:System.Threading.Tasks.ParallelOptions" /> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken" /> with the operation.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetDocument``1(System.String)">
            <summary>
            Gets a document by it's given id.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> object containing the document if it's found and any other operation specific info.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetDocumentsAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a list of documents by there given id as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="ids">The documents primary keys.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> array representing the asynchronous operation results.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Get``1(System.String)">
            <summary>
            Gets a value for a given key from a Memcached Bucket on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value object to be retrieved.</typeparam>
            <param name="key">The unique Key to use to lookup the value.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetAndTouch``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the key's value.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetAndTouchAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetAndTouchDocument``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> with the key's document.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetAndTouchDocumentAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Get``1(System.Collections.Generic.IList{System.String})">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options"></param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options"></param>
            <param name="rangeSize"></param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Increment(System.String)">
            <summary>
            Increments the value of a key by one. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Increment(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Increment(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Increment(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Increment(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>
            If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Decrement(System.String)">
            <summary>
            Decrements the value of a key by one. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Decrement(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Decrement(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Decrement(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Decrement(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>
            If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Append(System.String,System.String)">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Append(System.String,System.Byte[])">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Prepend(System.String,System.String)">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Prepend(System.String,System.Byte[])">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.CreateManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Couchbase.Management.MemcachedBucketManager" /> instance for managing buckets.
            </summary>
            <param name="username">The administrators username</param>
            <param name="password">The administrators username</param>
            <returns>
            A <see cref="T:Couchbase.Management.MemcachedBucketManager" /> instance.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket" /> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket" /> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Upserts a list of <see cref="T:Couchbase.IDocument`1" /> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> list.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Upserts a list of <see cref="T:Couchbase.IDocument`1" /> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <param name="replicateTo"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> list.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Replaces a list of <see cref="T:Couchbase.IDocument`1" /> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> list.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Replaces a list of <see cref="T:Couchbase.IDocument`1" /> into a bucket asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documents">The documents to upsert.</param>
            <param name="replicateTo"></param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> list.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.InsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket" />failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.InsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.InsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> to remove from the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1" /> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <summary>
            Removes a list of <see cref="T:Couchbase.IDocument" /> from  the bucket asynchronously.
            </summary>
            <typeparam name="T">The type T of the document.</typeparam>
            <param name="documents">The documents.</param>
            <returns>
            A list of <see cref="T:System.Threading.Tasks.Task`1" /> objects representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <summary>
            Removes a list of <see cref="T:Couchbase.IDocument" /> from  the bucket asynchronously.
            </summary>
            <typeparam name="T">The type T of the document.</typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <returns>
            A list of <see cref="T:System.Threading.Tasks.Task`1" /> objects representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a list of <see cref="T:Couchbase.IDocument" /> from  the bucket asynchronously.
            </summary>
            <typeparam name="T">The type T of the document.</typeparam>
            <param name="documents">The documents.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>
            A list of <see cref="T:System.Threading.Tasks.Task`1" /> objects representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync(System.String,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetDocumentAsync``1(System.String)">
            <summary>
                Gets a document by it's given id asynchronously.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>
             An <see cref="T:Couchbase.IDocumentResult`1" /> object containing the document if it's found and any other operation specific info.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetWithLockAsync``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetWithLockAsync``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type" /> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UnlockAsync(System.String,System.UInt64)">
            <summary>
            Unlocks a key that was locked with <see cref="M:Couchbase.MemcachedBucket.GetWithLock``1(System.String,System.UInt32)" /> as an asynchronous operation.
            </summary>
            <param name="key">The key of the document to unlock.</param>
            <param name="cas">The 'check and set' value to use as a comparison</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1" /> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.IncrementAsync(System.String)">
            <summary>
            Increments the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created.
            and seeded with 1.
            </summary>
            <param name="key"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>/// <returns></returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.IncrementAsync(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.IncrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.DecrementAsync(System.String)">
            <summary>
            Decrements the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.DecrementAsync(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.DecrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.AppendAsync(System.String,System.String)">
            <summary>
            Appends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to append to.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.AppendAsync(System.String,System.Byte[])">
            <summary>
            Appends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to append to.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.PrependAsync(System.String,System.String)">
            <summary>
            Prepends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend to.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.PrependAsync(System.String,System.Byte[])">
            <summary>
            Prepends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend to.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.AddRef">
            <summary>
            Increments the reference counter for this <see cref="T:Couchbase.Core.IBucket"/> instance.
            </summary>
            <returns>The current count of all <see cref="T:Couchbase.Core.IBucket"/> references.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Release">
            <summary>
            Decrements the reference counter and calls <see cref="M:System.IDisposable.Dispose"/> if the count is zero.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Dispose">
            <summary>
            Closes this <see cref="T:Couchbase.MemcachedBucket"/> instance, shutting down and releasing all resources,
            removing it from it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Dispose(System.Boolean)">
            <summary>
            Closes this <see cref="T:Couchbase.MemcachedBucket"/> instance, shutting down and releasing all resources,
            removing it from it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
            <param name="disposing">If true suppresses finalization.</param>
        </member>
        <member name="T:Couchbase.DefaultResult`1">
            <summary>
            Basic operation return value
            </summary>
        </member>
        <member name="T:Couchbase.Document`1">
            <summary>
            Provides an interface for interacting with documents within Couchbase Server
            </summary>
            <typeparam name="T">The type of document.</typeparam>
        </member>
        <member name="P:Couchbase.Document`1.Id">
            <summary>
            The unique identifier for the document
            </summary>
        </member>
        <member name="P:Couchbase.Document`1.Cas">
            <summary>
            The "Check and Set" value for enforcing optimistic concurrency
            </summary>
        </member>
        <member name="P:Couchbase.Document`1.Expiry">
            <summary>
            The time-to-live or TTL for the document before it's evicted from disk in milliseconds.
            </summary>
            <remarks>Setting this to zero or less will give the document infinite lifetime</remarks>
        </member>
        <member name="P:Couchbase.Document`1.Content">
            <summary>
            The value representing the document itself
            </summary>
        </member>
        <member name="P:Couchbase.Document`1.Token">
            <summary>
            Gets the mutation token for the operation if enhanced durability is enabled.
            </summary>
            <value>
            The mutation token.
            </value>
            <remarks>Note: this is used internally for enhanced durability if supported by
            the Couchbase server version and enabled by configuration.</remarks>
        </member>
        <member name="M:Couchbase.Document`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Couchbase.DocumentResult`1">
            <summary>
            The return type for "document" centric operation requests.
            </summary>
            <typeparam name="T">The type the value of the document will be.</typeparam>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Success">
            <summary>
            Returns true if the operation was succesful
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Message">
            <summary>
            If the Success is false, a message indicating the reason why
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Document">
            <summary>
            The Document object
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Status">
            <summary>
            The response status returned by the server when fulfilling the request.
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Id">
            <summary>
            Gets the id or key for the document.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Content">
            <summary>
            The actual value stored within Couchbase
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="M:Couchbase.DocumentResult`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Couchbase.IDocument`1">
            <summary>
            Provides an interface for interacting with documents within Couchbase Server
            </summary>
            <typeparam name="T">The type of document.</typeparam>
        </member>
        <member name="P:Couchbase.IDocument`1.Content">
            <summary>
            The value representing the document itself
            </summary>
        </member>
        <member name="T:Couchbase.IDocumentResult`1">
            <summary>
            The return type for "document" centric operation requests.
            </summary>
            <typeparam name="T">The type the value of the document will be.</typeparam>
        </member>
        <member name="P:Couchbase.IDocumentResult`1.Document">
            <summary>
            The Document object
            </summary>
        </member>
        <member name="P:Couchbase.IDocumentResult`1.Content">
            <summary>
            The actual value stored within Couchbase
            </summary>
        </member>
        <member name="T:Couchbase.IOperationResult`1">
            <summary>
            The primary return type for binary Memcached operations which return a value
            </summary>
            <typeparam name="T">The value returned by the operation.</typeparam>
        </member>
        <member name="P:Couchbase.IOperationResult`1.Value">
            <summary>
            The value returned by the operation.
            </summary>
        </member>
        <member name="M:Couchbase.IRefCountable.AddRef">
            <summary>
            Increments the reference counter for this <see cref="T:Couchbase.Core.IBucket"/> instance.
            </summary>
            <returns>The current count of all <see cref="T:Couchbase.Core.IBucket"/> references, or -1 if a reference could not be added because the bucket is disposed.</returns>
        </member>
        <member name="M:Couchbase.IRefCountable.Release">
            <summary>
            Decrements the reference counter and calls <see cref="M:System.IDisposable.Dispose"/> if the count is zero.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.IResult`1">
            <summary>
            Default interface for all operation return types.
            </summary>
        </member>
        <member name="P:Couchbase.IResult`1.Value">
            <summary>
            The value returned by the operation
            </summary>
        </member>
        <member name="T:Couchbase.N1QL.IQueryRequestWithDataMapper">
            <summary>
            Extends <see cref="T:Couchbase.N1QL.IQueryRequest"/> to provide a custom data mapper
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequestWithDataMapper.DataMapper">
            <summary>
            Custom <see cref="T:Couchbase.Views.IDataMapper"/> to use when deserializing query results.
            </summary>
            <remarks>Null will use the default <see cref="T:Couchbase.Views.IDataMapper"/>.</remarks>
        </member>
        <member name="T:Couchbase.N1QL.IQueryRequest">
            <summary>
            Represents a request for a N1QL query
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequest.Lifespan">
            <summary>
            Sets the lifespan of the query request; used to check if the request exceeded the maximum time
            configured for it in <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.QueryRequestTimeout"/>
            </summary>
            <value>
            The lifespan.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequest.IsPrepared">
            <summary>
            Returns true if the request is not ad-hoc and has been optimized using <see cref="M:Couchbase.N1QL.IQueryRequest.Prepared(Couchbase.N1QL.QueryPlan,System.String)"/>.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequest.IsAdHoc">
            <summary>
            Gets a value indicating whether this query statement is to executed in an ad-hoc manner.
            </summary>
            <value>
              <c>true</c> if this instance is ad-hoc; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequest.HasBeenRetried">
            <summary>
            Gets a value indicating whether this instance has been retried (if it's been optimized
            and prepared then the server marked it as stale/not runnable).
            </summary>
            <value><c>true</c> if this instance has been retried once, otherwise <c>false</c>.</value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequest.IsStreaming">
            <summary>
            Gets a value indicating whether use the <see cref="T:Couchbase.N1QL.StreamingQueryClient"/>.
            </summary>
            <value>
            <c>true</c> if [use streaming client]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.MaxServerParallelism(System.Int32)">
            <summary>
            Specifies the maximum parallelism for the query. A zero or negative value means the number of logical
            cpus will be used as the parallelism for the query. There is also a server wide max_parallelism parameter
            which defaults to 1. If a request includes max_parallelism, it will be capped by the server max_parallelism.
            If a request does not include max_parallelism, the server wide max_parallelism will be used.
            </summary>
            <value>
            The maximum server parallelism.
            </value>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AdHoc(System.Boolean)">
            <summary>
             If set to false, the client will try to perform optimizations
             transparently based on the server capabilities, like preparing the statement and
             then executing a query plan instead of the raw query.
            </summary>
            <param name="adHoc">if set to <c>false</c> the query will be optimized if possible.</param>
            <remarks>The default is <c>true</c>; the query will executed in an ad-hoc manner,
             without special optomizations.</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Statement(System.String)">
            <summary>
             Sets a N1QL statement to be executed.
            </summary>
            <param name="statement">Any valid N1QL statement for a POST request, or a read-only N1QL statement (SELECT, EXPLAIN) for a GET request.</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>If both prepared and statement are present and non-empty, an error is returned.</remarks>
            <remarks>Required if prepared not provided.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Prepared(Couchbase.N1QL.QueryPlan,System.String)">
            <summary>
             Sets a N1QL statement to be executed in an optimized way using the given queryPlan.
            </summary>
            <param name="queryPlan">The <see cref="T:Couchbase.N1QL.QueryPlan"/> that was prepared beforehand.</param>
            <param name="originalStatement">The original statement (eg. SELECT * FROM default) that the user attempted to optimize</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>Required if statement not provided, will erase a previous call to <see cref="M:Couchbase.N1QL.IQueryRequest.Statement(System.String)"/>.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Timeout(System.TimeSpan)">
            <summary>
            Sets the maximum time to spend on the request.
            </summary>
            <param name="timeOut">Maximum time to spend on the request</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>Optional - the default is 0ms, which means the request runs for as long as it takes.</remarks>
            <remarks>There is also a server wide timeout parameter, and the minimum of that and the request timeout is what gets applied. </remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.ReadOnly(System.Boolean)">
            <summary>
            If a GET request, this will always be true otherwise false.
            </summary>
            <param name="readOnly">True for get requests.</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>Any value set here will be overridden by the type of request sent.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Metrics(System.Boolean)">
            <summary>
            Specifies that metrics should be returned with query results.
            </summary>
            <param name="includeMetrics">True to return query metrics.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AddNamedParameter(System.String,System.Object)">
            <summary>
            Adds a named parameter to the parameters to the statement or prepared statement.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AddNamedParameter(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
             Adds a collection of named parameters to the parameters to the statement or prepared statement.
            </summary>
            <param name="parameters">A list of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to be sent.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AddPositionalParameter(System.Object)">
            <summary>
            Adds a positional parameter to the parameters to the statement or prepared statement.
            </summary>
            <param name="value">The value of the positional parameter.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AddPositionalParameter(System.Object[])">
            <summary>
            Adds a list of positional parameters to the statement or prepared statement.
            </summary>
            <param name="parameters">A list of positional parameters.</param>
            <returns></returns>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Format(Couchbase.N1QL.Format)">
            <summary>
            Desired format for the query results.
            </summary>
            <param name="format">An <see cref="M:Couchbase.N1QL.IQueryRequest.Format(Couchbase.N1QL.Format)"/> enum.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Encoding(Couchbase.N1QL.Encoding)">
            <summary>
            Specifies the desired character encoding for the query results.
            </summary>
            <param name="encoding">An <see cref="M:Couchbase.N1QL.IQueryRequest.Encoding(Couchbase.N1QL.Encoding)"/> enum.</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>Optional.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Compression(Couchbase.N1QL.Compression)">
            <summary>
            Compression format to use for response data on the wire. Possible values are ZIP, RLE, LZMA, LZO, NONE.
            </summary>
            <param name="compression"></param>
            <remarks>Optional. The default is NONE.</remarks>
            <remarks>Values are case-insensitive.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Signature(System.Boolean)">
            <summary>
             Includes a header for the results schema in the response.
            </summary>
            <param name="includeSignature">True to include a header for the results schema in the response.</param>
            <remarks>The default is true.</remarks>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.ScanConsistency(Couchbase.N1QL.ScanConsistency)">
            <summary>
            Specifies the consistency guarantee/constraint for index scanning.
            </summary>
            <param name="scanConsistency">Specify the consistency guarantee/constraint for index scanning.</param>
            <remarks>Optional.</remarks>
            <remarks>The default is <see cref="M:Couchbase.N1QL.IQueryRequest.ScanConsistency(Couchbase.N1QL.ScanConsistency)"/>.NotBounded.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.ScanWait(System.TimeSpan)">
            <summary>
             Specifies the maximum time the client is willing to wait for an index to catch up to the vector timestamp in the request. If an index has to catch up, and the <see cref="M:Couchbase.N1QL.IQueryRequest.ScanWait(System.TimeSpan)"/> time is exceed doing so, an error is returned.
            </summary>
            <param name="scanWait">The maximum time the client is willing to wait for index to catch up to the vector timestamp.</param>
            <remarks>Optional.</remarks>
            <remarks>Can be supplied with <see cref="M:Couchbase.N1QL.IQueryRequest.ScanConsistency(Couchbase.N1QL.ScanConsistency)"/> values of RequestPlus, StatementPlus and AtPlus.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Pretty(System.Boolean)">
            <summary>
            Pretty print the output.
            </summary>
            <param name="pretty">True for the pretty.</param>
            <remarks>True by default.</remarks>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AddCredentials(System.String,System.String,System.Boolean)">
            <summary>
            Adds a set of credentials to the list of credentials, in the form of user/password
            </summary>
            <param name="username">The bucket or username.</param>
            <param name="password">The password of the bucket.</param>
            <param name="isAdmin">True if connecting as an admin.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.ClientContextId(System.String)">
            <summary>
            A piece of data supplied by the client that is echoed in the response, if present. N1QL makes no assumptions about the meaning of this data and just logs and echoes it.
            </summary>
            <param name="contextId"></param>
            <remarks>Optional.</remarks>
            <remarks> Maximum allowed size is 64 characters. A clientContextID longer than 64 characters is cut off at 64 characters.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.BaseUri(System.Uri)">
            <summary>
            The base <see cref="T:System.Uri"/> used to create the request e.g. http://localhost:8093/query
            </summary>
            <param name="uri"></param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.GetBaseUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> for the Query service
            </summary>
            <returns>The <see cref="T:System.Uri"/> for the Query service</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.GetOriginalStatement">
            <summary>
            Gets the raw, unprepared N1QL statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.GetPreparedPayload">
            <summary>
            Gets the prepared payload for this N1QL statement if IsPrepared() is true,
            null otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.GetFormValues">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2"/> of the name/value pairs to be POSTed to the service if <see cref="F:Couchbase.N1QL.Method.Post"/> is used.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IDictionary`2"/> of the name/value pairs to be POSTed to the service.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.GetFormValuesAsJson">
            <summary>
            Gets the JSON representation of this query for execution in a POST.
            </summary>
            <returns>The form values as a JSON object.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.TimedOut">
            <summary>
            True if the request exceeded it's <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.QueryRequestTimeout"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequest.CurrentContextId">
            <summary>
            Gets the context identifier for the N1QL query request/response. Useful for debugging.
            </summary>
            <remarks>This value changes for every request./></remarks>
            <value>
            The context identifier.
            </value>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.ConsistentWith(Couchbase.N1QL.MutationState)">
            <summary>
            Provides a means of ensuring "read your own wites" or RYOW consistency on the current query.
            </summary>
            <remarks>Note: <see cref="M:Couchbase.N1QL.IQueryRequest.ScanConsistency(Couchbase.N1QL.ScanConsistency)"/> will be overwritten to <see cref="F:Couchbase.N1QL.ScanConsistency.AtPlus"/>.</remarks>
            <param name="mutationState">State of the mutation.</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.UseStreaming(System.Boolean)">
            <summary>
            Uses the streaming API for the returned results. This is useful for large result sets in that it limits the
            working size of the query and helps reduce the possibility of a <see cref="T:System.OutOfMemoryException"/> from occurring.
            </summary>
            <param name="streaming">if set to <c>true</c> streams the results as you iterate through the response.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.N1QL.IQueryResult`1">
            <summary>
            Interface for the results of a N1QL query.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Rows">
            <summary>
            Gets a list of all the objects returned by the query. An object can be any JSON value.
            </summary>
            <value>
            A a list of all the objects returned by the query.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.RequestId">
            <summary>
            Gets A unique identifier for the response.
            </summary>
            <value>
            The unique identifier for the response.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.ClientContextId">
            <summary>
            Gets the clientContextID of the request, if one was supplied. Used for debugging.
            </summary>
            <value>
            The client context identifier.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Signature">
            <summary>
            Gets the schema of the results. Present only when the query completes successfully.
            </summary>
            <value>
            The signature of the schema of the request.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Status">
            <summary>
            Gets the status of the request; possible values are: success, running, errors, completed, stopped, timeout, fatal.
            </summary>
            <value>
            The status of the request.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Errors">
            <summary>
            Gets a list of 0 or more error objects; if an error occurred during processing of the request, it will be represented by an error object in this list.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Warnings">
            <summary>
            Gets a list of 0 or more warning objects; if a warning occurred during processing of the request, it will be represented by a warning object in this list.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Metrics">
            <summary>
            Gets an object containing metrics about the request.
            </summary>
            <value>
            The metrics.
            </value>
        </member>
        <member name="T:Couchbase.N1QL.MutationState">
            <summary>
            Represents a composition of <see cref="T:Couchbase.Core.Buckets.MutationToken"/>'s into a single
            unit for performing "read your own writes" or RYOW semantics on a N1QL query.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.MutationState.From(Couchbase.IDocument[])">
            <summary>
            Creates a <see cref="T:Couchbase.Core.Buckets.MutationToken"/> from a list of <see cref="T:Couchbase.IDocument"/>'s assuming enhanced durability is enabled.
            </summary>
            <param name="documents">The documents.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.MutationState.From(Couchbase.IDocumentFragment[])">
            <summary>
            Creates a <see cref="T:Couchbase.N1QL.MutationState"/> from a list of <see cref="T:Couchbase.IDocumentFragment"/>'s assuming enhanced durability is enabled.
            </summary>
            <param name="fragments">The fragments.</param>
            <returns>The <see cref="T:Couchbase.N1QL.MutationState"/> object itself.</returns>
        </member>
        <member name="M:Couchbase.N1QL.MutationState.From(Couchbase.N1QL.MutationState)">
            <summary>
            Creates a<see cref= "T:Couchbase.N1QL.MutationState" /> from another <see cref="T:Couchbase.N1QL.MutationState"/> assuming enhanced durability is enabled.
            </summary>
            <param name="mutationState">State of the mutation.</param>
            <returns>The <see cref="T:Couchbase.N1QL.MutationState"/> object itself.</returns>
        </member>
        <member name="M:Couchbase.N1QL.MutationState.Add(Couchbase.IDocument[])">
            <summary>
            Adds a <see cref="T:Couchbase.Core.Buckets.MutationToken"/> to the <see cref="T:Couchbase.N1QL.MutationState"/> from a list of <see cref="T:Couchbase.IDocument"/> assuming enhanced durability is enabled.
            </summary>
            <param name="documents">The documents.</param>
            <exception cref="T:System.ArgumentException">If a <see cref="T:Couchbase.IDocument"/> does not contain a valid <see cref="T:Couchbase.Core.Buckets.MutationToken"/>.</exception>
            <returns>The <see cref="T:Couchbase.N1QL.MutationState"/> object itself.</returns>
        </member>
        <member name="M:Couchbase.N1QL.MutationState.Add(Couchbase.IDocumentFragment[])">
            <summary>
            Adds a <see cref="T:Couchbase.Core.Buckets.MutationToken"/> to the <see cref="T:Couchbase.N1QL.MutationState"/> from a list of <see cref="T:Couchbase.IDocumentFragment"/> assuming enhanced durability is enabled.
            </summary>
            <param name="fragments">The fragments.</param>
            <exception cref="T:System.ArgumentException">If a <see cref="T:Couchbase.IDocument"/> does not contain a valid <see cref="T:Couchbase.Core.Buckets.MutationToken"/>.</exception>
            <returns>The <see cref="T:Couchbase.N1QL.MutationState"/> object itself.</returns>
        </member>
        <member name="M:Couchbase.N1QL.MutationState.Add(Couchbase.N1QL.MutationState)">
            <summary>
            Adds the <see cref="T:Couchbase.Core.Buckets.MutationToken"/>'s from another <see cref="T:Couchbase.N1QL.MutationState"/>.
            </summary>
            <param name="mutationState">State of the mutation.</param>
            <returns>The <see cref="T:Couchbase.N1QL.MutationState"/> object itself.</returns>
        </member>
        <member name="M:Couchbase.N1QL.MutationState.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of <see cref="T:Couchbase.Core.Buckets.MutationToken"/>'s.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.N1QL.MutationState.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <see cref="T:Couchbase.Core.Buckets.MutationToken"/>'s.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Couchbase.N1QL.QueryPlan.Name">
            <summary>
            Gets the name of the query plan generated by the server.
            </summary>
            <value>
            The name of the query plan.
            </value>
        </member>
        <member name="T:Couchbase.N1QL.QueryRequest">
            <summary>
            Builds a N1QL query request.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.IsPrepared">
            <summary>
            Returns true if the request is a prepared statement
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.IsAdHoc">
            <summary>
            Gets a value indicating whether this query statement is to executed in an ad-hoc manner.
            </summary>
            <value>
              <c>true</c> if this instance is ad-hoc; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.CurrentContextId">
            <summary>
            Gets the context identifier for the N1QL query request/response. Useful for debugging.
            </summary>
            <remarks>This value changes for every request./></remarks>
            <value>
            The context identifier.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.HasBeenRetried">
            <summary>
            Gets a value indicating whether this instance has been retried (if it's been optimized
            and prepared then the server marked it as stale/not runnable).
            </summary>
            <value><c>true</c> if this instance has been retried once, otherwise <c>false</c>.</value>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.DataMapper">
            <summary>
            Custom <see cref="T:Couchbase.Views.IDataMapper"/> to use when deserializing query results.
            </summary>
            <remarks>Null will use the default <see cref="T:Couchbase.Views.IDataMapper"/>.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ConsistentWith(Couchbase.N1QL.MutationState)">
            <param name="mutationState">State of the mutation.</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.UseStreaming(System.Boolean)">
            <summary>
            Uses the streaming API for the returned results. This is useful for large result sets in that it limits the
            working size of the query and helps reduce the possibility of a <see cref="T:System.OutOfMemoryException" /> from occurring.
            </summary>
            <param name="streaming">if set to <c>true</c> streams the results as you iterate through the response.</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.IsStreaming">
            <summary>
            Gets a value indicating whether use the <see cref="T:Couchbase.N1QL.StreamingQueryClient" />.
            </summary>
            <value>
            <c>true</c> if [use streaming client]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.MaxServerParallelism(System.Int32)">
            <summary>
            Specifies the maximum parallelism for the query. A zero or negative value means the number of logical
            cpus will be used as the parallelism for the query. There is also a server wide max_parallelism parameter
            which defaults to 1. If a request includes max_parallelism, it will be capped by the server max_parallelism.
            If a request does not include max_parallelism, the server wide max_parallelism will be used.
            </summary>
            <param name="parallelism"></param>
            <returns></returns>
            <value>
            The maximum server parallelism.
            </value>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AdHoc(System.Boolean)">
            <summary>
            If set to false, the client will try to perform optimizations
            transparently based on the server capabilities, like preparing the statement and
            then executing a query plan instead of the raw query.
            </summary>
            <param name="adHoc">if set to <c>false</c> the query will be optimized if possible.</param>
            <returns></returns>
            <remarks>
            The default is <c>true</c>; the query will executed in an ad-hoc manner,
            without special optomizations.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Prepared(Couchbase.N1QL.QueryPlan,System.String)">
            <summary>
             Sets a N1QL statement to be executed in an optimized way using the given queryPlan.
            </summary>
            <param name="preparedPlan">The <see cref="T:Couchbase.N1QL.QueryPlan"/> that was prepared beforehand.</param>
            <param name="originalStatement">The original statement (eg. SELECT * FROM default) that the user attempted to optimize</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>Required if statement not provided, will erase a previously set Statement.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="preparedPlan"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Statement(System.String)">
            <summary>
            Sets a N1QL statement to be executed.
            </summary>
            <param name="statement">Any valid N1QL statement for a POST request, or a read-only N1QL statement (SELECT, EXPLAIN) for a GET request.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">statement</exception>
            <remarks>
            Will erase a previous optimization of a statement using Prepared.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Timeout(System.TimeSpan)">
            <summary>
            Sets the maximum time to spend on the request.
            </summary>
            <param name="timeOut">Maximum time to spend on the request</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional - the default is 0ms, which means the request runs for as long as it takes.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ReadOnly(System.Boolean)">
            <summary>
            If a GET request, this will always be true otherwise false.
            </summary>
            <param name="readOnly">True for get requests.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            Any value set here will be overridden by the type of request sent.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Metrics(System.Boolean)">
            <summary>
            Specifies that metrics should be returned with query results.
            </summary>
            <param name="includeMetrics">True to return query metrics.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AddNamedParameter(System.String,System.Object)">
            <summary>
            Adds a named parameter to the parameters to the statement or prepared statement.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AddPositionalParameter(System.Object)">
            <summary>
            Adds a positional parameter to the parameters to the statement or prepared statement.
            </summary>
            <param name="value">The value of the positional parameter.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AddNamedParameter(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds a collection of named parameters to the parameters to the statement or prepared statement.
            </summary>
            <param name="parameters">A list of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to be sent.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AddPositionalParameter(System.Object[])">
            <summary>
            Adds a list of positional parameters to the statement or prepared statement.
            </summary>
            <param name="parameters">A list of positional parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Format(Couchbase.N1QL.Format)">
            <summary>
            Desired format for the query results.
            </summary>
            <param name="format">An <see cref="M:Couchbase.N1QL.QueryRequest.Format(Couchbase.N1QL.Format)" /> enum.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Encoding(Couchbase.N1QL.Encoding)">
            <summary>
            Specifies the desired character encoding for the query results.
            </summary>
            <param name="encoding">An <see cref="M:Couchbase.N1QL.QueryRequest.Encoding(Couchbase.N1QL.Encoding)" /> enum.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Compression(Couchbase.N1QL.Compression)">
            <summary>
            Compression format to use for response data on the wire. Possible values are ZIP, RLE, LZMA, LZO, NONE.
            </summary>
            <param name="compression"></param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional. The default is NONE.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Signature(System.Boolean)">
            <summary>
            Includes a header for the results schema in the response.
            </summary>
            <param name="includeSignature">True to include a header for the results schema in the response.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ScanConsistency(Couchbase.N1QL.ScanConsistency)">
            <summary>
            Specifies the consistency guarantee/constraint for index scanning.
            </summary>
            <param name="scanConsistency">Specify the consistency guarantee/constraint for index scanning.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <exception cref="T:System.NotSupportedException">StatementPlus are not currently supported by CouchbaseServer.</exception>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ScanWait(System.TimeSpan)">
            <summary>
            Specifies the maximum time the client is willing to wait for an index to catch up to the vector timestamp in the request. If an index has to catch up, and the <see cref="M:Couchbase.N1QL.QueryRequest.ScanWait(System.TimeSpan)" /> time is exceed doing so, an error is returned.
            </summary>
            <param name="scanWait">The maximum time the client is willing to wait for index to catch up to the vector timestamp.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Pretty(System.Boolean)">
            <summary>
            Pretty print the output.
            </summary>
            <param name="pretty">True for the pretty.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <remarks>
            True by default.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AddCredentials(System.String,System.String,System.Boolean)">
            <summary>
            Adds a set of credentials to the list of credentials, in the form of user/password
            </summary>
            <param name="username">The bucket or username.</param>
            <param name="password">The password of the bucket.</param>
            <param name="isAdmin">True if connecting as an admin.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest" /> for method chaining.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">username;cannot be null, empty or whitespace.</exception>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ClientContextId(System.String)">
            <summary>
            Clients the context identifier.
            </summary>
            <param name="clientContextId">The client context identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.BaseUri(System.Uri)">
            <summary>
            Bases the URI.
            </summary>
            <param name="baseUri">The base URI.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.GetOriginalStatement">
            <summary>
            Gets the raw, unprepared N1QL statement.
            </summary>
            <remarks>If the statement has been optimized using Prepared, this will still
            return the original un-optimized statement.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.GetPreparedPayload">
            <summary>
            Gets the prepared payload for this N1QL statement if IsPrepared() is true,
            null otherwise.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.GetFormValues">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2" /> of the name/value pairs to be POSTed to the service.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IDictionary`2" /> of the name/value pairs to be POSTed to the service.
            </returns>
            <exception cref="T:System.ArgumentException">A statement or prepared plan must be provided.</exception>
            <remarks>Since values will be POSTed as JSON, here we deal with unencoded typed values
            (like ints, Lists, etc...) rather than only strings.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.GetQueryParametersAsFormUrlencoded">
            <summary>
            Gets the query parameters for x-form-urlencoded content-type.
            </summary>
            <remarks>Each key and value from GetFormValues will be urlencoded</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.GetFormValuesAsJson">
            <summary>
            Gets the JSON representation of this query for execution in a POST.
            </summary>
            <returns>The form values as a JSON object.</returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Create">
            <summary>
            Creates a new <see cref="T:Couchbase.N1QL.QueryRequest"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Couchbase.N1QL.QueryRequest"/> object with the specified statement.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Create(Couchbase.N1QL.QueryPlan,System.String)">
            <summary>
            Creates a query using the given plan as an optimization for the originalStatement.
            </summary>
            <param name="plan">The plan.</param>
            <param name="originalStatement">The original statement, unoptimized.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>
            The credentials.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Couchbase.N1QL.QueryRequest.Couchbase#N1QL#IQueryRequest#Lifespan" -->
        <!-- Badly formed XML comment ignored for member "M:Couchbase.N1QL.QueryRequest.Couchbase#N1QL#IQueryRequest#TimedOut" -->
        <member name="T:Couchbase.N1QL.QuerySequenceGenerator">
            <summary>
            Generates a linear progression of sequence numbers, overlapping if the storage is exceeded.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.QuerySequenceGenerator.GetNext">
            <summary>
            Gets the next sequence in the progression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QuerySequenceGenerator.GetNextAsString">
            <summary>
            Gets the next sequence in the progression as a <see cref="T:System.String"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QuerySequenceGenerator.Reset">
            <summary>
            Resets the sequence to zero. Mainly for testing.
            </summary>
        </member>
        <member name="T:Couchbase.N1QL.ScanConsistency">
            <summary>
            Sets the desired index scan consistency for current N1QL query.
            </summary>
        </member>
        <member name="F:Couchbase.N1QL.ScanConsistency.NotBounded">
            <summary>
            The default which means that the query can return data that is currently indexed
            and accessible by the index or the view. The query output can be arbitrarily
            out-of-date if there are many pending mutations that have not been indexed by
            the index or the view. This consistency level is useful for queries that favor
            low latency and do not need precise and most up-to-date information.
            </summary>
        </member>
        <member name="F:Couchbase.N1QL.ScanConsistency.RequestPlus">
            <summary>
            This level provides the strictest consistency level and thus executes with higher
            latencies than the other levels. This consistency level requires all mutations, up
            to the moment of the query request, to be processed before the query execution can start.
            </summary>
        </member>
        <member name="F:Couchbase.N1QL.ScanConsistency.StatementPlus">
            <summary>
            Not supported; do not use.
            </summary>
        </member>
        <member name="F:Couchbase.N1QL.ScanConsistency.AtPlus">
            <summary>
            Do not use; for RYOW use <see cref="M:Couchbase.N1QL.IQueryRequest.ConsistentWith(Couchbase.N1QL.MutationState)"/> and do not specify a <see cref="T:Couchbase.N1QL.ScanConsistency"/>.
            </summary>
        </member>
        <member name="T:Couchbase.N1QL.FailureCountingUri">
            <summary>
            A decorator around a <see cref="T:System.Uri"/> that maintains count of the whether the last request failed.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.#ctor(System.String,System.UriKind)">
            <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.<paramref name="uriString" /> contains a relative URI and <paramref name="uriKind" /> is <see cref="F:System.UriKind.Absolute" />.or<paramref name="uriString" /> contains an absolute URI and <paramref name="uriKind" /> is <see cref="F:System.UriKind.Relative" />.or<paramref name="uriString" /> is empty.-or- The scheme specified in <paramref name="uriString" /> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)" />.-or- <paramref name="uriString" /> contains too many slashes.-or- The password specified in <paramref name="uriString" /> is not valid.-or- The host name specified in <paramref name="uriString" /> is not valid.-or- The file name specified in <paramref name="uriString" /> is not valid. -or- The user name specified in <paramref name="uriString" /> is not valid.-or- The host or authority name specified in <paramref name="uriString" /> cannot be terminated by backslashes.-or- The port number specified in <paramref name="uriString" /> is not valid or cannot be parsed.-or- The length of <paramref name="uriString" /> exceeds 65519 characters.-or- The length of the scheme specified in <paramref name="uriString" /> exceeds 1023 characters.-or- There is an invalid character sequence in <paramref name="uriString" />.-or- The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="uriKind" /> is invalid. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uriString" /> is null. </exception>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.#ctor(System.Uri,System.String)">
            <exception cref="T:System.ArgumentNullException"><paramref name="baseUri" /> is null. </exception>
            <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is empty or contains only spaces.-or- The scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> contains too many slashes.-or- The password specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The host name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The file name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid. -or- The user name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The host or authority name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> cannot be terminated by backslashes.-or- The port number specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid or cannot be parsed.-or- The length of the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 65519 characters.-or- The length of the scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 1023 characters.-or- There is an invalid character sequence in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" />.-or- The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance. </exception>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.#ctor(System.Uri,System.Uri)">
            <exception cref="T:System.ArgumentException"><paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseUri" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri" /> is not an absolute <see cref="T:System.Uri" /> instance. </exception>
            <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException" />, instead.The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is empty or contains only spaces.-or- The scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> contains too many slashes.-or- The password specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The host name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The file name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid. -or- The user name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid.-or- The host or authority name specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> cannot be terminated by backslashes.-or- The port number specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> is not valid or cannot be parsed.-or- The length of the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 65519 characters.-or- The length of the scheme specified in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" /> exceeds 1023 characters.-or- There is an invalid character sequence in the URI formed by combining <paramref name="baseUri" /> and <paramref name="relativeUri" />.-or- The MS-DOS path specified in <paramref name="uriString" /> must start with c:\\.</exception>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.IncrementFailed">
            <summary>
            Increments the failed count by 1.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.ClearFailed">
            <summary>
            Sets the failed count to zero indicating the <see cref="T:System.Uri"/> will execute requests successfully.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.FailureCountingUri.FailedCount">
            <summary>
            Gets the failed count.
            </summary>
            <value>
            The failed count.
            </value>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.IsHealthy(System.Int32)">
            <summary>
            Determines whether the specified threshold is bueno.
            </summary>
            <param name="threshold">The threshold.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.N1QL.StreamingQueryResult`1">
            <summary>
            Represents a streaming N1QL response for reading each item as they become available over the network.
            Note that unless <see cref="M:Couchbase.N1QL.StreamingQueryResult`1.ForceRead"/> is called, there is no underlying collection of representing
            the response. If <see cref="M:Couchbase.N1QL.StreamingQueryResult`1.ForceRead"/> is called, then the entire response will be read into a temporary
            collection. This has the ramification of increasing memory usage and negates the benefits of streaming.
            </summary>
            <typeparam name="T">A POCO that matches each row of the reponse.</typeparam>
            <seealso cref="T:Couchbase.N1QL.IQueryResult`1" />
        </member>
        <member name="M:Couchbase.N1QL.StreamingQueryResult`1.CheckRead">
            <summary>
            Checks if the stream has been read. If not, begins reading the attributes until
            rows are encountered.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.QueryTimer">
            <summary>
            Gets or sets the query timer.
            </summary>
            <value>
            The query timer.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.Success">
            <summary>
            Returns true if the operation was succesful.
            </summary>
            <remarks>
            If Success is false, use the Message property to help determine the reason.
            </remarks>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.Message">
            <summary>
            If the operation wasn't succesful, a message indicating why it was not succesful.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.StreamingQueryResult`1.ShouldRetry">
            <summary>
            If the response indicates the request is retryable, returns true.
            </summary>
            <returns></returns>
            <remarks>
            Intended for internal use only.
            </remarks>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.RequestId">
            <summary>
            Gets A unique identifier for the response.
            </summary>
            <value>
            The unique identifier for the response.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.ClientContextId">
            <summary>
            Gets the clientContextID of the request, if one was supplied. Used for debugging.
            </summary>
            <value>
            The client context identifier.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.Signature">
            <summary>
            Gets the schema of the results. Present only when the query completes successfully.
            </summary>
            <value>
            The signature of the schema of the request.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.Rows">
            <summary>
            Gets a list of all the objects returned by the query. An object can be any JSON value.
            </summary>
            <value>
            A a list of all the objects returned by the query.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.Status">
            <summary>
            Gets the status of the request; possible values are: success, running, errors, completed, stopped, timeout, fatal.
            </summary>
            <value>
            The status of the request.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.Errors">
            <summary>
            Gets a list of 0 or more error objects; if an error occurred during processing of the request, it will be represented by an error object in this list.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.Warnings">
            <summary>
            Gets a list of 0 or more warning objects; if a warning occurred during processing of the request, it will be represented by a warning object in this list.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.Metrics">
            <summary>
            Gets an object containing metrics about the request.
            </summary>
            <value>
            The metrics.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.HttpStatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.StreamingQueryResult`1.ResponseStream">
            <summary>
            Gets or sets the response stream.
            </summary>
            <value>
            The response stream.
            </value>
        </member>
        <member name="M:Couchbase.N1QL.StreamingQueryResult`1.ForceRead">
            <summary>
            Forces the stream to be read storing the contents in a collection. For performance reasons
            calling this is generally considered an anti-pattern.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.StreamingQueryResult`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.N1QL.StreamingQueryResult`1.ReadToRows">
            <summary>
            Initializes the reader, and reads all attributes until result rows are encountered.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.StreamingQueryResult`1.ReadResponseAttributes">
            <summary>
            Reads and parses any response attributes, returning at the end of the response or
            once the "results" attribute is encountered.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.StreamingQueryResult`1.ReadObject``1(Newtonsoft.Json.JsonTextReader)">
            <summary>
            Reads the object at the current index within the reader.
            </summary>
            <typeparam name="K"></typeparam>
            <param name="jtr">The JTR.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.StreamingQueryResult`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Couchbase.N1QL.StreamingQueryResult`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Couchbase.N1QL.StreamMustBeReadException">
            <summary>
            Thrown when an attempt is made to access a property or methods before reading the request stream via iteration.
            </summary>
            <seealso cref="T:System.InvalidOperationException" />
        </member>
        <member name="T:Couchbase.N1QL.QueryResult`1">
            <summary>
            The result of a N1QL query.
            </summary>
            <typeparam name="T">The Type of each row returned.</typeparam>
            <remarks>
            The dynamic keyword works well for the Type T.
            </remarks>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Success">
            <summary>
            True if query was successful.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Message">
            <summary>
            Optional message returned by query engine or client
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.RequestId">
            <summary>
            Gets the request identifier.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.ClientContextId">
            <summary>
            Gets the clientContextID of the request, if one was supplied. Used for debugging.
            </summary>
            <value>
            The client context identifier.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Signature">
            <summary>
            Gets the schema of the results. Present only when the query completes successfully.
            </summary>
            <value>
            The signature of the schema of the request.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Rows">
            <summary>
            Gets a list of all the objects returned by the query. An object can be any JSON value.
            </summary>
            <value>
            A a list of all the objects returned by the query.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Status">
            <summary>
            Gets the status of the request; possible values are: success, running, errors, completed, stopped, timeout, fatal.
            </summary>
            <value>
            The status of the request.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Errors">
            <summary>
            Gets a list of 0 or more error objects; if an error occurred during processing of the request, it will be represented by an error object in this list.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Warnings">
            <summary>
            Gets a list of 0 or more warning objects; if a warning occurred during processing of the request, it will be represented by a warning object in this list.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Metrics">
            <summary>
            Gets an object containing metrics about the request.
            </summary>
            <value>
            The metrics.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.HttpStatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="M:Couchbase.N1QL.QueryResult`1.ShouldRetry">
            <summary>
            If the response is retryable, returns true.
            </summary>
            <returns></returns>
            <remarks>Intended for internal use only.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryResult`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the N1QL rows from the result array.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the N1QL rows.
            </returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryResult`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the N1QL rows from the result array.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the N1QL rows.
            </returns>
        </member>
        <member name="T:Couchbase.N1QL.IQueryClient">
            <summary>
            An interface for client-side support for executing N1QL queries against a Couchbase Server.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.Query``1(System.Uri,System.String)">
            <summary>
            Executes an ad-hoc N1QL query against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="server">The <see cref="T:System.Uri"/> of the server.</param>
            <param name="query">A string containing a N1QL query.</param>
            <returns>An <see cref="T:Couchbase.N1QL.IQueryResult`1"/> implementation representing the results of the query.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.QueryAsync``1(System.Uri,System.String)">
            <summary>
            Executes an ad-hoc N1QL query against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="server">The <see cref="T:System.Uri"/> of the server.</param>
            <param name="query">A string containing a N1QL query.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.Prepare(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Prepare an ad-hoc N1QL statement for later execution against a Couchbase Server.
            </summary>
            <param name="toPrepare">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> containing a N1QL statement to be prepared.</param>
            <returns>A <see cref="T:Couchbase.N1QL.IQueryResult`1"/> containing  the <see cref="T:Couchbase.N1QL.QueryPlan"/> representing the reusable
            and cachable execution plan for the statement.</returns>
            <remarks>Most parameters in the IQueryRequest will be ignored, appart from the Statement and the BaseUri.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.Query``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Synchronously executes an a N1QL query request against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="request">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Asynchronously executes an a N1QL query request against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="request">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.QueryAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an a N1QL query request against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="request">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> to execute.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="P:Couchbase.N1QL.IQueryClient.DataMapper">
            <summary>
            The <see cref="T:Couchbase.Views.IDataMapper"/> to use for mapping the output stream to a Type.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.IQueryClient.HttpClient">
            <summary>
            The <see cref="P:Couchbase.N1QL.IQueryClient.HttpClient"/> to use for the HTTP POST to the Server.
            </summary>
        </member>
        <member name="T:Couchbase.N1QL.QueryClient">
            <summary>
            A <see cref="T:Couchbase.Views.IViewClient" /> implementation for executing N1QL queries against a Couchbase Server.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.QueryAsync``1(System.Uri,System.String)">
            <summary>
            Executes an ad-hoc N1QL query against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="server">The <see cref="T:System.Uri"/> of the server.</param>
            <param name="query">A string containing a N1QL query.</param>
            <returns>An <see cref="T:Couchbase.N1QL.IQueryResult`1"/> implementation representing the results of the query.</returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.Query``1(System.Uri,System.String)">
            <summary>
            Executes an ad-hoc N1QL query against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="server">The <see cref="T:System.Uri"/> of the server.</param>
            <param name="query">A string containing a N1QL query.</param>
            <returns>An <see cref="T:Couchbase.N1QL.IQueryResult`1"/> implementation representing the results of the query.</returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.Prepare(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Prepare an ad-hoc N1QL statement for later execution against a Couchbase Server.
            </summary>
            <param name="toPrepare">The <see cref="T:Couchbase.N1QL.IQueryRequest" /> containing a N1QL statement to be prepared.</param>
            <returns>
            A <see cref="T:Couchbase.N1QL.IQueryResult`1" /> containing  the <see cref="T:Couchbase.N1QL.QueryPlan" /> representing the reusable
            and cachable execution plan for the statement.
            </returns>
            <remarks>
            Most parameters in the IQueryRequest will be ignored, appart from the Statement and the BaseUri.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.PrepareAsync(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Prepare an ad-hoc N1QL statement for later execution against a Couchbase Server asynchronously
            </summary>
            <param name="toPrepare">The <see cref="T:Couchbase.N1QL.IQueryRequest" /> containing a N1QL statement to be prepared.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
            <returns>
            A <see cref="T:Couchbase.N1QL.IQueryResult`1" /> containing  the <see cref="T:Couchbase.N1QL.QueryPlan" /> representing the reusable
            and cachable execution plan for the statement.
            </returns>
            <remarks>
            Most parameters in the IQueryRequest will be ignored, appart from the Statement and the BaseUri.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.Query``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes the <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryRequest">The query request.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes the <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase server asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryRequest">The query request.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.QueryAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Executes the <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase server asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryRequest">The query request.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.CheckRetry``1(Couchbase.N1QL.IQueryRequest,Couchbase.N1QL.IQueryResult{``0})">
            <summary>
            Checks the request and result to see if a retry is waranted. Will only retry if
            the request is not adhoc, has not already been retried and contains a N1QL error
            that matches criteria for retry (errors 4050, 4070 and some 5000).
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.PrepareStatementIfNotAdHoc(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Prepares the statement if the <see cref="T:Couchbase.N1QL.IQueryRequest"/> is not ad-hoc and caches it for reuse.
            </summary>
            <param name="originalRequest">The original query request.</param>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.PrepareStatementIfNotAdHocAsync(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Prepares the statement if the <see cref="T:Couchbase.N1QL.IQueryRequest"/> is not ad-hoc and caches it for reuse.asynchronously.
            </summary>
            <param name="originalRequest">The original query request.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.GetDataMapper(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Returns the <see cref="T:Couchbase.Views.IDataMapper"/> to use for a given <see cref="T:Couchbase.N1QL.IQueryRequest"/>
            </summary>
            <param name="queryRequest">Request to get the <see cref="T:Couchbase.Views.IDataMapper"/> for</param>
            <returns><see cref="T:Couchbase.Views.IDataMapper"/> to use for the request</returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.ExecuteQuery``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes the <see cref="T:Couchbase.N1QL.IQueryRequest"/> using HTTP POST to the Couchbase Server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of each row returned by the query.</typeparam>
            <param name="queryRequest">The query request.</param>
            <returns></returns>
            <remarks>The format for the querying is JSON</remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.ExecuteQueryAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Executes the <see cref="T:Couchbase.N1QL.IQueryRequest"/> using HTTP POST to the Couchbase Server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of each row returned by the query.</typeparam>
            <param name="queryRequest">The query request.</param>
            <param name="cancellationToken">Token which can cancel the query.</param>
            <returns></returns>
            <remarks>The format for the querying is JSON</remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>
            An <see cref="T:System.Int32" /> representing the size of the cache before it was cleared.
            </returns>
            <exception cref="T:System.OverflowException">The dictionary already contains the maximum number of elements (<see cref="F:System.Int32.MaxValue" />).</exception>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.ProcessError``1(System.Exception,Couchbase.N1QL.QueryResult{``0})">
            <summary>
            Sets the <see cref="T:Couchbase.N1QL.IQueryRequest"/> state if an error occurred during the request.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ex">The ex.</param>
            <param name="queryResult">The query result.</param>
        </member>
        <member name="P:Couchbase.N1QL.QueryClient.DataMapper">
            <summary>
            The <see cref="T:Couchbase.Views.IDataMapper"/> to use for mapping the output stream to a Type.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryClient.HttpClient">
            <summary>
            The <see cref="P:Couchbase.N1QL.QueryClient.HttpClient"/> to use for the HTTP POST to the Server.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.ApplyCredentials(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Applies the credentials if they have been set by call <see cref="M:Couchbase.Cluster.Authenticate(Couchbase.Authentication.IClusterCredentials)"/>.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:Couchbase.DefaultResult">
            <summary>
            Basic operation return value
            </summary>
        </member>
        <member name="P:Couchbase.DefaultResult.Success">
            <summary>
            Returns true if the operation was succesful.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="P:Couchbase.DefaultResult.Message">
            <summary>
            If the operation wasn't succesful, a message indicating why it was not succesful.
            </summary>
        </member>
        <member name="P:Couchbase.DefaultResult.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="T:Couchbase.DocumentFragment`1">
            <summary>
            Represents one more fragments of an <see cref="T:Couchbase.IDocument`1"/> that is returned by the sub-document API.
            </summary>
            <typeparam name="TDocument">The document</typeparam>
        </member>
        <member name="P:Couchbase.DocumentFragment`1.Expiry">
            <summary>
            The time-to-live or TTL for the document before it's evicted from disk in milliseconds.
            </summary>
            <remarks>Setting this to zero or less will give the document infinite lifetime</remarks>
        </member>
        <member name="M:Couchbase.DocumentFragment`1.Content``1(System.String)">
            <summary>
            The value if it exists for a specific path.
            </summary>
            <typeparam name="TContent">The <see cref="T:System.Type"/> to cast the value to.</typeparam>
            <param name="path">The path of the operation to retrieve the value from.</param>
            <returns>An object of type <see cref="T:System.Type"/> representing the value of the operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.DocumentFragment`1.Content``1(System.Int32)">
            <summary>
            The value if it exists for a specific index.
            </summary>
            <typeparam name="TContent">The <see cref="T:System.Type"/> to cast the value to.</typeparam>
            <param name="index">The ordinal of the operation to retrieve the value from.</param>
            <returns>An object of type <see cref="T:System.Type"/> representing the value of the operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.DocumentFragment`1.Content(System.String)">
            <summary>
            The value if it exists for a specific path.
            </summary>
            <param name="path">The path of the operation to retrieve the value from.</param>
            <returns>An <see cref="T:System.Object"/> representing the result of a operation.</returns>
            <remarks>If no value exists, the default value (null) for the <see cref="T:System.Object"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.DocumentFragment`1.Content(System.Int32)">
            <summary>
            The value if it exists for a specific index.
            </summary>
            <param name="index">The ordinal of the operation to retrieve the value from.</param>
            <returns>An <see cref="T:System.Object"/> representing the result of a operation.</returns>
            <remarks>If no value exists, the default value for the <see cref="T:System.Type"/> will be returned.</remarks>
            <remarks>If no value exists, the default value (null) for the <see cref="T:System.Object"/> will be returned.</remarks>
        </member>
        <member name="M:Couchbase.DocumentFragment`1.Exists(System.String)">
            <summary>
            Checks whether the given path is part of this result set, eg. an operation targeted it, and the operation executed successfully.
            </summary>
            <param name="path">The path for the sub-document operation.</param>
            <returns><s>true</s> if that path is part of the successful result set, <s>false</s> in any other case.</returns>
        </member>
        <member name="M:Couchbase.DocumentFragment`1.Count">
            <summary>
            The count of the sub-document operations chained togather.
            </summary>
            <returns>An <see cref="T:System.Int32"/> that is the count of the total operations chained togather.</returns>
        </member>
        <member name="M:Couchbase.DocumentFragment`1.OpStatus(System.String)">
            <summary>
            Gets the <see cref="T:Couchbase.IO.ResponseStatus"/> for a specific operation at it's path.
            </summary>
            <param name="path">The path of the operation.</param>
            <returns>The <see cref="T:Couchbase.IO.ResponseStatus"/> that the server returned.</returns>
        </member>
        <member name="M:Couchbase.DocumentFragment`1.OpStatus(System.Int32)">
            <summary>
            Gets the <see cref="T:Couchbase.IO.ResponseStatus"/> for a specific operation at it's index.
            </summary>
            <param name="index">The ordinal of the operation.</param>
            <returns>The <see cref="T:Couchbase.IO.ResponseStatus"/> that the server returned.</returns>
        </member>
        <member name="P:Couchbase.DocumentFragment`1.Value">
            <summary>
            An adapter between <see cref="T:Couchbase.IOperationResult`1"/> and the sub document API.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="T:Couchbase.ScanConsistencyNameResolver">
            <summary>
            Translates the <see cref="T:Couchbase.N1QL.ScanConsistency"/> enumeration to it's Couchbase Server equivalents.
            </summary>
        </member>
        <member name="M:Couchbase.ScanConsistencyNameResolver.Resolve(Couchbase.N1QL.ScanConsistency)">
            <summary>
            Resolves the specified <see cref="T:Couchbase.N1QL.ScanConsistency"/> to a Couchbase Server <see cref="T:System.String"/> equivalent.
            </summary>
            <param name="scanConsistency">The scam consistency.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.DateRangeFacet">
            <summary>
            A <see cref="T:Couchbase.Search.ISearchFacet"/> which counts how many documents fall between two <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="M:Couchbase.Search.DateRangeFacet.AddRange(System.DateTime,System.DateTime)">
            <summary>
            Adds a <see cref="T:Couchbase.Search.Range`1"/> to the <see cref="T:Couchbase.Search.ISearchFacet"/>.
            </summary>
            <param name="startDate">The start date of the range.</param>
            <param name="endDate">The end date of the range.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.DateRangeFacet.AddRange(Couchbase.Search.Range{System.DateTime})">
            <summary>
            Adds a <see cref="T:Couchbase.Search.Range`1"/> to the <see cref="T:Couchbase.Search.ISearchFacet"/>.
            </summary>
            <param name="range">A <see cref="T:Couchbase.Search.Range`1"/> for the <see cref="T:Couchbase.Search.ISearchFacet"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.DateRangeFacet.AddRanges(Couchbase.Search.Range{System.DateTime}[])">
            <summary>
            Adds a range of <see cref="T:Couchbase.Search.Range`1"/>'s to the <see cref="T:Couchbase.Search.ISearchFacet"/>.
            </summary>
            <param name="ranges">A range of <see cref="T:Couchbase.Search.Range`1"/>'s to add the <see cref="T:Couchbase.Search.ISearchFacet"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.DateRangeFacet.ToJson">
            <summary>
            Gets the JSON representation of this object.
            </summary>
            <exception cref="T:System.InvalidOperationException">The Name and the Field property must have a value.</exception>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the object's state.</returns>
        </member>
        <member name="T:Couchbase.Search.ISearchParams">
            <summary>
            Represents the input parameters for a <see cref="T:Couchbase.Search.IFtsQuery"/> request.
            </summary>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.Limit(System.Int32)">
            <summary>
            Limits the number of matching results from a returned result-set.
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.Skip(System.Int32)">
            <summary>
            Skip indicates how many matching results to skip on the result set before returing matches.
            </summary>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.Explain(System.Boolean)">
            <summary>
            If true, the response will include additional search score explanations.
            </summary>
            <param name="explain"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.Highlighting(Couchbase.Search.HighLightStyle)">
            <summary>
            Allows setting of additional highlighting on the result set of matching terms.
            </summary>
            <param name="highLightStyle">The <see cref="T:Couchbase.Search.HighLightStyle"/> to use.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.Highlighting(Couchbase.Search.HighLightStyle,System.String[])">
            <summary>
            Allows setting of additional highlighting on the result set of matching terms.
            </summary>
            <param name="highLightStyle">The <see cref="T:Couchbase.Search.HighLightStyle"/> to use.</param>
            <param name="fields">The specific terms or fields to highlight.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.Fields(System.String[])">
            <summary>
            List of fields values that should be returned in the result assuming that they were indexed.
            </summary>
            <param name="fields">The indexed fields to return.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.Facets(Couchbase.Search.ISearchFacet[])">
            <summary>
            <see cref="T:Couchbase.Search.ISearchFacet"/>s used to aggregate information collected on a particluar result set.
            </summary>
            <param name="searchFacets">The <see cref="T:Couchbase.Search.ISearchFacet"/> to aggreate information on.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.Timeout(System.TimeSpan)">
            <summary>
            The server side timeout allows to specify an upper boundary of request execution so that it potentially doesn't run infinitely.
            </summary>
            <param name="timeout">The max length of time that that will be given to execute the query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.WithConsistency(Couchbase.N1QL.ScanConsistency)">
            <summary>
            The <see cref="T:Couchbase.N1QL.ScanConsistency"/> you require for you <see cref="T:Couchbase.Search.ISearchQueryResult"/>s.
            </summary>
            <param name="consistency">The <see cref="T:Couchbase.N1QL.ScanConsistency"/> for documents to be included in the query results.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.Sort(System.String[])">
            <summary>
            Configures the list of fields which are used for sorting the search result. Fields with a prefix of "-" indicate a decending nature.
            If no sort is provided, it is equal to sort("-_score"), since the server will sort it by score in descending order by default.
            </summary>
            <param name="sort">The field names to sort by.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchParams.ToJson">
            <summary>
            Gets the JSON representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.BooleanFieldQuery">
            <summary>
            A boolean field query matches documents which have a boolean field which corresponds to the requested boolean value.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.BooleanFieldQuery.Field(System.String)">
            <summary>
            The field for the match.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.DocIdQuery">
            <summary>
            A docId query is a query that directly matches the documents whose ID have been provided.
            It can be combined within a ConjunctionQuery to restrict matches on the set of documents.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.DocIdQuery.Add(System.String[])">
            <summary>
            Adds the specified document ids.
            </summary>
            <param name="docIds">The document ids.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.MatchAllQuery">
            <summary>
            A match all query matches all documents in the index. It can take search parameters
            as other queries, so this can be restricted (eg. with limit).
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.MatchNoneQuery">
            <summary>
            A match none query doesn't match any document in the index.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.PhraseQuery">
            <summary>
            The phrase query allows to query for exact term phrases in the index. The provided
            terms must exist in the correct order, at the correct index offsets, in the specified field
            (as no analyzer are applied to the terms). Queried field must have been indexed with
            includeTermVectors set to true. It is generally more useful in debugging scenarios,
            and the Match Phrase Query should usually be preferred for real-world use cases.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.PhraseQuery.Field(System.String)">
            <summary>
            The field to search against.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.TermQuery">
            <summary>
            A term query is a query that may be "fuzzy" and matches terms within a specified edit distance (Levenshtein distance).
            Also, you can optionally specify that the term must have a matching prefix of the specified length.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.TermQuery.Field(System.String)">
            <summary>
            The field to search against.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.WildcardQuery">
            <summary>
            A wildcard query is a query in which term the character * will match 0..n occurrences of any characters and ? will match 1 occurrence of any character.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.WildcardQuery.Field(System.String)">
            <summary>
            The field for the match.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.MatchPhraseQuery">
            <summary>
             A match query searches for terms occurring in the specified positions and offsets.
             The input text is analyzed and a phrase query is built with the terms resulting from the analysis.
             This depends on term vectors, which are consulted to determine phrase distance.
             </summary>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.MatchQuery">
            <summary>
             A query that analyzes the input text and uses that analyzed text to query the index.
            </summary>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.PrefixQuery">
            <summary>
            The prefix query finds documents containing terms that start with the provided prefix.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.PrefixQuery.Field(System.String)">
            <summary>
            The field to search against.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.RegexpQuery">
            <summary>
            Regexp query finds documents containing terms that match the specified regular expression.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.RegexpQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Search.Queries.Simple.RegexpQuery"/> class.
            </summary>
            <param name="regex">The regexp to be analyzed and used against. The regexp string is required.</param>
            <exception cref="T:System.ArgumentNullException">regex</exception>
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.RegexpQuery.Field(System.String)">
            <summary>
            If a field is specified, only terms in that field will be matched. This can also affect the used analyzer if one isn't specified explicitly.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Simple.QueryStringQuery">
            <summary>
            The query string query allows humans to describe complex queries using a simple syntax.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Simple.QueryStringQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Search.Queries.Simple.QueryStringQuery"/> class.
            </summary>
            <param name="query">The query string to be analyzed and used against. The query string is required.</param>
            <exception cref="T:System.ArgumentNullException">query</exception>
        </member>
        <member name="T:Couchbase.Search.Queries.FtsQueryBase">
            <summary>
            Base class for <see cref="T:Couchbase.Search.IFtsQuery"/> implementations.
            </summary>
            <seealso cref="T:Couchbase.Search.IFtsQuery" />
        </member>
        <member name="M:Couchbase.Search.Queries.FtsQueryBase.Boost(System.Double)">
            <summary>
            Used to increase the relative weight of a clause (with a boost greater than 1) or decrease the relative weight (with a boost between 0 and 1).
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.FtsQueryBase.Export">
            <summary>
            Gets a JSON object representing this query instance />
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Search.Queries.FtsQueryBase.Couchbase#Search#IFtsQuery#Lifespan">
            <summary>
            Sets the lifespan of the search request; used to check if the request exceeded the maximum time
            configured for it in <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.SearchRequestTimeout" />
            </summary>
            <value>
            The lifespan.
            </value>
        </member>
        <member name="M:Couchbase.Search.Queries.FtsQueryBase.Couchbase#Search#IFtsQuery#TimedOut">
            <summary>
            True if the request exceeded it's <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.SearchRequestTimeout" />
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Compound.BooleanQuery">
            <summary>
            A combination of conjunction and disjunction queries.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.BooleanQuery.Must(Couchbase.Search.Queries.FtsQueryBase[])">
            <summary>
            Result documents must satisfy these queries.
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.BooleanQuery.Should(Couchbase.Search.Queries.FtsQueryBase[])">
            <summary>
            Result documents should satisfy these queries..
            </summary>
            <param name="queries">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.BooleanQuery.ShouldMin(System.Int32)">
            <summary>
            If a hit satisfies at least min queries in the should be boosted by this amount.
            </summary>
            <param name="min">The minimum to boost by - the default is 1.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.BooleanQuery.MustNot(Couchbase.Search.Queries.FtsQueryBase[])">
            <summary>
            Result documents must not satisfy these queries.
            </summary>
            <param name="queries">The query.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Compound.ConjunctionQuery">
            <summary>
            The conjunction query is a compound query. The result documents must satisfy all of the child queries. It is possible to recursively nest compound queries.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.ConjunctionQuery.And(Couchbase.Search.Queries.FtsQueryBase[])">
            <summary>
            Adds additional <see cref="T:Couchbase.Search.Queries.FtsQueryBase"/> implementations to this <see cref="T:Couchbase.Search.Queries.Compound.ConjunctionQuery"/>.
            </summary>
            <param name="queries">One or more <see cref="T:Couchbase.Search.Queries.FtsQueryBase"/> queries to add.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Compound.DisjunctionQuery">
            <summary>
            The disjunction query is a compound query. The result documents must satisfy a configurable min number of child queries. By default this min is set to 1.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.DisjunctionQuery.Or(Couchbase.Search.Queries.FtsQueryBase[])">
            <summary>
            Adds additional <see cref="T:Couchbase.Search.Queries.FtsQueryBase"/> implementations to this <see cref="T:Couchbase.Search.Queries.Compound.ConjunctionQuery"/>.
            </summary>
            <param name="queries">One or more <see cref="T:Couchbase.Search.Queries.FtsQueryBase"/> queries to add.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Compound.DisjunctionQuery.Min(System.Int32)">
            <summary>
            The minimum number of child queries that must be satisfied for the disjunction query.
            </summary>
            <param name="min">The minimum.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Range.DateRangeQuery">
            <summary>
            The date range query finds documents containing a date value in the specified field within the specified range.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Range.DateRangeQuery.Start(System.DateTime,System.Boolean)">
            <summary>
            The start date of the range.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="inclusive">if set to <c>true</c> [inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Range.DateRangeQuery.End(System.DateTime,System.Boolean)">
            <summary>
            The end date of the range
            </summary>
            <param name="endTime">The end time.</param>
            <param name="inclusive">if set to <c>true</c> [inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Range.DateRangeQuery.Field(System.String)">
            <summary>
            If a field is specified, only terms in that field will be matched. This can also affect the used analyzer if one isn't specified explicitly.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Range.DateRangeQuery.Parser(System.String)">
            <summary>
            The name of the parser to use.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.Queries.Range.NumericRangeQuery">
            <summary>
            The numeric range query finds documents containing a numeric value in the specified field within the specified range. Either min or max can be omitted, but not both.
            </summary>
            <seealso cref="T:Couchbase.Search.Queries.FtsQueryBase" />
        </member>
        <member name="M:Couchbase.Search.Queries.Range.NumericRangeQuery.Min(System.Double,System.Boolean)">
            <summary>
            The lower end of the range, inclusive by default.
            </summary>
            <param name="min">The minimum.</param>
            <param name="inclusive">if set to <c>true</c> [inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Range.NumericRangeQuery.Max(System.Double,System.Boolean)">
            <summary>
            The higher end of the range, exclusive by default.
            </summary>
            <param name="max">The maximum.</param>
            <param name="inclusive">if set to <c>true</c> [inclusive].</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.Queries.Range.NumericRangeQuery.Field(System.String)">
            <summary>
            If a field is specified, only terms in that field will be matched. This can also affect the used analyzer if one isn't specified explicitly.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.ISearchClient">
            <summary>
            A client for making FTS <see cref="T:Couchbase.Search.IFtsQuery"/> requests and mapping the responses to <see cref="T:Couchbase.Search.ISearchQueryResult"/>'s.
            </summary>
        </member>
        <member name="M:Couchbase.Search.ISearchClient.Query(Couchbase.Search.SearchQuery)">
            <summary>
            Executes a <see cref="T:Couchbase.Search.IFtsQuery"/> request including any <see cref="T:Couchbase.Search.ISearchParams"/> parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.ISearchClient.QueryAsync(Couchbase.Search.SearchQuery)">
            <summary>
            Executes a <see cref="T:Couchbase.Search.IFtsQuery"/> request including any <see cref="T:Couchbase.Search.ISearchParams"/> parameters asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Search.ISearchClient.DataMapper">
            <summary>
            A <see cref="T:Couchbase.Views.IDataMapper"/> implementation for mapping the FTS response to a <see cref="T:Couchbase.Search.ISearchQueryResult"/> instance.
            </summary>
            <value>
            The data mapper.
            </value>
        </member>
        <member name="T:Couchbase.Search.SearchClient">
            <summary>
            A client for making FTS <see cref="T:Couchbase.Search.IFtsQuery"/> requests and mapping the responses to <see cref="T:Couchbase.Search.ISearchQueryResult"/>'s.
            </summary>
            <seealso cref="T:Couchbase.Search.ISearchClient" />
        </member>
        <member name="M:Couchbase.Search.SearchClient.Query(Couchbase.Search.SearchQuery)">
            <summary>
            Executes a <see cref="T:Couchbase.Search.IFtsQuery" /> request including any <see cref="T:Couchbase.Search.ISearchParams" /> parameters.
            </summary>
            <param name="searchQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchClient.QueryAsync(Couchbase.Search.SearchQuery)">
            <summary>
            Executes a <see cref="T:Couchbase.Search.IFtsQuery" /> request including any <see cref="T:Couchbase.Search.ISearchParams" /> parameters asynchronously.
            </summary>
            <returns>A <see cref="T:Couchbase.Search.ISearchQueryResult"/> wrapped in a <see cref="T:System.Threading.Tasks.Task"/> for awaiting on.</returns>
        </member>
        <member name="M:Couchbase.Search.SearchClient.ProcessError(System.Exception,Couchbase.Search.SearchQueryResult)">
            <summary>
            Processes the error.
            </summary>
            <param name="e">The <see cref="T:System.Exception"/> that was raised.</param>
            <param name="result">The <see cref="T:Couchbase.Search.ISearchQueryResult"/> that will returned back to the caller with the failure state.</param>
        </member>
        <member name="P:Couchbase.Search.SearchClient.DataMapper">
            <summary>
            A <see cref="T:Couchbase.Views.IDataMapper" /> implementation for mapping the FTS response to a <see cref="T:Couchbase.Search.ISearchQueryResult" /> instance.
            </summary>
            <value>
            The data mapper.
            </value>
        </member>
        <member name="M:Couchbase.Search.SearchClient.CreateHttpClient">
            <summary>
            Creates the HTTP client.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.SearchFacet">
            <summary>
            An abstract class for creating <see cref="T:Couchbase.Search.ISearchFacet"/> implementations.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchFacet.Name">
            <summary>
            The name of the facet.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchFacet.Field">
            <summary>
            The field of the facet.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchFacet.Size">
            <summary>
            The number of facets or categories returned.
            </summary>
        </member>
        <member name="M:Couchbase.Search.SearchFacet.ToJson">
            <summary>
            Gets the JSON representation of this object.
            </summary>
            <exception cref="T:System.InvalidOperationException">The Name and the Field property must have a value.</exception>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the object's state.</returns>
        </member>
        <member name="M:Couchbase.Search.SearchFacet.Term(System.String,System.String,System.Int32)">
            <summary>
            Factory for creating <see cref="T:Couchbase.Search.TermFacet"/> instances.
            </summary>
            <param name="name">The name.</param>
            <param name="field">The field.</param>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchFacet.Numeric(System.String,System.String,System.Int32,Couchbase.Search.Range{System.Single}[])">
            <summary>
            Factory for creating <see cref="T:Couchbase.Search.NumericRangeFacet"/> instances.
            </summary>
            <param name="name">The name.</param>
            <param name="field">The field.</param>
            <param name="size">The size.</param>
            <param name="ranges">The ranges.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchFacet.Date(System.String,System.String,System.Int32,Couchbase.Search.Range{System.DateTime}[])">
            <summary>
            Factory for creating <see cref="T:Couchbase.Search.DateRangeFacet"/> instances.
            </summary>
            <param name="name">The name.</param>
            <param name="field">The field.</param>
            <param name="size">The size.</param>
            <param name="ranges">The ranges.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.ISearchFacet">
            <summary>
            A <see cref="T:Couchbase.Search.ISearchFacet"/> allows for aggregating information collected on a particular result set.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchFacet.Name">
            <summary>
            The name of the facet.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchFacet.Field">
            <summary>
            The field of the facet.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchFacet.Size">
            <summary>
            The limit for ??????
            </summary>
        </member>
        <member name="M:Couchbase.Search.ISearchFacet.ToJson">
            <summary>
            Gets the JSON representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.HighLightStyle">
            <summary>
            The highlighting options available from the server.
            </summary>
        </member>
        <member name="F:Couchbase.Search.HighLightStyle.None">
            <summary>
            The default if <see cref="F:Couchbase.Search.HighLightStyle.Html"/> or <see cref="F:Couchbase.Search.HighLightStyle.Ansi"/> are not specified.
            </summary>
        </member>
        <member name="F:Couchbase.Search.HighLightStyle.Html">
            <summary>
            For Html style highlighting
            </summary>
        </member>
        <member name="F:Couchbase.Search.HighLightStyle.Ansi">
            <summary>
            For Ansi style highlighting
            </summary>
        </member>
        <member name="T:Couchbase.Search.IFtsQuery">
            <summary>
            Represents a search query request.
            </summary>
        </member>
        <member name="M:Couchbase.Search.IFtsQuery.Boost(System.Double)">
            <summary>
            Used to increase the relative weight of a clause (with a boost greater than 1) or decrease the relative weight (with a boost between 0 and 1).
            </summary>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.IFtsQuery.Export">
            <summary>
            Gets a JSON object representing this instance excluding any <see cref="T:Couchbase.Search.ISearchParams"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Search.IFtsQuery.Lifespan">
            <summary>
            Sets the lifespan of the search request; used to check if the request exceeded the maximum time
            configured for it in <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.SearchRequestTimeout"/>
            </summary>
            <value>
            The lifespan.
            </value>
        </member>
        <member name="M:Couchbase.Search.IFtsQuery.TimedOut">
            <summary>
            True if the request exceeded it's <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.SearchRequestTimeout"/>
            </summary>
            <returns><c>true</c> if the request has timed out.</returns>
        </member>
        <member name="T:Couchbase.Search.ISearchQueryResult">
            <summary>
            The result of a search query.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryResult.Hits">
            <summary>
            The rows returned by the search request.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryResult.HitsOrFail">
            <summary>
            The rows returned by the search request.
            Throws Exception if an execution error occured while processing requst.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryResult.Facets">
            <summary>
            The facets for the result.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryResult.Errors">
            <summary>
            The errors returned from the server if the request failed.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryResult.Status">
            <summary>
            The status for the result.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryResult.Metrics">
            <summary>
            The metrics for the search. Includes number of hits, time taken, etc.
            </summary>
        </member>
        <member name="T:Couchbase.Search.ISearchQueryRow">
            <summary>
            Represents a single "hit" for a <see cref="T:Couchbase.Search.IFtsQuery"/> request.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Id">
            <summary>
            The document identifier.
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Score">
            <summary>
            The relative score for this "hit".
            </summary>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Index">
            <summary>
            Gets the index used for the "hit".
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Explanation">
            <summary>
            Detailed explanation of the search "hit".
            </summary>
            <value>
            The explanation.
            </value>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Locations">
            <summary>
            Indicates the offsets of the search terms matched inside the document.
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Fields">
            <summary>
            Give thes complete value of the included fields where matches occurred.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:Couchbase.Search.ISearchQueryRow.Fragments">
            <summary>
            The highlighted fragments of the search hits within the content.
            </summary>
            <value>
            The fragments.
            </value>
        </member>
        <member name="T:Couchbase.Search.NumericRangeFacet">
            <summary>
            A <see cref="T:Couchbase.Search.ISearchFacet"/> which counts how many documents fall between two <see cref="T:System.Single"/> values.
            </summary>
        </member>
        <member name="M:Couchbase.Search.NumericRangeFacet.AddRange(System.Single,System.Single)">
            <summary>
             /// <summary>
            Adds a numeric range to the <see cref="T:Couchbase.Search.ISearchFacet"/>.
            </summary>
            </summary>
            <param name="name">The name of the <see cref="T:Couchbase.Search.ISearchFacet"/>.</param>
            <param name="start">The start of the numeric range."/></param>
            <param name="end">The end of the numeric range.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.NumericRangeFacet.AddRange(Couchbase.Search.Range{System.Single})">
            <summary>
            Adds a numeric range to the <see cref="T:Couchbase.Search.ISearchFacet"/>.
            </summary>
            <param name="range">A numeric range.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.NumericRangeFacet.AddRanges(Couchbase.Search.Range{System.Single}[])">
            <summary>
            Adds a range of numeric ranges to the <see cref="T:Couchbase.Search.ISearchFacet"/>
            </summary>
            <param name="ranges">A range of <see cref="T:Couchbase.Search.ISearchFacet"/>s.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.NumericRangeFacet.ToJson">
            <summary>
            Gets the JSON representation of this object.
            </summary>
            <exception cref="T:System.InvalidOperationException">The Name and the Field property must have a value.</exception>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the object's state.</returns>
        </member>
        <member name="T:Couchbase.Search.Range`1">
            <summary>
            Represents a range of values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Couchbase.Search.Range`1.Name">
            <summary>
            Gets or sets the name for the range.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Search.Range`1.Start">
            <summary>
            Gets or sets the start value.
            </summary>
            <value>
            The start.
            </value>
        </member>
        <member name="P:Couchbase.Search.Range`1.End">
            <summary>
            Gets or sets the end value.
            </summary>
            <value>
            The end.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.SuccessCount">
            <summary>
            The number of shards (pindex) of the FTS index that were successfully queried, returning hits.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.ErrorCount">
            <summary>
            The count of errors.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.TotalCount">
            <summary>
            Gets the total count.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.Took">
            <summary>
            Total time taken for the results.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.TotalHits">
            <summary>
            Total hits returned by the results.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchMetrics.MaxScore">
            <summary>
            The maximum score within the results.
            </summary>
        </member>
        <member name="T:Couchbase.Search.SearchParams">
            <summary>
            Represents a number of query options that can be applied to a FTS query request.
            </summary>
            <seealso cref="T:Couchbase.Search.ISearchParams" />
        </member>
        <member name="M:Couchbase.Search.SearchParams.Limit(System.Int32)">
            <summary>
            Limits the number of matching results from a returned result-set.
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchParams.Skip(System.Int32)">
            <summary>
            Skip indicates how many matching results to skip on the result set before returing matches.
            </summary>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchParams.Explain(System.Boolean)">
            <summary>
            If true, the response will include additional search score explanations.
            </summary>
            <param name="explain"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchParams.Highlighting(Couchbase.Search.HighLightStyle)">
            <summary>
            Allows setting of additional highlighting on the result set of matching terms.
            </summary>
            <param name="highLightStyle">The <see cref="T:Couchbase.Search.HighLightStyle" /> to use.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchParams.Highlighting(Couchbase.Search.HighLightStyle,System.String[])">
            <summary>
            Allows setting of additional highlighting on the result set of matching terms.
            </summary>
            <param name="highLightStyle">The <see cref="T:Couchbase.Search.HighLightStyle" /> to use.</param>
            <param name="fields">The specific terms or fields to highlight.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchParams.Fields(System.String[])">
            <summary>
            List of fields values that should be returned in the result assuming that they were indexed.
            </summary>
            <param name="fields">The indexed fields to return.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchParams.Facets(Couchbase.Search.ISearchFacet[])">
            <summary>
              <see cref="T:Couchbase.Search.ISearchFacet" />s used to aggregate information collected on a particluar result set.
            </summary>
            <param name="searchFacets">The <see cref="T:Couchbase.Search.ISearchFacet" /> to aggreate information on.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchParams.Timeout(System.TimeSpan)">
            <summary>
            The server side timeout allows to specify an upper boundary of request execution so that it potentially doesn't run infinitely.
            </summary>
            <param name="timeout">The max length of time that that will be given to execute the query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchParams.WithConsistency(Couchbase.N1QL.ScanConsistency)">
            <summary>
            The <see cref="T:Couchbase.N1QL.ScanConsistency" /> you require for you <see cref="T:Couchbase.Search.ISearchQueryResult" />s.
            </summary>
            <param name="consistency">The <see cref="T:Couchbase.N1QL.ScanConsistency" /> for documents to be included in the query results.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchParams.Sort(System.String[])">
            <summary>
            Configures the list of fields which are used for sorting the search result. Fields with a prefix of "-" indicate a decending nature.
            If no sort is provided, it is equal to sort("-_score"), since the server will sort it by score in descending order by default.
            </summary>
            <param name="sort">The field names to sort by.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchParams.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Couchbase.Search.SearchQuery">
            <summary>
            Represents a Full Text Search (FTS) query against an index for a given <see cref="T:Couchbase.Search.IFtsQuery"/> implementation using <see cref="T:Couchbase.Search.ISearchParams"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQuery.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>
            The credentials.
            </value>
        </member>
        <member name="F:Couchbase.Search.SearchQuery.ApiPath">
            <summary>
            The virtual path template for the API
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQuery.Index">
            <summary>
            Gets or sets the index to use for the FTS query.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQuery.SearchParams">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Search.ISearchParams"/> parameters to pass to the FTS service.
            </summary>
            <value>
            The search parameters.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQuery.Query">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Search.IFtsQuery"/> to send to the FTS service.
            </summary>
            <value>
            The query.
            </value>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.RelativeUri">
            <summary>
            Gets the relative path for the FTS API service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.Limit(System.Int32)">
            <summary>
            Limits the number of matching results from a returned result-set.
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.Skip(System.Int32)">
            <summary>
            Skip indicates how many matching results to skip on the result set before returing matches.
            </summary>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.Explain(System.Boolean)">
            <summary>
            If true, the response will include additional search score explanations.
            </summary>
            <param name="explain"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.Highlighting(Couchbase.Search.HighLightStyle)">
            <summary>
            Allows setting of additional highlighting on the result set of matching terms.
            </summary>
            <param name="highLightStyle">The <see cref="T:Couchbase.Search.HighLightStyle" /> to use.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.Highlighting(Couchbase.Search.HighLightStyle,System.String[])">
            <summary>
            Allows setting of additional highlighting on the result set of matching terms.
            </summary>
            <param name="highLightStyle">The <see cref="T:Couchbase.Search.HighLightStyle" /> to use.</param>
            <param name="fields">The specific terms or fields to highlight.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.Fields(System.String[])">
            <summary>
            List of fields values that should be returned in the result assuming that they were indexed.
            </summary>
            <param name="fields">The indexed fields to return.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.Facets(Couchbase.Search.ISearchFacet[])">
            <summary>
              <see cref="T:Couchbase.Search.ISearchFacet" />s used to aggregate information collected on a particluar result set.
            </summary>
            <param name="searchFacets">The <see cref="T:Couchbase.Search.ISearchFacet" /> to aggreate information on.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.Timeout(System.TimeSpan)">
            <summary>
            The server side timeout allows to specify an upper boundary of request execution so that it potentially doesn't run infinitely.
            </summary>
            <param name="timeout">The max length of time that that will be given to execute the query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.WithConsistency(Couchbase.N1QL.ScanConsistency)">
            <summary>
            The <see cref="T:Couchbase.N1QL.ScanConsistency" /> you require for you <see cref="T:Couchbase.Search.ISearchQueryResult" />s.
            </summary>
            <param name="consistency">The <see cref="T:Couchbase.N1QL.ScanConsistency" /> for documents to be included in the query results.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.Sort(System.String[])">
            <summary>
            Configures the list of fields which are used for sorting the search result. Fields with a prefix of "-" indicate a decending nature.
            If no sort is provided, it is equal to sort("-_score"), since the server will sort it by score in descending order by default.
            </summary>
            <param name="sort">The field names to sort by.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Search.SearchQuery.ToJson">
            <summary>
            Gets the JSON representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Search.SearchQueryResult">
            <summary>
            The result of a search query.
            </summary>
            <seealso cref="T:Couchbase.Search.ISearchQueryResult" />
        </member>
        <member name="P:Couchbase.Search.SearchQueryResult.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Couchbase.Search.ISearchQueryResult" /> is success.
            </summary>
            <value>
              <c>true</c> if success; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQueryResult.Couchbase#IResult#Message">
            <summary>
            If the operation wasn't succesful, the first message returned in the <see cref="P:Couchbase.Search.SearchQueryResult.Errors"/>
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQueryResult.Hits">
            <summary>
            The rows returned by the search request.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQueryResult.HitsOrFail">
            <summary>
            The rows returned by the search request. Throws caugh exception if an execution error occured.
            Throws Exception if an execution error occured while processing requst.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQueryResult.Facets">
            <summary>
            The facets for the result.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQueryResult.Errors">
            <summary>
            The errors returned from the server if the request failed.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQueryResult.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="M:Couchbase.Search.SearchQueryResult.Add(Couchbase.Search.ISearchQueryRow)">
            <summary>
            Adds the specified row.
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Couchbase.Search.SearchQueryResult.Add(Couchbase.Search.SearchFacet)">
            <summary>
            Adds the specified facet.
            </summary>
            <param name="facet">The facet.</param>
        </member>
        <member name="P:Couchbase.Search.SearchQueryResult.Status">
            <summary>
            The status for the result.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQueryResult.Metrics">
            <summary>
            The metrics for the search. Includes number of hits, time taken, etc.
            </summary>
        </member>
        <member name="T:Couchbase.Search.SearchQueryRow">
            <summary>
            Represents a single "hit" for a <see cref="T:Couchbase.Search.IFtsQuery"/> request.
            </summary>
            <seealso cref="T:Couchbase.Search.ISearchQueryRow" />
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Id">
            <summary>
            The document identifier.
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Score">
            <summary>
            The relative score for this "hit".
            </summary>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Index">
            <summary>
            Gets the index used for the "hit".
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Explanation">
            <summary>
            Detailed explanation of the search "hit".
            </summary>
            <value>
            The explanation.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Locations">
            <summary>
            Indicates the offsets of the search terms matched inside the document.
            </summary>
            <value>
            The locations.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Fields">
            <summary>
            Give thes complete value of the included fields where matches occurred.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:Couchbase.Search.SearchQueryRow.Fragments">
            <summary>
            The highlighted fragments of the search hits within the content.
            </summary>
            <value>
            The fragments.
            </value>
        </member>
        <member name="T:Couchbase.Search.SearchStatus">
            <summary>
            The status of the <see cref="T:Couchbase.Search.IFtsQuery"/> response.
            </summary>
        </member>
        <member name="F:Couchbase.Search.SearchStatus.Success">
            <summary>
            The search query returned with an HTTP 200
            </summary>
        </member>
        <member name="F:Couchbase.Search.SearchStatus.Failed">
            <summary>
            The search query failed.
            </summary>
        </member>
        <member name="T:Couchbase.Search.TermFacet">
            <summary>
            A <see cref="T:Couchbase.Search.ISearchFacet"/> implementation which counts up how many  of the matching documents have a particular term in a particular field.
            </summary>
        </member>
        <member name="T:Couchbase.SubdocExtensions">
            <summary>
            Extensions related to lambda path evaluation for <see cref="T:Couchbase.Core.ILookupInBuilder`1"/>,
            <see cref="T:Couchbase.Core.IMutateInBuilder`1"/>, and <see cref="T:Couchbase.IDocumentFragment`1"/>.
            </summary>
        </member>
        <member name="M:Couchbase.SubdocExtensions.Get``2(Couchbase.Core.ILookupInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get a fragment of type <typeparamref name="TContent"/> from a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.Exists``2(Couchbase.Core.ILookupInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Check for existence of a fragment of type <typeparamref name="TContent"/> within a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.Insert``2(Couchbase.Core.IMutateInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean)">
            <summary>
            Insert a fragment of type <typeparamref name="TContent"/> into a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <param name="value">Value to insert at <paramref cref="!:path"/>.</param>
            <param name="createParents">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.Upsert``2(Couchbase.Core.IMutateInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Boolean)">
            <summary>
            Update or insert a fragment of type <typeparamref name="TContent"/> into a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <param name="value">Value to update or insert at <paramref name="path"/>.</param>
            <param name="createParents">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.Replace``2(Couchbase.Core.IMutateInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Replace a fragment of type <typeparamref name="TContent"/> in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <param name="value">Value to replace at <paramref name="path"/>.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.Remove``2(Couchbase.Core.IMutateInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Remove a fragment of type <typeparamref name="TContent"/> from a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.ArrayAppend``3(Couchbase.Core.IMutateInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``2,System.Boolean)">
            <summary>
            Push a fragment of type <typeparamref name="TContent"/> into the back of an array in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the array within the parent document.</typeparam>
            <typeparam name="TElement">Type of the array element being pushed.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the array from the parent document.</param>
            <param name="value">Value to push into the array.</param>
            <param name="createParents">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.ArrayPrepend``3(Couchbase.Core.IMutateInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``2,System.Boolean)">
            <summary>
            Push a fragment of type <typeparamref name="TContent"/> into the front of an array in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the array within the parent document.</typeparam>
            <typeparam name="TElement">Type of the array element being pushed.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the array from the parent document.</param>
            <param name="value">Value to push into the array.</param>
            <param name="createParents">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.ArrayInsert``2(Couchbase.Core.IMutateInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Insert a fragment of type <typeparamref name="TElement"/> into an array in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TElement">Type of the array element being inserted.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the array element from the parent document.</param>
            <param name="value">Value to insert into the array.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.ArrayAddUnique``3(Couchbase.Core.IMutateInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``2,System.Boolean)">
            <summary>
            Add a unique fragment of type <typeparamref name="TContent"/> into an array in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the array within the parent document.</typeparam>
            <typeparam name="TElement">Type of the array element being added.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the array from the parent document.</param>
            <param name="value">Value to insert into the array.</param>
            <param name="createParents">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.Counter``2(Couchbase.Core.IMutateInBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int64,System.Boolean)">
            <summary>
            Increment or decrement a counter of type <typeparamref name="TContent"/> in a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="builder"><see cref="T:Couchbase.Core.ILookupInBuilder`1"/> where the the subdocument lookup is being built.</param>
            <param name="path">Lambda expression path that navigates to the counter from the parent document.</param>
            <param name="delta">Amount to increment or decrement the counter.</param>
            <param name="createParents">If true, create parents along the path if they don't exist.</param>
            <returns>The <paramref name="builder"/> for expression chaining.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.Content``2(Couchbase.IDocumentFragment{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get the result type <typeparamref name="TContent"/> from a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="result"><see cref="T:Couchbase.IDocumentFragment`1"/> where the the subdocument lookup was returned.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.
            This must be a path that was provided originally to the <see cref="T:Couchbase.Core.ILookupInBuilder`1"/>.</param>
            <returns>The subdocument content.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Couchbase.SubdocExtensions.Exists``2(Couchbase.IDocumentFragment{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get the existence result for a fragement of type <typeparamref name="TContent"/> from a document of type <typeparamref name="TDocument"/>,
            using a given lambda expression path.
            </summary>
            <typeparam name="TDocument">Type of the parent document.</typeparam>
            <typeparam name="TContent">Type of the subdocument.</typeparam>
            <param name="result"><see cref="T:Couchbase.IDocumentFragment`1"/> where the the subdocument lookup was returned.</param>
            <param name="path">Lambda expression path that navigates to the subdocument from the parent document.
            This must be a path that was provided originally to the <see cref="T:Couchbase.Core.ILookupInBuilder`1"/>.</param>
            <returns>True if the subdocument exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="result"/> or <paramref name="path"/> is null.</exception>
        </member>
        <member name="T:Couchbase.TemporaryLockFailureException">
            <summary>
            Thrown when an attempt is made to lock on a document that has already been locked.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Couchbase.Utils.QueryResultExtensions">
            <summary>
            Provides methods which extend the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface, without actually modifying the interface.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.QueryResultExtensions.GetErrorsAsString``1(Couchbase.N1QL.IQueryResult{``0})">
            <summary>
            Converts the <see cref="P:Couchbase.N1QL.IQueryResult`1.Errors"/> collection to a string representation.
            </summary>
            <typeparam name="T">The Type of the row body.</typeparam>
            <param name="query">The <see cref="T:Couchbase.N1QL.IQueryResult`1"/> reference.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Utils.SynchronizationContextExclusion">
            <summary>
            Temporarily removes the <see cref="T:System.Threading.SynchronizationContext"/> from the current thread, replacing it once
            the object is disposed.
            </summary>
            <remarks>
            This is designed to help prevent deadlocks when synchronously waiting on an asynchronous task,
            as in http://blogs.msdn.com/b/pfxteam/archive/2012/04/13/10293638.aspx.  This class is designed
            to be used with a "using" clause for simplicity and to guarantee that the context is replaced even
            if there is an exception.
            </remarks>
        </member>
        <member name="M:Couchbase.Utils.TaskExtensions.ContinueOnAnyContext(System.Threading.Tasks.Task)">
            <summary>
            Makes the <see cref="T:System.Threading.Tasks.Task"/> resume without the current context.
            </summary>
            <param name="task">The current <see cref="T:System.Threading.Tasks.Task"/>.</param>
            <returns>The <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable"/> not dependent on the current context.</returns>
        </member>
        <member name="M:Couchbase.Utils.TaskExtensions.ContinueOnAnyContext``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Makes the <see cref="T:System.Threading.Tasks.Task`1"/> resume without the current context.
            </summary>
            <param name="task">The current <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1"/> not dependent on the current context.</returns>
        </member>
        <member name="M:Couchbase.Utils.TimeSpanExtensions.ToTtl(System.TimeSpan)">
            <summary>
            Converts a <see cref="T:System.TimeSpan" /> into an uint correctly representing a Time-To-Live,
            that is expressed in seconds.
            Durations strictly bigger than 30 days are converted to a unix-syle timestamp (seconds since the Epoch),
            as described in the couchbase TTL documentation.
            </summary>
            <returns>The TTL, expressed as a suitable uint.</returns>
        </member>
        <member name="F:Couchbase.Utils.ArrayExtensions.Random">
            <summary>
            Provides random number generation for array randomization
            </summary>
        </member>
        <member name="M:Couchbase.Utils.ArrayExtensions.ToJson(System.Collections.IEnumerable)">
            <summary>
            Converts an array to a JSON string.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Utils.ArrayExtensions.ToJson(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Converts an array to a JSON string and optionally strips the begining and ending brackets.
            </summary>
            <param name="array">The array.</param>
            <param name="stripBrackets">if set to <c>true</c> the brackets '[' and ']' will be removed.</param>
            <returns>A JSON string array.</returns>
        </member>
        <member name="M:Couchbase.Utils.ArrayExtensions.ToDelimitedN1QLString``1(``0[],System.Char)">
            <summary>Creates a string from a list with each value delimited by the value of <see cref="!:delimiter"/> and
            each value "N1QL escaped" by backticks "`".
            </summary>
            <typeparam name="T"></typeparam>
            <param name="theArray">The array to construct the string from.</param>
            <param name="delimiter">The value to delimit each value by.</param>
            <returns>A string of the values of the array delimited by the <see cref="!:delimiter"/> and enclosed with backticks.</returns>
        </member>
        <member name="T:Couchbase.Utils.ArraySegmentExtensions">
            <summary>
            Extension methods for copying values to <see cref="T:System.ArraySegment`1"/> instances.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.ArraySegmentExtensions.ConvertAndCopy(System.ArraySegment{System.Byte},System.UInt32,System.Int32,System.Int32)">
            <summary>
            Takes a value, converts it from little-endian to big-endian and the copies it to the <see cref="T:System.ArraySegment`1"/> at a given offset and length.
            </summary>
            <param name="arraySegment">The <see cref="T:System.ArraySegment`1"/> to copy the value to.</param>
            <param name="value">An <see cref="T:System.UInt32"/> to copy to the <see cref="T:System.ArraySegment`1"/>.</param>
            <param name="offset">The offset to write the value to within the <see cref="T:System.ArraySegment`1"/></param>
            <param name="count">The length of the write - e.g. 4 for a int, 8 for a long.</param>
        </member>
        <member name="M:Couchbase.Utils.ArraySegmentExtensions.ConvertAndCopy(System.ArraySegment{System.Byte},System.UInt64,System.Int32,System.Int32)">
            <summary>
            Takes a value, converts it from little-endian to big-endian and the copies it to the <see cref="T:System.ArraySegment`1"/> at a given offset and length.
            </summary>
            <param name="arraySegment">The <see cref="T:System.ArraySegment`1"/> to copy the value to.</param>
            <param name="value">An <see cref="T:System.UInt64"/> to copy to the <see cref="T:System.ArraySegment`1"/>.</param>
            <param name="offset">The offset to write the value to within the <see cref="T:System.ArraySegment`1"/></param>
            <param name="count">The length of the write - e.g. 4 for a int, 8 for a long.</param>
        </member>
        <member name="M:Couchbase.Utils.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> to an <see cref="T:System.Enum"/>. Assumes that
            the conversion is possible; e.g. the <see cref="!:value"/> field must match an enum name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="!:InvalidEnumArgumentException">Thrown if the conversion cannot be made.</exception>
        </member>
        <member name="M:Couchbase.Utils.StringExtensions.N1QlEscape(System.String)">
            <summary>
            Escape's a string with a N1QL delimiter - the backtick.
            </summary>
            <param name="theString">The string.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Utils.UriExtensions">
            <summary>
            Provides extension methods for working with <see cref="T:System.Uri"/> class instances.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.UriExtensions.GetIpAddress(System.Uri,System.Boolean)">
            <summary>
            Resolves a given <see cref="T:System.Uri"/> to an <see cref="T:System.Net.IPAddress"/> using DNS if necessary.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to resolve the <see cref="T:System.Net.IPAddress"/> from.</param>
            <param name="useInterNetworkV6Addresses"></param>
            <returns>An <see cref="T:System.Net.IPAddress"/> reference.</returns>
            <remarks>Only returns IPV4 Addresses unless <see cref="!:useInterNetworkV6Addresses"/> is true!</remarks>
        </member>
        <member name="M:Couchbase.Utils.UriExtensions.GetIPEndPoint(System.Uri,System.Int32)">
            <summary>
            Gets an <see cref="T:System.Net.IPEndPoint"/> given a valid <see cref="T:System.Uri"/> instance and port.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to use to get the <see cref="T:System.Net.IPEndPoint"/></param>
            <param name="port">The network port to use.</param>
            <returns>An <see cref="T:System.Net.IPEndPoint"/> reference.</returns>
        </member>
        <member name="T:Couchbase.Views.ISpatialViewQuery">
            <summary>
            An interface for Spatial view request which provide multidimensional spatial indexes in Couchbase.
            </summary>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.StartRange(System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The start range of the spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <remarks>The number of elements must match the number of dimensions of the index</remarks>
            <remarks>Array of numeric or null; optional</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.StartRange(System.Nullable{System.Double}[])">
            <summary>
            The start range of the spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <remarks>The number of elements must match the number of dimensions of the index</remarks>
            <remarks>Array of numeric or null; optional</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.EndRange(System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The end range of the spatial query.
            </summary>
            <param name="endRange">The end range.</param>
            <remarks>The number of elements must match the number of dimensions of the index</remarks>
            <remarks>Array of numeric or null; optional</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.EndRange(System.Nullable{System.Double}[])">
            <summary>
            The end range of the spatial query.
            </summary>
            <param name="endRange">The end range.</param>
            <remarks>The number of elements must match the number of dimensions of the index</remarks>
            <remarks>Array of numeric or null; optional</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Range(System.Collections.Generic.List{System.Nullable{System.Double}},System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The start and end range for a spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <param name="endRange">The end range.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Skip(System.Int32)">
            <summary>
            Skip this number of records before starting to return the results
            </summary>
            <param name="count">The number of records to skip</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Stale(Couchbase.Views.StaleState)">
            <summary>
            Allow the results from a stale view to be used. The default is StaleState.Ok; for development work set to StaleState.False
            </summary>
            <param name="staleState">The staleState value to use.</param>
            <returns>An ISpatialViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Limit(System.Int32)">
            <summary>
            Limit the number of the returned documents to the specified number
            </summary>
            <param name="limit">The numeric limit</param>
            <returns>An ISpatialViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Bucket(System.String)">
            <summary>
            Sets the name of the Couchbase Bucket.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>An ISpatialViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Development(System.Boolean)">
            <summary>
            Toggles the query between development or production dataset and View.
            </summary>
            <param name="development">If true the development View will be used</param>
            <returns>An ISpatialViewQuery object for chaining</returns>
        </member>
        <member name="P:Couchbase.Views.ISpatialViewQuery.Host">
            <summary>
            Gets the hostname or IP of the remote Couchbase server which will execute the query.
            </summary>
            <value>
            The host.
            </value>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.From(System.String,System.String)">
            <summary>
            Specifies the design document and view to execute.
            </summary>
            <param name="designDoc">The design document.</param>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.DesignDoc(System.String)">
            <summary>
            Specifies the design document.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.View(System.String)">
            <summary>
            Specifies the view to execute.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.ConnectionTimeout(System.Int32)">
            <summary>
            Specifies the server timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Views.IViewQueryable">
            <summary>
            A base interface for View and Spatial query requests.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.BucketName">
            <summary>
            Gets the name of the <see cref="T:Couchbase.Core.IBucket"/> that the query is targeting.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.UseSsl">
            <summary>
            When true, the generated url will contain 'https' and use port 18092
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.RetryAttempts">
            <summary>
            The number of times the view request was retried if it fails before succeeding or giving up.
            </summary>
            <remarks>Used internally.</remarks>
        </member>
        <member name="M:Couchbase.Views.IViewQueryable.RawUri">
            <summary>
            Returns the raw REST URI which can be executed in a browser or using curl.
            </summary>
            <returns>A <see cref="T:System.Uri"/> object that represents the query. This query can be run within a browser.</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQueryable.BaseUri(System.Uri)">
            <summary>
            Sets the base uri for the query if it's not set in the constructor.
            </summary>
            <param name="uri">The base uri to use - this is normally set internally and may be overridden by configuration.</param>
            <returns>An <see cref="T:Couchbase.Views.IViewQueryable"/> object for chaining</returns>
            <remarks>Note that this will override the baseUri set in the ctor. Additionally, this method may be called internally by the <see cref="T:Couchbase.Core.IBucket"/> and overridden.</remarks>
        </member>
        <member name="M:Couchbase.Views.IViewQueryable.UseStreaming(System.Boolean)">
            <summary>
            Toogles the if query result to is to be streamed. This is useful for large result sets in that it limits the
            working size of the query and helps reduce the possibility of a <see cref="T:System.OutOfMemoryException" /> from occurring.
            </summary>
            <param name="useStreaming">if set to <c>true</c> streams the results as you iterate through the response.</param>
            <returns>An IViewQueryable object for chaining</returns>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.IsStreaming">
            <summary>
            Gets a value indicating if the result should be streamed.
            </summary>
            <value><c>true</c> if the query result is to be streamed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Couchbase.Views.IViewResult`1">
            <summary>
            Represents the results of a View query.
            </summary>
            <typeparam name="T">The Type parameter to be used for deserialization by the <see cref="T:Couchbase.Views.IDataMapper"/>
            implementation.</typeparam>
        </member>
        <member name="P:Couchbase.Views.IViewResult`1.TotalRows">
            <summary>
            The total number of rows returned by the View request.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewResult`1.Rows">
            <summary>
            The results of the query if successful as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewResult`1.Error">
            <summary>
            A View engine specific error message if one occured.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewResult`1.StatusCode">
            <summary>
            The HTTP Status Code for the request
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewResult`1.Values">
            <summary>
            Returns the value of each element within the <see cref="P:Couchbase.Views.IViewResult`1.Rows"/> property as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Views.IViewResult`1.CannotRetry">
            <summary>
            Returns false if the error that caused the View request to fail can result in a retry request.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Views.SpatialViewQuery">
            <summary>
            An implementation for Spatial view request which provide multidimensional spatial indexes in Couchbase.
            </summary>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Couchbase#Views#IViewQueryable#BaseUri(System.Uri)">
            <summary>
            Sets the base uri for the query if it's not set in the constructor.
            </summary>
            <param name="uri">The base uri to use - this is normally set internally and may be overridden by configuration.</param>
            <returns>An IViewQuery object for chaining</returns>
            <remarks>Note that this will override the baseUri set in the ctor. Additionally, this method may be called internally by the <see cref="T:Couchbase.Core.IBucket"/> and overridden.</remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.UseStreaming(System.Boolean)">
            <summary>
            Toogles the if query result to is to be streamed. This is useful for large result sets in that it limits the
            working size of the query and helps reduce the possibility of a <see cref="T:System.OutOfMemoryException" /> from occurring.
            </summary>
            <param name="useStreaming">if set to <c>true</c> streams the results as you iterate through the response.</param>
            <returns>An IViewQueryable object for chaining</returns>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.IsStreaming">
            <summary>
            Gets a value indicating if the result should be streamed.
            </summary>
            <value><c>true</c> if the query result is to be streamed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.StartRange(System.Nullable{System.Double}[])">
            <summary>
            The start range of the spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <returns></returns>
            <remarks>
            The number of elements must match the number of dimensions of the index
            </remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.StartRange(System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The start range of the spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <returns></returns>
            <remarks>
            The number of elements must match the number of dimensions of the index
            </remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.EndRange(System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The end range of the spatial query.
            </summary>
            <param name="endRange">The end range.</param>
            <returns></returns>
            <remarks>
            The number of elements must match the number of dimensions of the index
            </remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.EndRange(System.Nullable{System.Double}[])">
            <summary>
            The end range of the spatial query.
            </summary>
            <param name="endRange">The end range.</param>
            <returns></returns>
            <remarks>
            The number of elements must match the number of dimensions of the index
            </remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Range(System.Collections.Generic.List{System.Nullable{System.Double}},System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The start and end range for a spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <param name="endRange">The end range.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.From(System.String,System.String)">
            <summary>
            Specifies the design document and view to execute.
            </summary>
            <param name="designDoc">The design document.</param>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Bucket(System.String)">
            <summary>
            Specifies the name of the bucket to query.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.DesignDoc(System.String)">
            <summary>
            Specifies the design document.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.View(System.String)">
            <summary>
            Specifies the view to execute.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Skip(System.Int32)">
            <summary>
            Skip this number of records before starting to return the results.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Stale(Couchbase.Views.StaleState)">
            <summary>
            Specifies the level of data freshness.
            </summary>
            <param name="staleState">State of the stale.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Limit(System.Int32)">
            <summary>
            Limit the number of the returned documents to the specified number.
            </summary>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.ConnectionTimeout(System.Int32)">
            <summary>
            Specifies the server timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Development(System.Boolean)">
            <summary>
            Toggles the query between development or production dataset and View.
            </summary>
            <param name="development">If true the development View will be used</param>
            <returns>An ISpatialViewQuery object for chaining</returns>
            <remarks>The default is false; use the published, production view.</remarks>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.Port">
            <summary>
            Gets the port to use if the default port is overridden.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.SslPort">
            <summary>
            Gets the SSL port to use if the default SSL/TLS port is overridden.
            </summary>
            <value>
            The SSL port.
            </value>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.BucketName">
            <summary>
            Gets the name of the bucket.
            </summary>
            <value>
            The name of the bucket.
            </value>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.UseSsl">
            <summary>
            Gets or sets a value indicating whether to use SSL.
            </summary>
            <value>
              <c>true</c> if [use SSL]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.RetryAttempts">
            <summary>
            Gets or sets the retry attempts.
            </summary>
            <value>
            The retry attempts.
            </value>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.Host">
            <summary>
            Gets the host that will execute the query.
            </summary>
            <value>
            The host.
            </value>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.RawUri">
            <summary>
            Raws the URI.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Views.StreamingViewResult`1">
            <summary>
            Represents a streaming View response for reading each row as it becomes available over the network.
            Note that unless there is no underlying collection representing the response, instead the rows are extracted
            from the stream one at a time. If the Enumeration is evaluated, eg calling ToList(), then the entire response
            will be read. Once a row has been read from the stream, it is not available to be read again.
            A <see cref="T:Couchbase.StreamAlreadyReadException"/> will be thrown if the result is enumerated after it has reached
            the end of the stream.
            </summary>
            <typeparam name="T">A POCO that matches each row of the reponse.</typeparam>
            <seealso cref="T:Couchbase.Views.IViewResult`1" />
        </member>
        <member name="P:Couchbase.Views.StreamingViewResult`1.TotalRows">
            <summary>
            The total number of rows.
            </summary>
        </member>
        <member name="P:Couchbase.Views.StreamingViewResult`1.Rows">
            <summary>
            The results of the query if successful as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="P:Couchbase.Views.StreamingViewResult`1.Values">
            <summary>
            Returns the value of each element within the <see cref="P:Couchbase.Views.StreamingViewResult`1.Rows"/> property as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Views.ViewResult`1">
            <summary>
            Represents the results of a View query.
            </summary>
            <typeparam name="T">The Type parameter to be used for deserialization by the <see cref="T:Couchbase.Views.IDataMapper"/>
            implementation.</typeparam>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.TotalRows">
            <summary>
            The total number of rows.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Rows">
            <summary>
            The results of the query if successful as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Values">
            <summary>
            Returns the value of each element within the <see cref="P:Couchbase.Views.ViewResult`1.Rows"/> property as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Error">
            <summary>
            An error message if one occured.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.StatusCode">
            <summary>
            The HTTP Status Code for the request
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Success">
            <summary>
            True if the request was successful
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Message">
            <summary>
            An optional message returned by the server or the client
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="M:Couchbase.Views.ViewResult`1.CannotRetry">
            <summary>
            Checks to see if the operation is eligible for a retry.
            </summary>
            <returns>True if the operation should not be retried.</returns>
        </member>
        <member name="M:Couchbase.Views.ViewResult`1.Check500ForRetry">
            <summary>
            Checks to see if a HTTP 500 can result in a retry operation
            </summary>
            <remarks>Derived rules: https://docs.google.com/document/d/1GhRxvPb7xakLL4g00FUi6fhZjiDaP33DTJZW7wfSxrI/edit</remarks>
            <returns>True if the operation should not be retried</returns>
        </member>
        <member name="M:Couchbase.Views.ViewResult`1.Check404ForRetry">
            <summary>
            Checks to see if a HTTP 400 can result in a retry operation
            </summary>
            <remarks>Derived rules: https://docs.google.com/document/d/1GhRxvPb7xakLL4g00FUi6fhZjiDaP33DTJZW7wfSxrI/edit</remarks>
            <returns>True if the operation should not be retried</returns>
        </member>
        <member name="T:Couchbase.Views.IDataMapper">
            <summary>
            Provides and interface for mapping the results of a <see cref="T:Couchbase.Views.ViewQuery"/> to it's <see cref="T:Couchbase.Views.IViewResult`1"/>
            </summary>
        </member>
        <member name="M:Couchbase.Views.IDataMapper.Map``1(System.IO.Stream)">
            <summary>
            Maps the entire results
            </summary>
            <typeparam name="T">The <see cref="T:Couchbase.Views.IViewResult`1"/>'s Type paramater.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> results of the query.</param>
            <returns>An object deserialized to it's T type.</returns>
        </member>
        <member name="T:Couchbase.Views.IViewClient">
            <summary>
            An interface for client-side support for querying Couchbase views.
            </summary>
        </member>
        <member name="M:Couchbase.Views.IViewClient.ExecuteAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> asynchronously against a View.
            </summary>
            <typeparam name="T">The Type parameter of the result returned by the query.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQueryable"/> to execute on.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="M:Couchbase.Views.IViewClient.Execute``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> synchronously against a View.
            </summary>
            <typeparam name="T">The Type parameter of the result returned by the query.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQueryable"/> to execute on.</param>
            <returns>The <see cref="T:Couchbase.Views.IViewResult`1"/> instance which is the results of the query.</returns>
        </member>
        <member name="P:Couchbase.Views.IViewClient.Mapper">
            <summary>
            An <see cref="T:Couchbase.Views.IDataMapper"/> instance for handling deserialization of <see cref="T:Couchbase.Views.IViewResult`1"/>
            and mapping then to the queries Type paramater.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewClient.HttpClient">
            <summary>
            The <see cref="P:Couchbase.Views.IViewClient.HttpClient"/> used to execute the HTTP request against the Couchbase server.
            </summary>
        </member>
        <member name="T:Couchbase.Views.IViewQuery">
            <summary>
            Implemented as an object that can query a Couchbase View.
            <remarks>This is a "Fluent" style interface and methods can be chained togather.</remarks>
            </summary>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Asc">
            <summary>
            Return the documents in ascending by key order
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Desc">
            <summary>
            Return the documents in descending by key order
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.EndKey(System.Object)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.EndKey(System.Object,System.Boolean)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.EndKeyDocId(System.Object)">
            <summary>
            Stop returning records when the specified document ID is reached
            </summary>
            <param name="docId">The document Id to stop at.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.FullSet">
            <summary>
            Use the full cluster data set (development views only).
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Group(System.Boolean)">
            <summary>
            Group the results using the reduce function to a group or single row
            </summary>
            <param name="group">True to group using the reduce function into a single row</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.GroupLevel(System.Int32)">
            <summary>
            Specify the group level to be used
            </summary>
            <param name="level">The level of grouping to use</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.InclusiveEnd(System.Boolean)">
            <summary>
            Specifies whether the specified end key should be included in the result
            </summary>
            <param name="inclusiveEnd">True to include the last key in the result</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Key(System.Object)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Key(System.Object,System.Boolean)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Keys(System.Collections.IEnumerable)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Keys(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.OnError(System.Boolean)">
            <summary>
            Sets the response in the event of an error
            </summary>
            <param name="stop">True to stop in the event of an error; true to continue</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Reduce(System.Boolean)">
            <summary>
            Use the reduction function
            </summary>
            <param name="reduce">True to use the reduduction property. Default is false;</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.StartKey(System.Object)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to return records greater than or equal to.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.StartKey(System.Object,System.Boolean)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to return records greater than or equal to.</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.StartKeyDocId(System.Object)">
            <summary>
            Return records starting with the specified document ID.
            </summary>
            <param name="docId">The docId to return records greater than or equal to.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.From(System.String,System.String)">
            <summary>
            Specifies the bucket and design document to target for a query.
            </summary>
            <param name="designDoc">The bucket to target</param>
            <param name="view">The design document to use</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Bucket(System.String)">
            <summary>
            Sets the name of the Couchbase Bucket.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.DesignDoc(System.String)">
            <summary>
            Sets the name of the design document.
            </summary>
            <param name="name">The name of the design document to use.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.View(System.String)">
            <summary>
            Sets the name of the view to query.
            </summary>
            <param name="name">The name of the view to query.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Skip(System.Int32)">
            <summary>
            Skip this number of records before starting to return the results
            </summary>
            <param name="count">The number of records to skip</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Stale(Couchbase.Views.StaleState)">
            <summary>
            Allow the results from a stale view to be used. The default is StaleState.Ok; for development work set to StaleState.False
            </summary>
            <param name="staleState">The staleState value to use.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Limit(System.Int32)">
            <summary>
            Limit the number of the returned documents to the specified number
            </summary>
            <param name="limit">The numeric limit</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.ConnectionTimeout(System.Int32)">
            <summary>
            The number of seconds before the request will be terminated if it has not completed.
            </summary>
            <param name="timeout">The period of time in seconds</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Development(System.Boolean)">
            <summary>
            Toggles the query between development or production dataset and View.
            </summary>
            <param name="development">If true the development View will be used</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="T:Couchbase.Views.JsonDataMapper">
            <summary>
            A class for mapping an input stream of JSON to a Type T using a <see cref="T:Newtonsoft.Json.JsonTextReader"/> instance.
            </summary>
        </member>
        <member name="M:Couchbase.Views.JsonDataMapper.Map``1(System.IO.Stream)">
            <summary>
            Maps a single row.
            </summary>
            <typeparam name="T">The <see cref="T:Couchbase.Views.IViewResult`1"/>'s Type paramater.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> results of the query.</param>
            <returns>An object deserialized to it's T type.</returns>
        </member>
        <member name="T:Couchbase.Views.StaleState">
            <summary>
            Allow the results from a stale view to be used
            </summary>
        </member>
        <member name="T:Couchbase.Views.StaleStateExtensions">
            <summary>
            Extension methods for working withe StaleState enumeration.
            </summary>
        </member>
        <member name="M:Couchbase.Views.StaleStateExtensions.ToLowerString(Couchbase.Views.StaleState)">
            <summary>
            Converts the StaleState value to a lowercase string.
            </summary>
            <param name="value">The <see cref="T:Couchbase.Views.StaleState"/> enumeration value to convert to a string.</param>
            <returns>The string value of a StaleState enumeration.</returns>
        </member>
        <member name="M:Couchbase.Views.ViewClient.ExecuteAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> asynchronously against a View.
            </summary>
            <typeparam name="T">The Type parameter of the result returned by the query.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> to execute on.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="T:Couchbase.Views.ViewClientBase">
            <summary>
            A base class for view clients that implements <see cref="T:Couchbase.Views.IViewClient"/> for executing <see cref="T:Couchbase.Views.IViewQuery"/> queries against a Couchbase View.
            </summary>
        </member>
        <member name="M:Couchbase.Views.ViewClientBase.ExecuteAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> asynchronously against a View.
            </summary>
            <typeparam name="T">The Type parameter of the result returned by the query.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> to execute on.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="M:Couchbase.Views.ViewClientBase.Execute``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> synchronously against a View.
            </summary>
            <typeparam name="T">The Type parameter of the result returned by the query.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> to execute on.</param>
            <returns>The <see cref="T:Couchbase.Views.IViewResult`1"/> instance which is the results of the query.</returns>
        </member>
        <member name="P:Couchbase.Views.ViewClientBase.HttpClient">
            <summary>
            The <see cref="P:Couchbase.Views.ViewClientBase.HttpClient"/> used to execute the HTTP request against the Couchbase server.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewClientBase.Mapper">
            <summary>
            The <see cref="P:Couchbase.Views.ViewClientBase.HttpClient"/> used to execute the HTTP request against the Couchbase server.
            </summary>
        </member>
        <member name="M:Couchbase.Views.StreamingViewClient.ExecuteAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> asynchronously against a View.
            </summary>
            <typeparam name="T">The Type parameter of the result returned by the query.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> to execute on.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="T:Couchbase.Views.ViewQuery">
            <summary>
            Implemented as an object that can query a Couchbase View.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.UseSsl">
            <summary>
            When true, the generated url will contain 'https' and use port 18092
            </summary>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.From(System.String,System.String)">
            <summary>
            Specifies the bucket and design document to target for a query.
            </summary>
            <param name="designDoc">The bucket to target</param>
            <param name="view">The design document to use</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Bucket(System.String)">
            <summary>
            Sets the name of the Couchbase Bucket.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.DesignDoc(System.String)">
            <summary>
            Sets the name of the design document.
            </summary>
            <param name="name">The name of the design document to use.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.View(System.String)">
            <summary>
            Sets the name of the view to query.
            </summary>
            <param name="name">The name of the view to query.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Skip(System.Int32)">
            <summary>
            Skip this number of records before starting to return the results
            </summary>
            <param name="count">The number of records to skip</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Stale(Couchbase.Views.StaleState)">
            <summary>
            Allow the results from a stale view to be used. The default is StaleState.Ok; for development work set to StaleState.False
            </summary>
            <param name="staleState">The staleState value to use.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Asc">
            <summary>
            Return the documents in ascending by key order
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Desc">
            <summary>
            Return the documents in descending by key order
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EndKey(System.Object)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EndKey(System.Object,System.Boolean)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EndKeyDocId(System.Object)">
            <summary>
            Stop returning records when the specified document ID is reached
            </summary>
            <param name="endDocId">The document Id to stop at.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.FullSet">
            <summary>
            Use the full cluster data set (development views only).
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Group(System.Boolean)">
            <summary>
            Group the results using the reduce function to a group or single row
            </summary>
            <param name="group">True to group using the reduce function into a single row</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.GroupLevel(System.Int32)">
            <summary>
            Specify the group level to be used
            </summary>
            <param name="level">The level of grouping to use</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.InclusiveEnd(System.Boolean)">
            <summary>
            Specifies whether the specified end key should be included in the result
            </summary>
            <param name="inclusiveEnd">True to include the last key in the result</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Key(System.Object)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Key(System.Object,System.Boolean)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Keys(System.Collections.IEnumerable)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Keys(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Limit(System.Int32)">
            <summary>
            Limit the number of the returned documents to the specified number
            </summary>
            <param name="limit">The numeric limit</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.OnError(System.Boolean)">
            <summary>
            Sets the response in the event of an error
            </summary>
            <param name="stop">True to stop in the event of an error; true to continue</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Reduce(System.Boolean)">
            <summary>
            Use the reduction function
            </summary>
            <param name="reduce">True to use the reduduction property. Default is false;</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.StartKey(System.Object)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="startKey">The key to return records greater than or equal to.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.StartKey(System.Object,System.Boolean)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="startKey">The key to return records greater than or equal to.</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.StartKeyDocId(System.Object)">
            <summary>
            Return records starting with the specified document ID.
            </summary>
            <param name="startKeyDocId">The docId to return records greater than or equal to.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.ConnectionTimeout(System.Int32)">
            <summary>
            The number of seconds before the request will be terminated if it has not completed.
            </summary>
            <param name="timeout">The period of time in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Couchbase#Views#IViewQueryable#BaseUri(System.Uri)">
            <summary>
            Sets the base uri for the query if it's not set in the constructor.
            </summary>
            <param name="uri">The base uri to use - this is normally set internally and may be overridden by configuration.</param>
            <returns>An IViewQuery object for chaining</returns>
            <remarks>Note that this will override the baseUri set in the ctor. Additionally, this method may be called internally by the <see cref="T:Couchbase.Core.IBucket"/> and overridden.</remarks>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Development(System.Boolean)">
            <summary>
            Toggles the query between development or production dataset and View.
            </summary>
            <param name="development">If true the development View will be used</param>
            <returns>An IViewQuery object for chaining</returns>
            <remarks>The default is false; use the published, production view.</remarks>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.UseStreaming(System.Boolean)">
            <summary>
            Toogles the if query result to is to be streamed. This is useful for large result sets in that it limits the
            working size of the query and helps reduce the possibility of a <see cref="T:System.OutOfMemoryException" /> from occurring.
            </summary>
            <param name="useStreaming">if set to <c>true</c> streams the results as you iterate through the response.</param>
            <returns>An IViewQueryable object for chaining</returns>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.IsStreaming">
            <summary>
            Gets a value indicating if the result should be streamed.
            </summary>
            <value><c>true</c> if the query result is to be streamed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.BucketName">
            <summary>
            Gets the name of the <see cref="T:Couchbase.Core.IBucket"/> that the query is targeting.
            </summary>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EncodeParameter(System.Object)">
            <summary>
            JSON encodes the parameter and URI escapes the input parameter.
            </summary>
            <param name="parameter">The parameter to encode.</param>
            <returns>A JSON and URI escaped copy of the parameter.</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.RawUri">
            <summary>
            Returns the raw REST URI which can be executed in a browser or using curl.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.RetryAttempts">
            <summary>
            The number of times the view request was retried if it fails before succeeding or giving up.
            </summary>
            <remarks>Used internally.</remarks>
        </member>
        <member name="T:Couchbase.Views.ViewRow`1">
            <summary>
            Represents a single row returned from a View request
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Couchbase.Views.ViewRow`1.Id">
            <summary>
            The identifier for the row
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewRow`1.Key">
            <summary>
            The key emitted by the View Map function
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewRow`1.Value">
            <summary>
            The value emitted by the View Map function or if a Reduce view, the value of the Reduce
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewRow`1.Geometry">
            <summary>
            If the View query was a <see cref="T:Couchbase.Views.SpatialViewQuery"/> and the Map function emitted a geometry this field will contain the emitted geometry.
            </summary>
            <value>
            The geometry object optionally emited from a GEO Spatial View. The structure must be compatible with the GEOJson specification.
            </value>
            <remarks>This value will be null for all non-Geo Views or if the geometry is not emitted from the Map function.</remarks>
        </member>
        <member name="T:Couchbase.OperationResult`1">
            <summary>
            The primary return type for binary Memcached operations which return a value
            </summary>
            <typeparam name="T">The value returned by the operation.</typeparam>
        </member>
        <member name="P:Couchbase.OperationResult`1.Value">
            <summary>
            The value of the key retrieved from Couchbase Server.
            </summary>
        </member>
        <member name="M:Couchbase.OperationResult`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Couchbase.IOperationResult">
            <summary>
            The primary return type for binary Memcached operations
            </summary>
        </member>
        <member name="P:Couchbase.IOperationResult.Token">
            <summary>
            Gets the mutation token for the operation if enhanced durability is enabled.
            </summary>
            <value>
            The mutation token.
            </value>
            <remarks>Note: this is used internally for enhanced durability if supported by
            the Couchbase server version and enabled by configuration.</remarks>
        </member>
        <member name="P:Couchbase.IOperationResult.Cas">
            <summary>
            The 'Check and Set' or 'CAS' value for enforcing optimistic concurrency.
            </summary>
        </member>
        <member name="P:Couchbase.IOperationResult.Status">
            <summary>
            The server's response status for the operation.
            </summary>
        </member>
        <member name="P:Couchbase.IOperationResult.Durability">
            <summary>
            The level of durability that the operation achieved
            </summary>
        </member>
        <member name="M:Couchbase.IOperationResult.IsNmv">
            <summary>
            Checks if the server responded with a Not My Vbucket.
            </summary>
            <returns>Returns true if <see cref="T:Couchbase.IO.ResponseStatus"/> is a VBucketBelongsToAnotherServer.</returns>
        </member>
        <member name="P:Couchbase.IOperationResult.Id">
            <summary>
            Gets the id or key for the document.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Couchbase.IOperationResult.OpCode">
            <summary>
            Gets the op code.
            </summary>
            <value>
            The op code.
            </value>
        </member>
        <member name="T:Couchbase.IResult">
            <summary>
            Default interface for all operation return types.
            </summary>
        </member>
        <member name="P:Couchbase.IResult.Success">
            <summary>
            Returns true if the operation was succesful.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="P:Couchbase.IResult.Message">
            <summary>
            If the operation wasn't succesful, a message indicating why it was not succesful.
            </summary>
        </member>
        <member name="P:Couchbase.IResult.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="M:Couchbase.IResult.ShouldRetry">
            <summary>
            If the response indicates the request is retryable, returns true.
            </summary>
            <returns></returns>
            <remarks>Intended for internal use only.</remarks>
        </member>
        <member name="T:Couchbase.OperationResult">
            <summary>
            The result of an operation.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="P:Couchbase.OperationResult.Success">
            <summary>
            True if the operation succeeded.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="P:Couchbase.OperationResult.Message">
            <summary>
            If Success is false, the reason why the operation failed.
            </summary>
        </member>
        <member name="P:Couchbase.OperationResult.Token">
            <summary>
            Gets the mutation token for the operation if enhanced durability is enabled.
            </summary>
            <value>
            The mutation token.
            </value>
        </member>
        <member name="P:Couchbase.OperationResult.Cas">
            <summary>
            The 'Check and Set' or 'CAS' value for enforcing optimistic concurrency.
            </summary>
        </member>
        <member name="P:Couchbase.OperationResult.Status">
            <summary>
            The status returned from the Couchbase Server after an operation.
            </summary>
            <remarks><see cref="F:Couchbase.IO.ResponseStatus.Success"/> will be returned if <see cref="P:Couchbase.OperationResult.Success"/>
            is true, otherwise <see cref="P:Couchbase.OperationResult.Success"/> will be false. If <see cref="F:Couchbase.IO.ResponseStatus.ClientFailure"/> is
            returned, then the operation failed before being sent to the Couchbase Server.</remarks>
        </member>
        <member name="P:Couchbase.OperationResult.Durability">
            <summary>
            The level of durability that the operation achieved
            </summary>
        </member>
        <member name="P:Couchbase.OperationResult.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="M:Couchbase.OperationResult.IsNmv">
            <summary>
            Checks if the server responded with a Not My Vbucket.
            </summary>
            <returns>Returns true if <see cref="T:Couchbase.IO.ResponseStatus"/> is a VBucketBelongsToAnotherServer.</returns>
        </member>
        <member name="P:Couchbase.OperationResult.Id">
            <summary>
            Gets the id or key for the document.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Couchbase.OperationResult.OpCode">
            <summary>
            Gets the <see cref="T:Couchbase.IO.Operations.OperationCode"/> for the operation.
            </summary>
            <value>
            The op code.
            </value>
        </member>
        <member name="M:Couchbase.OperationResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Couchbase.OperationResult.SetException">
            <summary>
            Sets the <see cref="P:Couchbase.OperationResult.Exception"/> based upon the <see cref="P:Couchbase.OperationResult.Status"/> returned by the server.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Couchbase.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Couchbase.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Couchbase.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Couchbase.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Couchbase.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Couchbase.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:Couchbase.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:Couchbase.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Couchbase.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.ServerUnavailableException">
            <summary>
            Thrown when the client cannot find a healthy server to execute an operation on. This
            could temporarily happen during a swap/failover/rebalance situation. The calling code
            could decide to retry the operation after handling this exception.
            </summary>
        </member>
        <member name="T:Couchbase.StreamAlreadyReadException">
            <summary>
            Thrown when an attempt is made to access a property or methods before reading the request stream via iteration.
            </summary>
            <seealso cref="T:System.InvalidOperationException" />
        </member>
        <member name="T:Couchbase.ErrorPrepared">
            <summary>
            An enum listing the N1QL codes that should trigger a retry for non adhoc queries.
            </summary>
            <remarks>Generic (5000) also needs a check of the message content to determine if
            retry is applicable or not</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Couchbase.PrepareStatementException" -->
    </members>
</doc>
